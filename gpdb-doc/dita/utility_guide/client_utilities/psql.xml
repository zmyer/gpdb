<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="kb137116">psql</title>
  <body>
    <p id="client_util_desc">Interactive command-line interface for Greenplum Database</p>
    <section id="section2">
      <title>Synopsis</title>
      <codeblock id="client_util_synopsis"><b>psql</b> [<varname>option</varname> ...] [<varname>dbname</varname> [<varname>username</varname>]]</codeblock>
    </section>
    <section id="section3">
      <title>Description</title>
      <p><codeph>psql</codeph> is a terminal-based front-end to Greenplum Database. It
        enables you to type in queries interactively, issue them to Greenplum Database, and see the query results. Alternatively, input can be from a file. In addition, it
        provides a number of meta-commands and various shell-like features to facilitate writing
        scripts and automating a wide variety of tasks.</p>
    </section>
    <section id="section4">
      <title>Options</title>
      <parml>
        <plentry>
          <pt>-a | --echo-all</pt>
          <pd>Print all input lines to standard output as they are read. This is more useful for
            script processing rather than interactive mode.</pd>
        </plentry>
        <plentry>
          <pt>-A | --no-align</pt>
          <pd>Switches to unaligned output mode. (The default output mode is aligned.) </pd>
        </plentry>
        <plentry>
          <pt>-c '<varname>command</varname>' | --command '<varname>command'</varname></pt>
          <pd>Specifies that <codeph>psql</codeph> is to execute the specified command string, and
            then exit. This is useful in shell scripts. <varname>command</varname> must be either a
            command string that is completely parseable by the server, or a single backslash
            command. Thus you cannot mix SQL and <codeph>psql</codeph> meta-commands with this
            option. To achieve that, you could pipe the string into <codeph>psql</codeph>, like
            this:<codeblock>echo '\x \\ SELECT * FROM foo;' | psql</codeblock></pd>
          <pd>(<codeph>\\</codeph> is the separator meta-command.) </pd>
          <pd>If the command string contains multiple SQL commands, they are processed in a single
            transaction, unless there are explicit <codeph>BEGIN/COMMIT</codeph> commands included
            in the string to divide it into multiple transactions. This is different from the
            behavior when the same string is fed to <codeph>psql</codeph>'s standard input.</pd>
        </plentry>
        <plentry>
          <pt>-d <varname>dbname</varname> | --dbname <varname>dbname</varname></pt>
          <pd>Specifies the name of the database to connect to. This is equivalent to specifying
            dbname as the first non-option argument on the command line.</pd>
          <pd>If this parameter contains an equals sign, it is treated as a
              <codeph>conninfo</codeph> string; for example you can pass <codeph>'dbname=postgres
              user=username password=mypass'</codeph> as <codeph>dbname</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>-e | --echo-queries</pt>
          <pd>Copy all SQL commands sent to the server to standard output as well.</pd>
        </plentry>
        <plentry>
          <pt>-E | --echo-hidden</pt>
          <pd>Echo the actual queries generated by <codeph>\d</codeph> and other backslash commands.
            You can use this to study <codeph>psql</codeph>'s internal operations.</pd>
        </plentry>
        <plentry>
          <pt>-f <varname>filename</varname> | --file <varname>filename</varname></pt>
          <pd>Use a file as the source of commands instead of reading commands interactively. After
            the file is processed, <codeph>psql</codeph> terminates. If <varname>filename</varname>
            is <codeph>-</codeph> (hyphen), then standard input is read. Using this option is subtly
            different from writing <codeph>psql &lt;</codeph><varname>filename</varname>. In
            general, both will do what you expect, but using <codeph>-f</codeph> enables some nice
            features such as error messages with line numbers.</pd>
        </plentry>
        <plentry>
          <pt>-F <varname>separator</varname> | --field-separator <varname>separator</varname></pt>
          <pd>Use the specified separator as the field separator for unaligned output. </pd>
        </plentry>
        <plentry>
          <pt>-H | --html</pt>
          <pd>Turn on HTML tabular output.</pd>
        </plentry>
        <plentry>
          <pt>-l | --list</pt>
          <pd>List all available databases, then exit. Other non-connection options are
            ignored.</pd>
        </plentry>
        <plentry>
          <pt>-L <varname>filename</varname> | --log-file <varname>filename</varname></pt>
          <pd>Write all query output into the specified log file, in addition to the normal output
            destination.</pd>
        </plentry>
        <plentry>
          <pt>-o <varname>filename</varname> | --output <varname>filename</varname></pt>
          <pd>Put all query output into the specified file.</pd>
        </plentry>
        <plentry>
          <pt>-P <varname>assignment</varname> | --pset <varname>assignment</varname></pt>
          <pd>Allows you to specify printing options in the style of <codeph>\pset</codeph> on the
            command line. Note that here you have to separate name and value with an equal sign
            instead of a space. Thus to set the output format to LaTeX, you could write <codeph>-P
              format=latex</codeph>. </pd>
        </plentry>
        <plentry>
          <pt>-q | --quiet</pt>
          <pd>Specifies that <codeph>psql</codeph> should do its work quietly. By default, it prints
            welcome messages and various informational output. If this option is used, none of this
            happens. This is useful with the <codeph>-c</codeph> option.</pd>
        </plentry>
        <plentry>
          <pt>-R <varname>separator</varname> | --record-separator <varname>separator</varname></pt>
          <pd>Use <varname>separator</varname> as the record separator for unaligned output.</pd>
        </plentry>
        <plentry>
          <pt>-s | --single-step</pt>
          <pd>Run in single-step mode. That means the user is prompted before each command is sent
            to the server, with the option to cancel execution as well. Use this to debug scripts.
          </pd>
        </plentry>
        <plentry>
          <pt>-S | --single-line</pt>
          <pd>Runs in single-line mode where a new line terminates an SQL command, as a semicolon
            does.</pd>
        </plentry>
        <plentry>
          <pt>-t | --tuples-only</pt>
          <pd>Turn off printing of column names and result row count footers, etc. This command is
            equivalent to <codeph>\pset tuples_only</codeph> and is provided for convenience. </pd>
        </plentry>
        <plentry>
          <pt>-T <varname>table_options</varname> | --table-attr
            <varname>table_options</varname></pt>
          <pd>Allows you to specify options to be placed within the HTML table tag. See
              <codeph>\pset</codeph> for details. </pd>
        </plentry>
        <plentry>
          <pt>-v <varname>assignment</varname> | --set <varname>assignment</varname> | --variable
              <varname>assignment</varname></pt>
          <pd>Perform a variable assignment, like the <codeph>\set</codeph> internal command. Note
            that you must separate name and value, if any, by an equal sign on the command line. To
            unset a variable, leave off the equal sign. To just set a variable without a value, use
            the equal sign but leave off the value. These assignments are done during a very early
            stage of start-up, so variables reserved for internal purposes might get overwritten
            later.</pd>
        </plentry>
        <plentry>
          <pt>-V | --version</pt>
          <pd>Print the <codeph>psql</codeph> version and exit. </pd>
        </plentry>
        <plentry>
          <pt>-x | --expanded</pt>
          <pd>Turn on the expanded table formatting mode.</pd>
        </plentry>
        <plentry>
          <pt>-X | --no-psqlrc</pt>
          <pd>Do not read the start-up file (neither the system-wide <codeph>psqlrc</codeph> file
            nor the user's <codeph>~/.psqlrc</codeph> file). </pd>
        </plentry>
        <plentry>
          <pt>-1 | --single-transaction</pt>
          <pd>When <codeph>psql</codeph> executes a script with the <codeph>-f</codeph> option,
            adding this option wraps <codeph>BEGIN/COMMIT</codeph> around the script to execute it
            as a single transaction. This ensures that either all the commands complete
            successfully, or no changes are applied.</pd>
          <pd>If the script itself uses <codeph>BEGIN</codeph>, <codeph>COMMIT</codeph>, or
              <codeph>ROLLBACK</codeph>, this option will not have the desired effects. Also, if the
            script contains any command that cannot be executed inside a transaction block,
            specifying this option will cause that command (and hence the whole transaction) to
            fail.</pd>
        </plentry>
        <plentry>
          <pt>-? | --help</pt>
          <pd>Show help about <codeph>psql</codeph> command line arguments, and exit. </pd>
        </plentry>
      </parml>
      <sectiondiv id="section5">
        <b>Connection Options</b>
        <parml>
          <plentry>
            <pt>-h <varname>host</varname> | --host <varname>host</varname></pt>
            <pd>The host name of the machine on which the Greenplum
              master database server is running. If not specified, reads from the environment
              variable <codeph>PGHOST</codeph> or defaults to localhost.</pd>
          </plentry>
          <plentry>
            <pt>-p <varname>port</varname> | --port <varname>port</varname></pt>
            <pd>The TCP port on which the Greenplum master database
              server is listening for connections. If not specified, reads from the environment
              variable <codeph>PGPORT</codeph> or defaults to 5432.</pd>
          </plentry>
          <plentry>
            <pt>-U <varname>username</varname> | --username <varname>username</varname></pt>
            <pd>The database role name to connect as. If not specified, reads from the environment
              variable <codeph>PGUSER</codeph> or defaults to the current system role name.</pd>
          </plentry>
          <plentry>
            <pt>-W | --password</pt>
            <pd>Force a password prompt. <codeph>psql</codeph> should automatically prompt for a
              password whenever the server requests password authentication. However, currently
              password request detection is not totally reliable, hence this option to force a
              prompt. If no password prompt is issued and the server requires password
              authentication, the connection attempt will fail.</pd>
          </plentry>
          <plentry>
            <pt>-w --no-password</pt>
            <pd>Never issue a password prompt. If the server requires password authentication and a
              password is not available by other means such as a .pgpass file, the connection
              attempt will fail. This option can be useful in batch jobs and scripts where no user
              is present to enter a password. </pd>
            <pd><b>Note:</b> This option remains set for the entire session, and so it affects uses
              of the meta-command <codeph>\connect</codeph> as well as the initial connection
              attempt. </pd>
          </plentry>
        </parml>
      </sectiondiv>
    </section>
    <section id="section6">
      <title>Exit Status</title>
      <p><codeph>psql</codeph> returns 0 to the shell if it finished normally, 1 if a fatal error of
        its own (out of memory, file not found) occurs, 2 if the connection to the server went bad
        and the session was not interactive, and 3 if an error occurred in a script and the variable
          <codeph>ON_ERROR_STOP</codeph> was set.</p>
    </section>
    <section id="section7">
      <title>Usage</title>
      <sectiondiv id="section8">
        <b>Connecting to a Database</b>
        <p><codeph>psql</codeph> is a client application for Greenplum Database. In
          order to connect to a database you need to know the name of your target database, the host
          name and port number of the Greenplum master server and what
          database user name you want to connect as. <codeph>psql</codeph> can be told about those
          parameters via command line options, namely <codeph>-d</codeph>, <codeph>-h</codeph>,
            <codeph>-p</codeph>, and <codeph>-U</codeph> respectively. If an argument is found that
          does not belong to any option it will be interpreted as the database name (or the user
          name, if the database name is already given). Not all these options are required; there
          are useful defaults. If you omit the host name, <codeph>psql</codeph> will connect via a
          UNIX-domain socket to a master server on the local host, or via TCP/IP to
            <codeph>localhost</codeph> on machines that do not have UNIX-domain sockets. The default
          master port number is 5432. If you use a different port for the master, you must specify
          the port. The default database user name is your UNIX user name, as is the default
          database name. Note that you cannot just connect to any database under any user name. Your
          database administrator should have informed you about your access rights.</p>
        <p>When the defaults are not right, you can save yourself some typing by setting any or all
          of the environment variables <codeph>PGAPPNAME</codeph>, <codeph>PGDATABASE</codeph>,
            <codeph>PGHOST</codeph>, <codeph>PGPORT</codeph>, and <codeph>PGUSER</codeph> to
          appropriate values. </p>
        <p>It is also convenient to have a <codeph>~/.pgpass</codeph> file to avoid regularly having
          to type in passwords. This file should reside in your home directory and contain lines of
          the following format:</p>
        <codeblock><varname>hostname</varname>:<varname>port</varname>:<varname>database</varname>:<varname>username</varname>:<varname>password</varname></codeblock>
        <p>The permissions on <codeph>.pgpass</codeph> must disallow any access to world or group
          (for example: <codeph>chmod 0600 ~/.pgpass</codeph>). If the permissions are less strict
          than this, the file will be ignored. (The file permissions are not currently checked on
          Microsoft Windows clients, however.)</p>
        <p>If the connection could not be made for any reason (insufficient privileges, server is
          not running, etc.), <codeph>psql</codeph> will return an error and terminate.</p>
      </sectiondiv>
      <sectiondiv id="section9">
        <b>Entering SQL Commands</b>
        <p>In normal operation, <codeph>psql</codeph> provides a prompt with the name of the
          database to which <codeph>psql</codeph> is currently connected, followed by the string
            <b>=&gt;</b> for a regular user or <b>=#</b> for a superuser. For example:</p>
        <codeblock>testdb=&gt;
testdb=#</codeblock>
        <p>At the prompt, the user may type in SQL commands. Ordinarily, input lines are sent to the
          server when a command-terminating semicolon is reached. An end of line does not terminate
          a command. Thus commands can be spread over several lines for clarity. If the command was
          sent and executed without error, the results of the command are displayed on the
          screen.</p>
      </sectiondiv>
    </section>
    <section id="section10">
      <title>Meta-Commands</title>
      <p>Anything you enter in <codeph>psql</codeph> that begins with an unquoted backslash is a
          <codeph>psql</codeph> meta-command that is processed by <codeph>psql</codeph> itself.
        These commands help make <codeph>psql</codeph> more useful for administration or scripting.
        Meta-commands are more commonly called slash or backslash commands. </p>
      <p>The format of a <codeph>psql</codeph> command is the backslash, followed immediately by a
        command verb, then any arguments. The arguments are separated from the command verb and each
        other by any number of whitespace characters.</p>
      <p>To include whitespace into an argument you may quote it with a single quote. To include a
        single quote into such an argument, use two single quotes. Anything contained in single
        quotes is furthermore subject to C-like substitutions for <codeph>\n</codeph> (new line),
          <codeph>\t</codeph> (tab), <codeph>\digits</codeph> (octal), and <codeph>\xdigits</codeph>
        (hexadecimal). </p>
      <p>If an unquoted argument begins with a colon (<codeph>:</codeph>), it is taken as a
          <codeph>psql</codeph> variable and the value of the variable is used as the argument
        instead.</p>
      <p>Arguments that are enclosed in backquotes (<codeph>`</codeph>) are taken as a command line
        that is passed to the shell. The output of the command (with any trailing newline removed)
        is taken as the argument value. The above escape sequences also apply in backquotes. </p>
      <p>Some commands take an SQL identifier (such as a table name) as argument. These arguments
        follow the syntax rules of SQL: Unquoted letters are forced to lowercase, while double
        quotes (<codeph>"</codeph>) protect letters from case conversion and allow incorporation of
        whitespace into the identifier. Within double quotes, paired double quotes reduce to a
        single double quote in the resulting name. For example, <codeph>FOO"BAR"BAZ</codeph> is
        interpreted as <codeph>fooBARbaz</codeph>, and <codeph>"A weird"" name"</codeph> becomes
          <codeph>A weird" name</codeph>. </p>
      <p>Parsing for arguments stops when another unquoted backslash occurs. This is taken as the
        beginning of a new meta-command. The special sequence <codeph>\\</codeph> (two backslashes)
        marks the end of arguments and continues parsing SQL commands, if any. That way SQL and
          <codeph>psql</codeph> commands can be freely mixed on a line. But in any case, the
        arguments of a meta-command cannot continue beyond the end of the line.</p>
      <p>The following meta-commands are defined:</p>
      <parml>
        <plentry>
          <pt>\a</pt>
          <pd>If the current table output format is unaligned, it is switched to aligned. If it is
            not unaligned, it is set to unaligned. This command is kept for backwards compatibility.
            See <codeph>\pset</codeph> for a more general solution. </pd>
        </plentry>
        <plentry>
          <pt>\cd [<varname>directory</varname>]</pt>
          <pd>Changes the current working directory. Without argument, changes to the current user's
            home directory. To print your current working directory, use <codeph>\!pwd</codeph>.
          </pd>
        </plentry>
        <plentry>
          <pt>\C [<varname>title</varname>]</pt>
          <pd>Sets the title of any tables being printed as the result of a query or unset any such
            title. This command is equivalent to <codeph>\pset title</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\c | \connect [<varname>dbname</varname> [<varname>username</varname>]
              [<varname>host</varname>] [<varname>port</varname>]]</pt>
          <pd>Establishes a new connection. If the new connection is successfully made, the previous
            connection is closed. If any of dbname, username, host or port are omitted, the value of
            that parameter from the previous connection is used. If the connection attempt failed,
            the previous connection will only be kept if <codeph>psql</codeph> is in interactive
            mode. When executing a non-interactive script, processing will immediately stop with an
            error. This distinction was chosen as a user convenience against typos, and a safety
            mechanism that scripts are not accidentally acting on the wrong database.</pd>
        </plentry>
        <plentry>
          <pt>\conninfo</pt>
          <pd>Displays information about the current connection including the database name, the
            user name, the type of connection (UNIX domain socket, <codeph>TCP/IP</codeph>, etc.),
            the host, and the port.</pd>
        </plentry>
        <plentry>
          <pt>\copy {<varname>table</varname> [(<varname>column_list</varname>)] |
              (<varname>query</varname>)} {from | to} {<varname>filename</varname> | stdin | stdout
            | pstdin | pstdout} [with] [binary] [oids] [delimiter [as]
            '<varname>character</varname>'] [null [as] '<varname>string</varname>'] [csv [header]
            [quote [as] 'character'] [escape [as] '<varname>character</varname>'] [force quote
            column_list] [force not null column_list]]</pt>
          <pd>Performs a frontend (client) copy. This is an operation that runs an SQL
              <codeph>COPY</codeph> command, but instead of the server reading or writing the
            specified file, <codeph>psql</codeph> reads or writes the file and routes the data
            between the server and the local file system. This means that file accessibility and
            privileges are those of the local user, not the server, and no SQL superuser privileges
            are required.</pd>
          <pd>The syntax of the command is similar to that of the SQL <codeph>COPY</codeph> command.
            Note that, because of this, special parsing rules apply to the <codeph>\copy</codeph>
            command. In particular, the variable substitution rules and backslash escapes do not
            apply. </pd>
          <pd><codeph>\copy ... from stdin | to stdout</codeph> reads/writes based on the command
            input and output respectively. All rows are read from the same source that issued the
            command, continuing until <codeph>\.</codeph> is read or the stream reaches
              <codeph>EOF</codeph>. Output is sent to the same place as command output. To
            read/write from <codeph>psql</codeph>'s standard input or output, use
              <codeph>pstdin</codeph> or <codeph>pstdout</codeph>. This option is useful for
            populating tables in-line within a SQL script file.</pd>
          <pd>This operation is not as efficient as the SQL <codeph>COPY</codeph> command because
            all data must pass through the client/server connection.</pd>
        </plentry>
        <plentry>
          <pt>\copyright</pt>
          <pd>Shows the copyright and distribution terms of PostgreSQL on which Greenplum Database is based. </pd>
        </plentry>
        <plentry>
          <pt>\d [<varname>relation_pattern</varname>]  | \d+ [<varname>relation_pattern</varname>]
            | \dS [<varname>relation_pattern</varname>]</pt>
          <pd>For each relation (table, external table, view, index, or sequence) matching the
            relation pattern, show all columns, their types, the tablespace (if not the default) and
            any special attributes such as <codeph>NOT NULL</codeph> or defaults, if any. Associated
            indexes, constraints, rules, and triggers are also shown, as is the view definition if
            the relation is a view.<ul id="ul_qda_zxh_no"><li id="kb143931">The command form
                  <codeph>\d+</codeph> is identical, except that more information is displayed: any
                comments associated with the columns of the table are shown, as is the presence of
                OIDs in the table.<p>For partitioned tables, the command <codeph>\d</codeph> or
                    <codeph>\d+</codeph> specified with the root partition table or child partition
                  table displays information about the table including partition keys on the current
                  level of the partition table. The command <codeph>\d+</codeph> also displays the
                  immediate child partitions of the table and whether the child partition is an
                  external table or regular table. </p><p>For append-optimized tables and
                  column-oriented tables, <codeph>\d+</codeph> displays the storage options for a
                  table. For append-optimized tables, the options are displayed for the table. For
                  column-oriented tables, storage options are displayed for each column.
                </p></li><li id="kb151095">The command form <codeph>\dS</codeph> is identical,
                except that system information is displayed as well as user information.For example,
                  <codeph>\dt</codeph> displays user tables, but not system tables;
                  <codeph>\dtS</codeph> displays both user and system tables.Both these commands can
                take the <codeph>+</codeph> parameter to display additional information, as in
                  <codeph>\dt+</codeph> and <codeph>\dtS+</codeph>.<p>If <codeph>\d</codeph> is used
                  without a pattern argument, it is equivalent to <codeph>\dtvs</codeph> which will
                  show a list of all tables, views, and sequences.</p></li></ul></pd>
        </plentry>
        <plentry>
          <pt>\da [<varname>aggregate_pattern</varname>]</pt>
          <pd>Lists all available aggregate functions, together with the data types they operate on.
            If a pattern is specified, only aggregates whose names match the pattern are shown.
          </pd>
        </plentry>
        <plentry>
          <pt>\db [<varname>tablespace_pattern</varname>] | \db+
              [<varname>tablespace_pattern</varname>]</pt>
          <pd>Lists all available tablespaces and their corresponding filespace locations. If
            pattern is specified, only tablespaces whose names match the pattern are shown. If + is
            appended to the command name, each object is listed with its associated permissions.
          </pd>
        </plentry>
        <plentry>
          <pt>\dc [<varname>conversion_pattern</varname>]</pt>
          <pd>Lists all available conversions between character-set encodings. If pattern is
            specified, only conversions whose names match the pattern are listed. </pd>
        </plentry>
        <plentry>
          <pt>\dC</pt>
          <pd>Lists all available type casts. </pd>
        </plentry>
        <plentry>
          <pt>\dd [<varname>object_pattern</varname>]</pt>
          <pd>Lists all available objects. If pattern is specified, only matching objects are
            shown.</pd>
        </plentry>
        <plentry>
          <pt>\dD [<varname>domain_pattern</varname>]</pt>
          <pd>Lists all available domains. If pattern is specified, only matching domains are
            shown.</pd>
        </plentry>
        <plentry>
          <pt>\df [<varname>function_pattern</varname>] | \df+ [<varname>function_pattern
            </varname>]</pt>
          <pd>Lists available functions, together with their argument and return types. If pattern
            is specified, only functions whose names match the pattern are shown. If the form
              <codeph>\df+</codeph> is used, additional information about each function, including
            language and description, is shown. To reduce clutter, <codeph>\df </codeph>does not
            show data type I/O functions. This is implemented by ignoring functions that accept or
            return type <codeph>cstring</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\dg [<varname>role_pattern</varname>]</pt>
          <pd>Lists all database roles. If pattern is specified, only those roles whose names match
            the pattern are listed.</pd>
        </plentry>
        <plentry>
          <pt>\distPvxS [<varname>index | sequence | table | parent table | view | external_table |
              system_object</varname>] </pt>
          <pd>This is not the actual command name: the letters <codeph>i</codeph>,
              <codeph>s</codeph>, <codeph>t</codeph>, <codeph>P</codeph>, <codeph>v</codeph>,
              <codeph>x</codeph>, <codeph>S</codeph> stand for index, sequence, table, parent table,
            view, external table, and system table, respectively. You can specify any or all of
            these letters, in any order, to obtain a listing of all the matching objects. The letter
              <codeph>S</codeph> restricts the listing to system objects; without
            <codeph>S</codeph>, only non-system objects are shown. If + is appended to the command
            name, each object is listed with its associated description, if any. If a pattern is
            specified, only objects whose names match the pattern are listed.</pd>
        </plentry>
        <plentry>
          <pt>\dl</pt>
          <pd>This is an alias for <codeph>\lo_list</codeph>, which shows a list of large
            objects.</pd>
        </plentry>
        <plentry>
          <pt>\dn [<varname>schema_pattern</varname>] | \dn+
            [<varname>schema_pattern</varname>]</pt>
          <pd>Lists all available schemas (namespaces). If pattern is specified, only schemas whose
            names match the pattern are listed. Non-local temporary schemas are suppressed. If
              <codeph>+</codeph> is appended to the command name, each object is listed with its
            associated permissions and description, if any.</pd>
        </plentry>
        <plentry>
          <pt>\do [<varname>operator_pattern</varname>]</pt>
          <pd>Lists available operators with their operand and return types. If pattern is
            specified, only operators whose names match the pattern are listed.</pd>
        </plentry>
        <plentry>
          <pt>\dp [<varname>relation_pattern_to_show_privileges</varname>]</pt>
          <pd>Produces a list of all available tables, views and sequences with their associated
            access privileges. If pattern is specified, only tables, views and sequences whose names
            match the pattern are listed. The <codeph>GRANT</codeph> and <codeph>REVOKE</codeph>
            commands are used to set access privileges. </pd>
        </plentry>
        <plentry>
          <pt>\dT [<varname>datatype_pattern</varname>] | \dT+
            [<varname>datatype_pattern</varname>]</pt>
          <pd>Lists all data types or only those that match pattern. The command form
              <codeph>\dT+</codeph> shows extra information.</pd>
        </plentry>
        <plentry>
          <pt>\du [<varname>role_pattern</varname>]</pt>
          <pd>Lists all database roles, or only those that match pattern.</pd>
        </plentry>
        <plentry>
          <pt>\e | \edit [<varname>filename</varname>]</pt>
          <pd>If a file name is specified, the file is edited; after the editor exits, its content
            is copied back to the query buffer. If no argument is given, the current query buffer is
            copied to a temporary file which is then edited in the same fashion. The new query
            buffer is then re-parsed according to the normal rules of <codeph>psql</codeph>, where
            the whole buffer is treated as a single line. (Thus you cannot make scripts this way.
            Use <codeph>\i</codeph> for that.) This means also that if the query ends with (or
            rather contains) a semicolon, it is immediately executed. In other cases it will merely
            wait in the query buffer. </pd>
          <pd><codeph>psql</codeph> searches the environment variables <codeph>PSQL_EDITOR</codeph>,
              <codeph>EDITOR</codeph>, and <codeph>VISUAL</codeph> (in that order) for an editor to
            use. If all of them are unset, <codeph>vi</codeph> is used on UNIX systems,
              <codeph>notepad.exe</codeph> on Windows systems.</pd>
        </plentry>
        <plentry>
          <pt>\echotext [ ... ]</pt>
          <pd>Prints the arguments to the standard output, separated by one space and followed by a
            newline. This can be useful to intersperse information in the output of scripts.</pd>
          <pd>If you use the <codeph>\o</codeph> command to redirect your query output you may wish
            to use<codeph> 'echo</codeph> instead of this command.</pd>
        </plentry>
        <plentry>
          <pt>\encoding [<varname>encoding</varname>]</pt>
          <pd>Sets the client character set encoding. Without an argument, this command shows the
            current encoding. </pd>
        </plentry>
        <plentry>
          <pt>\f [<varname>field_separator_string</varname>]</pt>
          <pd>Sets the field separator for unaligned query output. The default is the vertical bar
              (<codeph>|</codeph>). See also <codeph>\pset</codeph> for a generic way of setting
            output options. </pd>
        </plentry>
        <plentry>
          <pt>\g [{<varname>filename</varname> | |<varname>command</varname> }]</pt>
          <pd>Sends the current query input buffer to the server and optionally stores the query's
            output in a file or pipes the output into a separate UNIX shell executing command. A
            bare <codeph>\g</codeph> is virtually equivalent to a semicolon. A <codeph>\g</codeph>
            with argument is a one-shot alternative to the <codeph>\o</codeph> command.</pd>
        </plentry>
        <plentry>
          <pt>\h | \help [<varname>sql_command</varname>]</pt>
          <pd>Gives syntax help on the specified SQL command. If a command is not specified, then
              <codeph>psql</codeph> will list all the commands for which syntax help is available.
            Use an asterisk (*) to show syntax help on all SQL commands. To simplify typing,
            commands that consists of several words do not have to be quoted.</pd>
        </plentry>
        <plentry>
          <pt>\H</pt>
          <pd>Turns on HTML query output format. If the HTML format is already on, it is switched
            back to the default aligned text format. This command is for compatibility and
            convenience, but see <codeph>\pset</codeph> about setting other output options.</pd>
        </plentry>
        <plentry>
          <pt>\i <varname>input_filename</varname></pt>
          <pd>Reads input from a file and executes it as though it had been typed on the keyboard.
            If you want to see the lines on the screen as they are read you must set the variable
              <codeph>ECHO</codeph> to all. </pd>
        </plentry>
        <plentry>
          <pt>\l | \list | \l+ | \list+</pt>
          <pd>List the names, owners, and character set encodings of all the databases in the
            server. If <codeph>+</codeph> is appended to the command name, database descriptions are
            also displayed. </pd>
        </plentry>
        <plentry>
          <pt>\lo_export <varname>loid</varname>
            <varname>filename</varname></pt>
          <pd>Reads the large object with OID <varname>loid</varname> from the database and writes
            it to <varname>filename</varname>. Note that this is subtly different from the server
            function <codeph>lo_export</codeph>, which acts with the permissions of the user that
            the database server runs as and on the server's file system. Use
              <codeph>\lo_list</codeph> to find out the large object's OID.</pd>
        </plentry>
        <plentry>
          <pt>\lo_import <varname>large_object_filename</varname> [<varname>comment</varname>]</pt>
          <pd>Stores the file into a large object. Optionally, it associates the given comment with
            the object. Example:</pd>
          <pd>
            <codeblock>mydb=&gt; \lo_import '/home/gpadmin/pictures/photo.xcf' 'a 
picture of me'
lo_import 152801</codeblock>
          </pd>
          <pd>The response indicates that the large object received object ID 152801 which one ought
            to remember if one wants to access the object ever again. For that reason it is
            recommended to always associate a human-readable comment with every object. Those can
            then be seen with the <codeph>\lo_list</codeph> command. Note that this command is
            subtly different from the server-side <codeph>lo_import</codeph> because it acts as the
            local user on the local file system, rather than the server's user and file system.</pd>
        </plentry>
        <plentry>
          <pt>\lo_list</pt>
          <pd>Shows a list of all large objects currently stored in the database, along with any
            comments provided for them.</pd>
        </plentry>
        <plentry>
          <pt>\lo_unlink <varname>largeobject_oid</varname></pt>
          <pd>Deletes the large object of the specified OID from the database. Use
              <codeph>\lo_list</codeph> to find out the large object's OID.</pd>
        </plentry>
        <plentry>
          <pt>\o [ {<varname>query_result_filename</varname> | |<varname>command</varname>} ]</pt>
          <pd>Saves future query results to a file or pipes them into a UNIX shell command. If no
            arguments are specified, the query output will be reset to the standard output. Query
            results include all tables, command responses, and notices obtained from the database
            server, as well as output of various backslash commands that query the database (such as
              <codeph>\d</codeph>), but not error messages. To intersperse text output in between
            query results, use <codeph>'echo</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\p</pt>
          <pd>Print the current query buffer to the standard output.</pd>
        </plentry>
        <plentry>
          <pt>\password [<varname>username</varname>]</pt>
          <pd>Changes the password of the specified user (by default, the current user). This
            command prompts for the new password, encrypts it, and sends it to the server as an
              <codeph>ALTER ROLE</codeph> command. This makes sure that the new password does not
            appear in cleartext in the command history, the server log, or elsewhere.</pd>
        </plentry>
        <plentry>
          <pt>\prompt [ <varname>text</varname> ] <varname>name</varname></pt>
          <pd>Prompts the user to set a variable <varname>name</varname>. Optionally, you can
            specify a prompt. Enclose prompts longer than one word in single quotes. </pd>
          <pd>By default, \prompt uses the terminal for input and output. However, use the -f
            command line switch to specify standard input and standard output. </pd>
        </plentry>
        <plentry>
          <pt>\pset <varname>print_option</varname> [<varname>value</varname>]</pt>
          <pd>This command sets options affecting the output of query result tables.
              <varname>print_option</varname> describes which option is to be set. Adjustable
            printing options are: <ul id="ul_f3k_1vl_44"><li id="kb144082"
                    ><b><codeph>format</codeph></b> – Sets the output format to one of
                  <b>u</b><codeph>naligned</codeph>, <b>a</b><codeph>ligned</codeph>,
                  <b>h</b><codeph>tml</codeph>, <b>l</b><codeph>atex</codeph>,
                  <b>t</b><codeph>roff-ms</codeph>, or <b>w</b><codeph>rapped</codeph>. First letter
                abbreviations are allowed. Unaligned writes all columns of a row on a line,
                separated by the currently active field separator. This is intended to create output
                that might be intended to be read in by other programs. Aligned mode is the
                standard, human-readable, nicely formatted text output that is default. The HTML and
                LaTeX modes put out tables that are intended to be included in documents using the
                respective mark-up language. They are not complete documents! (This might not be so
                dramatic in HTML, but in LaTeX you must have a complete document wrapper.) <p>The
                  wrapped option sets the output format like the <codeph>aligned</codeph> parameter
                  , but wraps wide data values across lines to make the output fit in the target
                  column width. The target width is set with the <codeph>columns</codeph> option. To
                  specify the column width and select the wrapped format, use two \pset commands;
                  for example, to set the with to 72 columns and specify wrapped format, use the
                  commands <codeph>\pset columns 72</codeph> and then <codeph>\pset format
                    wrapped</codeph>.</p><note>Since <codeph>psql</codeph> does not attempt to wrap
                  column header titles, the wrapped format behaves the same as aligned if the total
                  width needed for column headers exceeds the target. </note></li><li id="kb144087"
                    ><b><codeph>border</codeph></b> – The second argument must be a number. In
                general, the higher the number the more borders and lines the tables will have, but
                this depends on the particular format. In HTML mode, this will translate directly
                into the <codeph>border=...</codeph> attribute, in the others only values
                  <codeph>0</codeph> (no border), <codeph>1</codeph> (internal dividing lines), and
                  <codeph>2</codeph> (table frame) make sense.</li><li id="kb151382"
                    ><b><codeph>columns</codeph></b> – Sets the target width for the
                  <codeph>wrapped</codeph> format, and also the width limit for determining whether
                output is wide enough to require the pager. The default is <varname>zero</varname>.
                Zero causes the target width to be controlled by the environment variable
                  <codeph>COLUMNS</codeph>, or the detected screen width if <codeph>COLUMNS</codeph>
                is not set. In addition, if <codeph>columns</codeph> is zero then the wrapped format
                affects screen output only. If columns is nonzero then file and pipe output is
                wrapped to that width as well. <p>After setting the target width, use the command
                    <codeph>\pset format wrapped</codeph> to enable the wrapped format.</p></li><li
                id="kb144090"><b><codeph>expanded</codeph></b> | <b><codeph>x)</codeph></b> –
                Toggles between regular and expanded format. When expanded format is enabled, query
                results are displayed in two columns, with the column name on the left and the data
                on the right. This mode is useful if the data would not fit on the screen in the
                normal horizontal mode. Expanded mode is supported by all four output
                formats.</li><li id="kb151434"><b><codeph>linestyle</codeph></b>
                    [<b><codeph>unicode</codeph></b> | <b><codeph>ascii</codeph></b> |
                    <b><codeph>old-ascii</codeph></b>] – Sets the border line drawing style to one
                of unicode, ascii, or old-ascii. Unique abbreviations, including one letter, are
                allowed for the three styles. The default setting is <codeph>ascii</codeph>. This
                option only affects the <codeph>aligned</codeph> and <codeph>wrapped</codeph> output
                formats. <p><b><codeph>ascii</codeph></b> – uses plain ASCII characters. Newlines in
                  data are shown using a + symbol in the right-hand margin. When the wrapped format
                  wraps data from one line to the next without a newline character, a dot (.) is
                  shown in the right-hand margin of the first line, and again in the left-hand
                  margin of the following line. </p><p><b><codeph>old-ascii</codeph></b> – style
                  uses plain ASCII characters, using the formatting style used in PostgreSQL 8.4 and
                  earlier. Newlines in data are shown using a : symbol in place of the left-hand
                  column separator. When the data is wrapped from one line to the next without a
                  newline character, a ; symbol is used in place of the left-hand column separator.
                      </p><p><b><codeph>unicode</codeph></b> – style uses Unicode box-drawing
                  characters. Newlines in data are shown using a carriage return symbol in the
                  right-hand margin. When the data is wrapped from one line to the next without a
                  newline character, an ellipsis symbol is shown in the right-hand margin of the
                  first line, and again in the left-hand margin of the following line. </p><p>When
                  the <codeph>border</codeph> setting is greater than zero, this option also
                  determines the characters with which the border lines are drawn. Plain ASCII
                  characters work everywhere, but Unicode characters look nicer on displays that
                  recognize them. </p></li><li id="kb144095"><b><codeph>null 'string'</codeph></b> –
                The second argument is a string to print whenever a column is null. The default is
                not to print anything, which can easily be mistaken for an empty string. For
                example, the command <codeph>\pset</codeph><codeph>null '(empty)' </codeph>displays
                  <varname>(empty)</varname> in null columns.</li><li id="kb147007"
                    ><b><codeph>fieldsep</codeph></b> – Specifies the field separator to be used in
                unaligned output mode. That way one can create, for example, tab- or comma-separated
                output, which other programs might prefer. To set a tab as field separator, type
                  <codeph>\pset fieldsep '\t'</codeph>. The default field separator is
                  <codeph>'|'</codeph> (a vertical bar). </li><li id="kb147023"
                    ><b><codeph>footer</codeph></b> – Toggles the display of the default footer
                  (<varname>x</varname> rows). </li><li id="kb147036"
                    ><b><codeph>numericlocale</codeph></b> – Toggles the display of a locale-aware
                character to separate groups of digits to the left of the decimal marker. It also
                enables a locale-aware decimal marker. </li><li id="kb147046"
                    ><b><codeph>recordsep</codeph></b> – Specifies the record (line) separator to
                use in unaligned output mode. The default is a newline character. </li><li
                id="kb147069"><b><codeph>title</codeph></b> [<varname>text</varname>] – Sets the
                table title for any subsequently printed tables. This can be used to give your
                output descriptive tags. If no argument is given, the title is unset.</li><li
                id="kb147082"><b><codeph>tableattr</codeph></b> | <b><codeph>T</codeph></b>
                  [<varname>text</varname>] – Allows you to specify any attributes to be placed
                inside the HTML table tag. This could for example be <codeph>cellpadding</codeph> or
                  <codeph>bgcolor</codeph>. Note that you probably don't want to specify border
                here, as that is already taken care of by <codeph>\pset border</codeph>. </li><li
                id="kb151808"><b><codeph>tuples_only</codeph></b> | <b><codeph>t </codeph></b>
                  [<varname>novalue</varname> | <varname>on</varname> | <varname>off</varname>] –
                The <codeph>\pset tuples_only</codeph> command by itselt toggles between tuples only
                and full display. The values <varname>on</varname> and <varname>off</varname> set
                the tuples display, regardless of the current setting. Full display may show extra
                information such as column headers, titles, and various footers. In tuples only
                mode, only actual table data is shown The <codeph>\t</codeph> command is equivalent
                to <codeph>\pset</codeph><codeph>tuples_only</codeph> and is provided for
                convenience.</li><li id="kb147128"><b><codeph>pager</codeph></b> – Controls the use
                of a pager for query and <codeph>psql</codeph> help output. When
                <codeph>on</codeph>, if the environment variable <codeph>PAGER</codeph> is set, the
                output is piped to the specified program. Otherwise a platform-dependent default
                (such as <codeph>more</codeph>) is used. When <codeph>off</codeph>, the pager is not
                used. When <codeph>on</codeph>, the pager is used only when appropriate. Pager can
                also be set to <codeph>always</codeph>, which causes the pager to be always
                used.</li></ul></pd>
        </plentry>
        <plentry>
          <pt>\q</pt>
          <pd>Quits the <codeph>psql</codeph> program. </pd>
        </plentry>
        <plentry>
          <pt>\qechotext [ ... ] </pt>
          <pd>This command is identical to <codeph>\echo</codeph> except that the output will be
            written to the query output channel, as set by <codeph>\o</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\r</pt>
          <pd>Resets (clears) the query buffer.</pd>
        </plentry>
        <plentry>
          <pt>\s [<varname>history_filename</varname>]</pt>
          <pd>Print or save the command line history to <varname>filename</varname>. If
              <varname>filename</varname> is omitted, the history is written to the standard
            output.</pd>
        </plentry>
        <plentry>
          <pt>\set [<varname>name</varname> [<varname>value</varname> [ ... ]]]</pt>
          <pd>Sets the internal variable <varname>name</varname> to <varname>value</varname> or, if
            more than one value is given, to the concatenation of all of them. If no second argument
            is given, the variable is just set with no value. To unset a variable, use the
              <codeph>\unset</codeph> command. </pd>
          <pd>Valid variable names can contain characters, digits, and underscores. See "Variables"
            in <xref href="#topic1/section12" format="dita"/>. Variable names are case-sensitive. </pd>
          <pd>Although you are welcome to set any variable to anything you want,
              <codeph>psql</codeph> treats several variables as special. They are documented in the
            topic about variables.</pd>
          <pd>This command is totally separate from the SQL command <codeph>SET</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\t [novalue | on | off]</pt>
          <pd>The <codeph>\t</codeph> command by itself toggles a display of output column name
            headings and row count footer. The values <codeph>on</codeph> and <codeph>off</codeph>
            set the tuples display, regardless of the current setting.This command is equivalent to
              <codeph>\pset tuples_only</codeph> and is provided for convenience. </pd>
        </plentry>
        <plentry>
          <pt>\T <varname>table_options</varname></pt>
          <pd>Allows you to specify attributes to be placed within the table tag in HTML tabular
            output mode.</pd>
        </plentry>
        <plentry>
          <pt>\timing [novalue | on | off]</pt>
          <pd>The <codeph>\timing</codeph> command by itself toggles a display of how long each SQL
            statement takes, in milliseconds. The values <codeph>on</codeph> and
              <codeph>off</codeph> set the time display, regardless of the current setting. </pd>
        </plentry>
        <plentry>
          <pt>\w {<varname>filename</varname> | |<varname>command</varname>}</pt>
          <pd>Outputs the current query buffer to a file or pipes it to a UNIX command.</pd>
        </plentry>
        <plentry>
          <pt>\x</pt>
          <pd>Toggles expanded table formatting mode.</pd>
        </plentry>
        <plentry>
          <pt>\z [<varname>relation_to_show_privileges</varname>]</pt>
          <pd>Produces a list of all available tables, views and sequences with their associated
            access privileges. If a pattern is specified, only tables, views and sequences whose
            names match the pattern are listed. This is an alias for <codeph>\dp</codeph>.</pd>
        </plentry>
        <plentry>
          <pt>\! [<varname>command</varname>]</pt>
          <pd>Escapes to a separate UNIX shell or executes the UNIX command. The arguments are not
            further interpreted, the shell will see them as is.</pd>
        </plentry>
        <plentry>
          <pt>\?</pt>
          <pd>Shows help information about the <codeph>psql</codeph> backslash commands.</pd>
        </plentry>
      </parml>
    </section>
    <section id="section11">
      <title>Patterns</title>
      <p>The various <codeph>\d</codeph> commands accept a pattern parameter to specify the object
        name(s) to be displayed. In the simplest case, a pattern is just the exact name of the
        object. The characters within a pattern are normally folded to lower case, just as in SQL
        names; for example, <codeph>\dt FOO</codeph> will display the table named
          <codeph>foo</codeph>. As in SQL names, placing double quotes around a pattern stops
        folding to lower case. Should you need to include an actual double quote character in a
        pattern, write it as a pair of double quotes within a double-quote sequence; again this is
        in accord with the rules for SQL quoted identifiers. For example, <codeph>\dt
          "FOO""BAR"</codeph> will display the table named <codeph>FOO"BAR</codeph> (not
          <codeph>foo"bar</codeph>). Unlike the normal rules for SQL names, you can put double
        quotes around just part of a pattern, for instance <codeph>\dt FOO"FOO"BAR</codeph> will
        display the table named <codeph>fooFOObar</codeph>. </p>
      <p>Within a pattern, <codeph>*</codeph> matches any sequence of characters (including no
        characters) and <codeph>?</codeph> matches any single character. (This notation is
        comparable to UNIX shell file name patterns.) For example, <codeph>\dt int*</codeph>
        displays all tables whose names begin with <codeph>int</codeph>. But within double quotes,
          <codeph>*</codeph> and <codeph>?</codeph> lose these special meanings and are just matched
        literally.</p>
      <p>A pattern that contains a dot (<codeph>.</codeph>) is interpreted as a schema name pattern
        followed by an object name pattern. For example, <codeph>\dt foo*.bar*</codeph> displays all
        tables whose table name starts with <codeph>bar</codeph> that are in schemas whose schema
        name starts with <codeph>foo</codeph>. When no dot appears, then the pattern matches only
        objects that are visible in the current schema search path. Again, a dot within double
        quotes loses its special meaning and is matched literally.</p>
      <p>Advanced users can use regular-expression notations. All regular expression special
        characters work as specified in the <xref
          href="https://www.postgresql.org/docs/8.3/static/functions-matching.html#FUNCTIONS-POSIX-REGEXP"
          scope="external" format="html">PostgreSQL documentation on regular expressions</xref>,
        except for <codeph>.</codeph> which is taken as a separator as mentioned above,
          <codeph>*</codeph> which is translated to the regular-expression notation
          <codeph>.*</codeph>, and <codeph>?</codeph> which is translated to <codeph>..</codeph> You
        can emulate these pattern characters at need by writing <codeph>?</codeph> for
          <codeph>.,</codeph><codeph>(R+|)</codeph> for <codeph>R*</codeph>, or
          <codeph>(R|)</codeph> for <codeph>R?</codeph>. Remember that the pattern must match the
        whole name, unlike the usual interpretation of regular expressions; write <codeph>*</codeph>
        at the beginning and/or end if you don't wish the pattern to be anchored. Note that within
        double quotes, all regular expression special characters lose their special meanings and are
        matched literally. Also, the regular expression special characters are matched literally in
        operator name patterns (such as the argument of <codeph>\do</codeph>).</p>
      <p>Whenever the pattern parameter is omitted completely, the <codeph>\d</codeph> commands
        display all objects that are visible in the current schema search path – this is equivalent
        to using the pattern <codeph>*.</codeph> To see all objects in the database, use the pattern
          <codeph>*.*.</codeph></p>
    </section>
    <section id="section12">
      <title>Advanced Features</title>
      <sectiondiv id="section13">
        <b>Variables</b>
        <p><codeph>psql</codeph> provides variable substitution features similar to common UNIX
          command shells. Variables are simply name/value pairs, where the value can be any string
          of any length. To set variables, use the <codeph>psql</codeph> meta-command
            <codeph>\set</codeph>:</p>
        <codeblock>testdb=&gt; \set foo bar</codeblock>
        <p>sets the variable <codeph>foo</codeph> to the value <codeph>bar</codeph>. To retrieve the
          content of the variable, precede the name with a colon and use it as the argument of any
          slash command:</p>
        <codeblock>testdb=&gt; \echo :foo
bar</codeblock>
        <note>The arguments of <codeph>\set</codeph> are subject to the same substitution rules as
          with other commands. Thus you can construct interesting references such as <codeph>\set
            :foo 'something'</codeph> and get 'soft links' or 'variable variables' of Perl or PHP
          fame, respectively. Unfortunately, there is no way to do anything useful with these
          constructs. On the other hand, <codeph>\set bar :foo</codeph> is a perfectly valid way to
          copy a variable.</note>
        <p>If you call <codeph>\set</codeph> without a second argument, the variable is set, with an
          empty string as <varname>value</varname>. To unset (or delete) a variable, use the command
            <codeph>\unset</codeph>.</p>
        <p><codeph>psql</codeph>'s internal variable names can consist of letters, numbers, and
          underscores in any order and any number of them. A number of these variables are treated
          specially by <codeph>psql</codeph>. They indicate certain option settings that can be
          changed at run time by altering the value of the variable or represent some state of the
          application. Although you can use these variables for any other purpose, this is not
          recommended, as the program behavior might behave unexpectedly. By convention, all
          specially treated variables consist of all upper-case letters (and possibly numbers and
          underscores). To ensure maximum compatibility in the future, avoid using such variable
          names for your own purposes. A list of all specially treated variables are as follows:</p>
        <parml>
          <plentry>
            <pt>AUTOCOMMIT</pt>
            <pd>When on (the default), each SQL command is automatically committed upon successful
              completion. To postpone commit in this mode, you must enter a <codeph>BEGIN</codeph>
              or <codeph>START TRANSACTION</codeph> SQL command. When off or unset, SQL commands are
              not committed until you explicitly issue <codeph>COMMIT</codeph> or
                <codeph>END</codeph>. The autocommit-on mode works by issuing an implicit
                <codeph>BEGIN</codeph> for you, just before any command that is not already in a
              transaction block and is not itself a <codeph>BEGIN</codeph> or other
              transaction-control command, nor a command that cannot be executed inside a
              transaction block (such as <codeph>VACUUM</codeph>). </pd>
            <pd>In autocommit-off mode, you must explicitly abandon any failed transaction by
              entering <codeph>ABORT</codeph> or <codeph>ROLLBACK</codeph>. Also keep in mind that
              if you exit the session without committing, your work will be lost.</pd>
            <pd>The autocommit-on mode is PostgreSQL's traditional behavior, but autocommit-off is
              closer to the SQL spec. If you prefer autocommit-off, you may wish to set it in your
                <codeph>~/.psqlrc</codeph> file.</pd>
          </plentry>
          <plentry>
            <pt>DBNAME</pt>
            <pd>The name of the database you are currently connected to. This is set every time you
              connect to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>ECHO</pt>
            <pd>If set to all, all lines entered from the keyboard or from a script are written to
              the standard output before they are parsed or executed. To select this behavior on
              program start-up, use the switch <codeph>-a</codeph>. If set to queries,
                <codeph>psql</codeph> merely prints all queries as they are sent to the server. The
              switch for this is <codeph>-e</codeph>. </pd>
          </plentry>
          <plentry>
            <pt>ECHO_HIDDEN</pt>
            <pd>When this variable is set and a backslash command queries the database, the query is
              first shown. This way you can study the Greenplum Database internals and
              provide similar functionality in your own programs. (To select this behavior on
              program start-up, use the switch <codeph>-E</codeph>.) If you set the variable to the
              value <codeph>noexec</codeph>, the queries are just shown but are not actually sent to
              the server and executed.</pd>
          </plentry>
          <plentry>
            <pt>ENCODING</pt>
            <pd>The current client character set encoding.</pd>
          </plentry>
          <plentry>
            <pt>FETCH_COUNT</pt>
            <pd>If this variable is set to an integer value &gt; 0, the results of
                <codeph>SELECT</codeph> queries are fetched and displayed in groups of that many
              rows, rather than the default behavior of collecting the entire result set before
              display. Therefore only a limited amount of memory is used, regardless of the size of
              the result set. Settings of 100 to 1000 are commonly used when enabling this feature.
              Keep in mind that when using this feature, a query may fail after having already
              displayed some rows.</pd>
            <pd>Although you can use any output format with this feature, the default aligned format
              tends to look bad because each group of <codeph>FETCH_COUNT</codeph> rows will be
              formatted separately, leading to varying column widths across the row groups. The
              other output formats work better.</pd>
          </plentry>
          <plentry>
            <pt>HISTCONTROL</pt>
            <pd>If this variable is set to <codeph>ignorespace</codeph>, lines which begin with a
              space are not entered into the history list. If set to a value of
                <codeph>ignoredups</codeph>, lines matching the previous history line are not
              entered. A value of <codeph>ignoreboth</codeph> combines the two options. If unset, or
              if set to any other value than those above, all lines read in interactive mode are
              saved on the history list. </pd>
          </plentry>
          <plentry>
            <pt>HISTFILE</pt>
            <pd>The file name that will be used to store the history list. The default value is
                <codeph>~/.psql_history</codeph>. For example,
              putting<codeblock>\set HISTFILE ~/.psql_history- :DBNAME</codeblock></pd>
            <pd>in <codeph>~/.psqlrc</codeph> will cause <codeph>psql</codeph> to maintain a
              separate history for each database.</pd>
          </plentry>
          <plentry>
            <pt>HISTSIZE</pt>
            <pd>The number of commands to store in the command history. The default value is 500.
            </pd>
          </plentry>
          <plentry>
            <pt>HOST</pt>
            <pd>The database server host you are currently connected to. This is set every time you
              connect to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>IGNOREEOF</pt>
            <pd>If unset, sending an <codeph>EOF</codeph> character (usually
              <codeph>CTRL+D</codeph>) to an interactive session of <codeph>psql</codeph> will
              terminate the application. If set to a numeric value, that many <codeph>EOF</codeph>
              characters are ignored before the application terminates. If the variable is set but
              has no numeric value, the default is <codeph>10</codeph>. </pd>
          </plentry>
          <plentry>
            <pt>LASTOID</pt>
            <pd>The value of the last affected OID, as returned from an <codeph>INSERT</codeph> or
                <codeph>lo_insert</codeph> command. This variable is only guaranteed to be valid
              until after the result of the next SQL command has been displayed. </pd>
          </plentry>
          <plentry>
            <pt>ON_ERROR_ROLLBACK</pt>
            <pd>When on, if a statement in a transaction block generates an error, the error is
              ignored and the transaction continues. When interactive, such errors are only ignored
              in interactive sessions, and not when reading script files. When off (the default), a
              statement in a transaction block that generates an error aborts the entire
              transaction. The on_error_rollback-on mode works by issuing an implicit
                <codeph>SAVEPOINT</codeph> for you, just before each command that is in a
              transaction block, and rolls back to the savepoint on error.</pd>
          </plentry>
          <plentry>
            <pt>ON_ERROR_STOP</pt>
            <pd>By default, if non-interactive scripts encounter an error, such as a malformed SQL
              command or internal meta-command, processing continues. This has been the traditional
              behavior of <codeph>psql</codeph> but it is sometimes not desirable. If this variable
              is set, script processing will immediately terminate. If the script was called from
              another script it will terminate in the same fashion. If the outermost script was not
              called from an interactive <codeph>psql</codeph> session but rather using the
                <codeph>-f</codeph> option, <codeph>psql</codeph> will return error code 3, to
              distinguish this case from fatal error conditions (error code 1).</pd>
          </plentry>
          <plentry>
            <pt>PORT</pt>
            <pd>The database server port to which you are currently connected. This is set every
              time you connect to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>PROMPT1</pt>
            <pt>PROMPT2</pt>
            <pt>PROMPT3</pt>
            <pd>These specify what the prompts <codeph>psql</codeph> issues should look like. See
              "Prompting".</pd>
          </plentry>
          <plentry>
            <pt>QUIET</pt>
            <pd>This variable is equivalent to the command line option <codeph>-q</codeph>. It is
              not very useful in interactive mode.</pd>
          </plentry>
          <plentry>
            <pt>SINGLELINE</pt>
            <pd>This variable is equivalent to the command line option <codeph>-S</codeph>.</pd>
          </plentry>
          <plentry>
            <pt>SINGLESTEP</pt>
            <pd>This variable is equivalent to the command line option <codeph>-s</codeph>.</pd>
          </plentry>
          <plentry>
            <pt>USER</pt>
            <pd>The database user you are currently connected as. This is set every time you connect
              to a database (including program start-up), but can be unset.</pd>
          </plentry>
          <plentry>
            <pt>VERBOSITY</pt>
            <pd>This variable can be set to the values <codeph>default</codeph>,
                <codeph>verbose</codeph>, or <codeph>terse</codeph> to control the verbosity of
              error reports.</pd>
          </plentry>
        </parml>
      </sectiondiv>
      <sectiondiv id="section14">
        <b>SQL Interpolation</b>
        <p>An additional useful feature of <codeph>psql</codeph> variables is that you can
          substitute (interpolate) them into regular SQL statements. The syntax for this is again to
          prepend the variable name with a colon (<codeph>:</codeph>).</p>
        <codeblock>testdb=&gt; \set foo 'my_table'
testdb=&gt; SELECT * FROM :foo;</codeblock>
        <p>would then query the table <codeph>my_table</codeph>. The value of the variable is copied
          literally, so it can even contain unbalanced quotes or backslash commands. You must make
          sure that it makes sense where you put it. Variable interpolation will not be performed
          into quoted SQL entities.</p>
        <p>A popular application of this facility is to refer to the last inserted OID in subsequent
          statements to build a foreign key scenario. Another possible use of this mechanism is to
          copy the contents of a file into a table column. First load the file into a variable and
          then proceed as above.</p>
        <codeblock>testdb=&gt; \set content '''' `cat my_file.txt` ''''
testdb=&gt; INSERT INTO my_table VALUES (:content);</codeblock>
        <p>One problem with this approach is that <codeph>my_file.txt</codeph> might contain single
          quotes. These need to be escaped so that they don't cause a syntax error when the second
          line is processed. This could be done with the program <codeph>sed</codeph>:</p>
        <codeblock>testdb=&gt; \set content '''' `sed -e "s/'/''/g" &lt; my_file.txt` 
''''</codeblock>
        <p>If you are using non-standard-conforming strings then you'll also need to double
          backslashes. This is a bit tricky:</p>
        <codeblock>testdb=&gt; \set content '''' `sed -e "s/'/''/g" -e 
's/\\/\\\\/g' &lt; my_file.txt` ''''</codeblock>
        <p>Note the use of different shell quoting conventions so that neither the single quote
          marks nor the backslashes are special to the shell. Backslashes are still special to
            <codeph>sed</codeph>, however, so we need to double them.</p>
        <p>Since colons may legally appear in SQL commands, the following rule applies: the
          character sequence <codeph>":name"</codeph> is not changed unless <codeph>"name"</codeph>
          is the name of a variable that is currently set. In any case you can escape a colon with a
          backslash to protect it from substitution. (The colon syntax for variables is standard SQL
          for embedded query languages, such as ECPG. The colon syntax for array slices and type
          casts are Greenplum Database extensions, hence the conflict.)</p>
      </sectiondiv>
      <sectiondiv id="section15">
        <b>Prompting</b>
        <p>The prompts <codeph>psql</codeph> issues can be customized to your preference. The three
          variables <codeph>PROMPT1</codeph>, <codeph>PROMPT2</codeph>, and <codeph>PROMPT3</codeph>
          contain strings and special escape sequences that describe the appearance of the prompt.
          Prompt 1 is the normal prompt that is issued when <codeph>psql</codeph> requests a new
          command. Prompt 2 is issued when more input is expected during command input because the
          command was not terminated with a semicolon or a quote was not closed. Prompt 3 is issued
          when you run an SQL <codeph>COPY</codeph> command and you are expected to type in the row
          values on the terminal.</p>
        <p>The value of the selected prompt variable is printed literally, except where a percent
          sign (<codeph>%</codeph>) is encountered. Depending on the next character, certain other
          text is substituted instead. Defined substitutions are:</p>
        <parml>
          <plentry>
            <pt>%M</pt>
            <pd>The full host name (with domain name) of the database server, or
                <codeph>[local]</codeph> if the connection is over a UNIX domain socket, or
                <codeph>[local:/dir/name]</codeph>, if the UNIX domain socket is not at the compiled
              in default location.</pd>
          </plentry>
          <plentry>
            <pt>%m</pt>
            <pd>The host name of the database server, truncated at the first dot, or
                <codeph>[local]</codeph> if the connection is over a UNIX domain socket. </pd>
          </plentry>
          <plentry>
            <pt>%&gt;</pt>
            <pd>The port number at which the database server is listening.</pd>
          </plentry>
          <plentry>
            <pt>%n</pt>
            <pd>The database session user name. (The expansion of this value might change during a
              database session as the result of the command <codeph>SET SESSION
                AUTHORIZATION</codeph>.) </pd>
          </plentry>
          <plentry>
            <pt>%/</pt>
            <pd>The name of the current database.</pd>
          </plentry>
          <plentry>
            <pt>%~</pt>
            <pd>Like <codeph>%/</codeph>, but the output is <codeph>~</codeph> (tilde) if the
              database is your default database.</pd>
          </plentry>
          <plentry>
            <pt>%#</pt>
            <pd>If the session user is a database superuser, then a <b>#</b>, otherwise a
                <b>&gt;</b>. (The expansion of this value might change during a database session as
              the result of the command <codeph>SET SESSION AUTHORIZATION</codeph>.)</pd>
          </plentry>
          <plentry>
            <pt>%R</pt>
            <pd>In prompt 1 normally <b>=</b>, but <b>^</b> if in single-line mode, and <b>!</b> if
              the session is disconnected from the database (which can happen if
                <codeph>\connect</codeph> fails). In prompt 2 the sequence is replaced by <b>-</b>,
                <b>*</b>, a single quote, a double quote, or a dollar sign, depending on whether
                <codeph>psql</codeph> expects more input because the command wasn't terminated yet,
              because you are inside a <codeph>/* ... */</codeph> comment, or because you are inside
              a quoted or dollar-escaped string. In prompt 3 the sequence doesn't produce
              anything.</pd>
          </plentry>
          <plentry>
            <pt>%x</pt>
            <pd>Transaction status: an empty string when not in a transaction block, or <b>*</b>
              when in a transaction block, or <b>!</b> when in a failed transaction block, or
                <b>?</b> when the transaction state is indeterminate (for example, because there is
              no connection).</pd>
          </plentry>
          <plentry>
            <pt>%digits</pt>
            <pd>The character with the indicated octal code is substituted.</pd>
          </plentry>
          <plentry>
            <pt>%:name:</pt>
            <pd>The value of the <codeph>psql</codeph> variable name. See "Variables" in <xref
                href="#topic1/section12" format="dita"/> for details.</pd>
          </plentry>
          <plentry>
            <pt>%`command`</pt>
            <pd>The output of command, similar to ordinary back-tick substitution.</pd>
          </plentry>
          <plentry>
            <pt>%[ ... %]</pt>
            <pd>Prompts may contain terminal control characters which, for example, change the
              color, background, or style of the prompt text, or change the title of the terminal
              window. In order for line editing to work properly, these non-printing control
              characters must be designated as invisible by surrounding them with
                <codeph>%[</codeph> and <codeph>%]</codeph>. Multiple pairs of these may occur
              within the prompt. For
              example,<codeblock>testdb=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%#'</codeblock></pd>
            <pd>results in a boldfaced (<codeph>1;</codeph>) yellow-on-black
              (<codeph>33;40</codeph>) prompt on VT100-compatible, color-capable terminals. To
              insert a percent sign into your prompt, write <codeph>%%</codeph>. The default prompts
              are <codeph>'%/%R%# '</codeph> for prompts 1 and 2, and <codeph>'&gt;&gt; '</codeph>
              for prompt 3.</pd>
          </plentry>
        </parml>
      </sectiondiv>
      <sectiondiv id="section16">
        <b>Command-Line Editing</b>
        <p><codeph>psql</codeph> supports the NetBSD libedit library for convenient line editing and
          retrieval. The command history is automatically saved when <codeph>psql</codeph> exits and
          is reloaded when <codeph>psql</codeph> starts up. Tab-completion is also supported,
          although the completion logic makes no claim to be an SQL parser. If for some reason you
          do not like the tab completion, you can turn it off by putting this in a file named
            <codeph>.inputrc</codeph> in your home directory:</p>
        <codeblock>$if psql
set disable-completion on
$endif</codeblock>
      </sectiondiv>
    </section>
    <section id="section17">
      <title>Environment</title>
      <parml>
        <plentry>
          <pt>PAGER</pt>
          <pd>If the query results do not fit on the screen, they are piped through this command.
            Typical values are <codeph>more</codeph> or <codeph>less</codeph>. The default is
            platform-dependent. The use of the pager can be disabled by using the
              <codeph>\pset</codeph> command. </pd>
        </plentry>
        <plentry>
          <pt>PGDATABASE</pt>
          <pt>PGHOST</pt>
          <pt>PGPORT</pt>
          <pt>PGUSER</pt>
          <pd>Default connection parameters.</pd>
        </plentry>
        <plentry>
          <pt>PSQL_EDITOR</pt>
          <pt>EDITOR</pt>
          <pt>VISUAL</pt>
          <pd>Editor used by the <codeph>\e</codeph> command. The variables are examined in the
            order listed; the first that is set is used.</pd>
        </plentry>
        <plentry>
          <pt>SHELL</pt>
          <pd>Command executed by the <codeph>\!</codeph> command.</pd>
        </plentry>
        <plentry>
          <pt>TMPDIR</pt>
          <pd>Directory for storing temporary files. The default is <codeph>/tmp</codeph>.</pd>
        </plentry>
      </parml>
    </section>
    <section id="section18">
      <title>Files</title>
      <p>Before starting up, <codeph>psql</codeph> attempts to read and execute commands from the
        user's <codeph>~/.psqlrc</codeph> file.</p>
      <p>The command-line history is stored in the file <codeph>~/.psql_history</codeph>.</p>
    </section>
    <section id="section19">
      <title>Notes</title>
      <p><codeph>psql</codeph> only works smoothly with servers of the same version. That does not
        mean other combinations will fail outright, but subtle and not-so-subtle problems might come
        up. Backslash commands are particularly likely to fail if the server is of a different
        version.</p>
    </section>
    <section id="section20">
      <title>Notes for Windows users</title>
      <p><codeph>psql</codeph> is built as a console application. Since the Windows console windows
        use a different encoding than the rest of the system, you must take special care when using
        8-bit characters within <codeph>psql</codeph>. If <codeph>psql</codeph> detects a
        problematic console code page, it will warn you at startup. To change the console code page,
        two things are necessary: </p>
      <p>Set the code page by
          entering:<codeblock>cmd.exe /c chcp 1252</codeblock><codeph>1252</codeph> is a character
        encoding of the Latin alphabet, used by Microsoft Windows for English and some other Western
        languages. If you are using Cygwin, you can put this command in
          <codeph>/etc/profile</codeph>. </p>
      <p>Set the console font to Lucida Console, because the raster font does not work with the ANSI
        code page.</p>
    </section>
    <section id="section21">
      <title>Examples</title>
      <p>Start <codeph>psql</codeph> in interactive mode:</p>
      <codeblock>psql -p 54321 -U sally mydatabase</codeblock>
      <p>In <codeph>psql</codeph> interactive mode, spread a command over several lines of input.
        Notice the changing prompt:</p>
      <codeblock>testdb=&gt; CREATE TABLE my_table (
testdb(&gt;  first integer not null default 0,
testdb(&gt;  second text)
testdb-&gt; ;
CREATE TABLE</codeblock>
      <p>Look at the table definition:</p>
      <codeblock>testdb=&gt; \d my_table
             Table "my_table"
 Attribute |  Type   |      Modifier
-----------+---------+--------------------
 first     | integer | not null default 0
 second    | text    |</codeblock>
      <p>Run <codeph>psql</codeph> in non-interactive mode by passing in a file containing SQL
        commands:</p>
      <codeblock>psql -f /home/gpadmin/test/myscript.sql</codeblock>
    </section>
  </body>
</topic>
