<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pw216155">Greenplum PL/Python Language Extension</title>
  <body>
    <p>This section contains an overview of the Greenplum Database PL/Python Language.</p>
    <ul>
      <li id="pw223311">
        <xref href="#topic2" type="topic" format="dita"/>
      </li>
      <li id="pw223326">
        <xref href="#topic4" type="topic" format="dita"/>
      </li>
      <li id="pw218889">
        <xref href="#topic7" type="topic" format="dita"/>
      </li>
      <li id="pw222281">
        <xref href="#topic10" type="topic" format="dita"/>
      </li>
      <li id="pw213672">
        <xref href="#topic11" type="topic" format="dita"/>
      </li>
      <li id="pw216139">
        <xref href="#topic12" type="topic" format="dita"/>
      </li>
    </ul>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="pw216140">About Greenplum PL/Python</title>
    <body>
      <p>PL/Python is a loadable procedural language. With the Greenplum Database PL/Python
        extension, you can write a Greenplum Database user-defined functions in Python that take
        advantage of Python features and modules to quickly build robust database applications. </p>
      <p>The Greenplum Database PL/Python extension is installed by default with Greenplum Database.
        Greenplum Database installs a version of Python and PL/Python. This is location of the
        Python installation that Greenplum Database uses:</p>
      <codeblock>$GPHOME/ext/python/</codeblock>
    </body>
    <topic id="topic3" xml:lang="en">
      <title>Greenplum Database PL/Python Limitations</title>
      <body>
        <ul id="ul_qhg_33m_zt">
          <li>Greenplum Database does not support PL/Python triggers.</li>
          <li>PL/Python is available only as a Greenplum Database untrusted language.</li>
        </ul>
      </body>
    </topic>
  </topic>
  <topic id="topic4" xml:lang="en">
    <title id="pw217326">Enabling and Removing PL/Python support</title>
    <body>
      <p>The PL/Python language is installed with Greenplum Database. To create and run a PL\Python
        user-defined function (UDF) in a database, you must register the PL\Python language with the
        database. </p>
    </body>
    <topic id="topic5" xml:lang="en">
      <title>Enabling PL/Python Support</title>
      <body>
        <p>For each database that requires its use, register the PL/Python language with the SQL
          command <codeph>CREATE LANGUAGE</codeph> or the Greenplum Database utility
            <codeph>createlang</codeph>. For example, running this command as the
            <codeph>gpadmin</codeph> system user registers PL/Python for the database
            <codeph>testdb</codeph>:</p>
        <codeblock>$ createlang plpythonu -d testdb</codeblock>
        <p>PL/Python is registered as an untrusted language.</p>
      </body>
    </topic>
    <topic id="topic6" xml:lang="en">
      <title>Removing PL/Python Support</title>
      <body>
        <p>For a database that no long requires the PL/Python language, remove support for PL/Python
          with the SQL command <codeph>DROP LANGUAGE</codeph> or the Greenplum Database
            <codeph>droplang</codeph> utility. For example, running this command run as the
            <codeph>gpadmin</codeph> system user removes support for PL/Python from the database
            <codeph>testdb</codeph>:</p>
        <codeblock>$ droplang plpythonu -d testdb</codeblock>
        <p>When you remove support for PL/Python, the PL/Python user-defined functions that you
          created in the database will no longer work. </p>
      </body>
    </topic>
  </topic>
  <topic id="topic7" xml:lang="en">
    <title id="pw218204">Developing Functions with PL/Python</title>
    <body>
      <p>The body of a PL/Python user-defined function is a Python script. When the function is
        called, its arguments are passed as elements of the array <codeph>args[]</codeph>. Named
        arguments are also passed as ordinary variables to the Python script. The result is returned
        from the PL/Python function with <codeph>return</codeph> statement, or
          <codeph>yield</codeph> statement in case of a result-set statement. </p>
      <p>The Greenplum Database PL/Python language module imports the Python module
          <codeph>plpy</codeph>. The module <codeph>plpy</codeph> implements these functions:</p>
      <ul id="ul_fp4_jq5_xt">
        <li>Functions to execute SQL queries and prepare execution plans for queries.<sl>
            <sli><codeph>plpy.execute</codeph></sli>
            <sli><codeph>plpy.prepare</codeph></sli>
          </sl></li>
        <li>Functions to manage errors and messages.<sl>
            <sli><codeph>plpy.debug</codeph></sli>
            <sli><codeph>plpy.log</codeph></sli>
            <sli><codeph>plpy.info</codeph></sli>
            <sli><codeph>plpy.notice</codeph></sli>
            <sli><codeph>plpy.warning</codeph></sli>
            <sli><codeph>plpy.error</codeph></sli>
            <sli><codeph>plpy.fatal</codeph></sli>
            <sli><codeph>plpy.debug</codeph></sli>
          </sl></li>
      </ul>
    </body>
    <topic id="topic8" xml:lang="en">
      <title>Executing and Preparing SQL Queries </title>
      <body>
        <p>The PL/Python <codeph>plpy</codeph> module provides two Python functions to execute an
          SQL query and prepare an execution plan for a query, <codeph>plpy.execute</codeph> and
            <codeph>plpy.prepare</codeph>. Preparing the execution plan for a query is useful if you
          run the query from multiple Python function.</p>
      </body>
      <topic id="topic_jnf_45f_zt">
        <title>plpy.execute</title>
        <body>
          <p>Calling <codeph>plpy.execute</codeph> with a query string and an optional limit
            argument causes the query to be run and the result to be returned in a Python result
            object. The result object emulates a list or dictionary object. The rows returned in the
            result object can be accessed by row number and column name. The result set row
            numbering starts with 0 (zero). The result object can be modified. The result object has
            these additional methods: <ul id="ul_z5f_45f_zt">
              <li><codeph>nrows</codeph> that returns the number of rows returned by the query.</li>
              <li><codeph>status</codeph> which is the <codeph>SPI_execute()</codeph> return
                value.</li>
            </ul></p>
          <p>For example, this Python statement in a PL/Python user-defined function executes a
            query. </p>
          <codeblock>rv = plpy.execute("SELECT * FROM my_table", 5)</codeblock>
          <p>The <codeph>plpy.execute</codeph> function returns up to 5 rows from
              <codeph>my_table</codeph>. The result set is stored in the <codeph>rv</codeph> object.
            If <codeph>my_table</codeph> has a column <codeph>my_column</codeph>, it would be
            accessed as:</p>
          <codeblock>my_col_data = rv[i]["my_column"]</codeblock>
          <p>Since the function returns a maximum of 5 rows, the index <varname>i</varname> can be
            an integer between 0 and 4.</p>
        </body>
      </topic>
      <topic id="topic_jwf_p5f_zt">
        <title>plpy.prepare</title>
        <body>
          <p>The function <codeph>plpy.prepare</codeph> prepares the execution plan for a query. It
            is called with a query string and a list of parameter types, if you have parameter
            references in the query. For example, this statement can be in a PL/Python user-defined
            function:</p>
          <codeblock>plan = plpy.prepare("SELECT last_name FROM my_users WHERE 
  first_name = $1", [ "text" ])</codeblock>
          <p>The string <codeph>text</codeph> is the data type of the variable that is passed for
            the variable <varname>$1</varname>. After preparing a statement, you use the function
              <codeph>plpy.execute</codeph> to run it:</p>
          <codeblock>rv = plpy.execute(plan, [ "Fred" ], 5)</codeblock>
          <p>The third argument is the limit for the number of rows returned and is optional.</p>
          <p>When you prepare an execution plan using the PL/Python module the plan is automatically
            saved. See the Postgres Server Programming Interface (SPI) documentation for information
            about the execution plans <xref
              href="https://www.postgresql.org/docs/8.3/static/spi.html" scope="external"
              format="html">https://www.postgresql.org/docs/8.3/static/spi.html</xref>.</p>
          <p>To make effective use of saved plans across function calls you use one of the Python
            persistent storage dictionaries SD or GD. </p>
          <p>The global dictionary SD is available to store data between function calls. This
            variable is private static data. The global dictionary GD is public data, available to
            all Python functions within a session. Use GD with care.</p>
          <p>Each function gets its own execution environment in the Python interpreter, so that
            global data and function arguments from <codeph>myfunc</codeph> are not available to
              <codeph>myfunc2</codeph>. The exception is the data in the GD dictionary, as mentioned
            previously.</p>
          <p>This example uses the SD dictionary:</p>
          <codeblock>CREATE FUNCTION usesavedplan() RETURNS trigger AS $$
  if SD.has_key("plan"):
    plan = SD["plan"]
  else:
    plan = plpy.prepare("SELECT 1")
    SD["plan"] = plan

  # rest of function

$$ LANGUAGE plpythonu;</codeblock>
        </body>
      </topic>
    </topic>
    <topic id="topic_s3d_vc4_xt">
      <title>Handling Python Errors and Messages</title>
      <body>
        <p>The message functions <codeph>plpy.error</codeph> and <codeph>plpy.fatal</codeph> raise a
          Python exception which, if uncaught, propagates out to the calling query, causing the
          current transaction or subtransaction to be aborted. The functions <codeph>raise
            plpy.ERROR(msg)</codeph> and <codeph>raise plpy.FATAL(msg)</codeph> are equivalent to
          calling <codeph>plpy.error</codeph> and <codeph>plpy.fatal</codeph>, respectively. The
          other message functions only generate messages of different priority levels. </p>
        <p>Whether messages of a particular priority are reported to the client, written to the
          server log, or both is controlled by the Greenplum Database server configuration
          parameters <codeph>log_min_messages</codeph> and <codeph>client_min_messages</codeph>. For
          information about the parameters see the <cite>Greenplum Database Reference
          Guide</cite>.</p>
      </body>
    </topic>
    <topic id="topic9" xml:lang="en">
      <title>Using the dictionary GD To Improve PL/Python Performance</title>
      <body>
        <p>In terms of performance, importing a Python module is an expensive operation and can
          affect performance. If you are importing the same module frequently, you can use Python
          global variables to load the module on the first invocation and not require importing the
          module on subsequent calls. The following PL/Python function uses the GD persistent
          storage dictionary to avoid importing a module if it has already been imported and is in
          the GD. </p>
        <codeblock>psql=#
   CREATE FUNCTION pytest() returns text as $$ 
      if 'mymodule' not in GD:
        import mymodule
        GD['mymodule'] = mymodule
    return GD['mymodule'].sumd([1,2,3])
$$;</codeblock>
      </body>
    </topic>
  </topic>
  <topic id="topic10" xml:lang="en">
    <title id="pw221333">Installing Python Modules</title>
    <body>
      <p>When you install a Python module on Greenplum Database, the Greenplum Database Python
        environment must have the module added to it across all segment hosts and mirror hosts in
        the cluster. When expanding Greenplum Database, you must add the Python modules to the new
        segment hosts. You can use the Greenplum Database utilities <codeph>gpssh</codeph> and
          <codeph>gpscp</codeph> run commands on Greenplum Database hosts and copy files to the
        hosts. For information about the utilities, see the <cite>Greenplum Database Utility
          Guide</cite>.</p>
      <p>As part of the Greenplum Database installation, the <codeph>gpadmin</codeph> user
        environment is configured to use Python that is installed with Greenplum Database.</p>
      <p>To check the Python environment, you can use the <codeph>which</codeph> command:</p>
      <codeblock>which python</codeblock>
      <p>The command returns the location of the Python installation. The Python installed with
        Greenplum Database is in the Greenplum Database <codeph>ext/python</codeph> directory.</p>
      <codeblock>/<varname>path_to_greenplum-db</varname>/ext/python/bin/python</codeblock>
      <p>If you are building a Python module, you must ensure that the build creates the correct
        executable. For example on a Linux system, the build should create a 64-bit executable.</p>
      <p>Before building a Python module to be installed, ensure that the appropriate software to
        build the module is installed and properly configured. The build environment is required
        only on the host where you build the module. </p>
      <p>These are examples of installing and testing Python modules:<ul id="ul_ukh_4wr_wt">
          <li><xref href="#topic_yx3_yjq_rt" format="dita"/></li>
          <li><xref href="#topic_j53_5jq_rt" format="dita"/></li>
          <li><xref href="#topic_e4p_gcw_vt" format="dita"/></li>
        </ul></p>
    </body>
    <topic id="topic_yx3_yjq_rt">
      <title>Simple Python Module Installation Example (setuptools)</title>
      <body>
        <p>This example manually installs the Python <codeph>setuptools</codeph> module from the
          Python Package Index repository. The module lets you easily download, build, install,
          upgrade, and uninstall Python packages.</p>
        <p>This example first builds the module from a package and installs the module on a single
          host. Then the module is built and installed on segment hosts.</p>
        <ol id="ol_orb_3pq_rt">
          <li>Get the module package from the Python Package Index site. For example, run this
              <codeph>wget</codeph> command on a Greenplum Database host as the
              <codeph>gpadmin</codeph> user to get the tar
            file.<codeblock>wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-18.4.tar.gz</codeblock></li>
          <li>Extract the files from the tar file.
            <codeblock>tar -xzvf distribute-0.6.21.tar.gz</codeblock></li>
          <li>Go to the directory that contains the package files and run the Python scripts to
            build and install the Python
            package.<codeblock>cd setuptools-18.4
python setup.py build &amp;&amp; python setup.py install</codeblock></li>
          <li>The following Python command returns no errors if the module is available to Python.
            <codeblock>python -c "import setuptools"</codeblock></li>
          <li>Copy the package to the Greenplum Database hosts with the <codeph>gpscp</codeph>
            utility. For example, this command copies the tar file from the current host to the host
            systems listed in the file
            <codeph>remote-hosts</codeph>.<codeblock>gpscp -f remote-hosts setuptools-18.4.tar.gz =:/home/gpadmin</codeblock></li>
          <li>Run the commands to build, install, and test the package with <codeph>gpssh</codeph>
            utility on the hosts listed in the file <codeph>remote-hosts</codeph>. The file
              <codeph>remote-hosts</codeph> lists all the remote Greenplum Database segment
            hosts:<codeblock>gpssh -f remote_hosts
>>> tar -xzvf distribute-0.6.21.tar.gz
>>> cd setuptools-18.4
>>> python setup.py build &amp;&amp; python setup.py install
>>> python -c "import setuptools"
>>> exit</codeblock></li>
        </ol>
        <p>The <codeph>setuptools</codeph> package installs the <codeph>easy_install</codeph>
          utility that lets you install Python packages from the Python Package Index repository.
          For example, this command installs Python <codeph>PIP</codeph> utility from the Python
          Package Index site.<codeblock>easy_install pip</codeblock></p>
        <p>You can use the <codeph>gpssh</codeph> utility to run the <codeph>easy-install</codeph>
          command on all the Greenplum Database segment hosts.</p>
      </body>
    </topic>
    <topic id="topic_j53_5jq_rt">
      <title>Complex Python Installation Example (NumPy)</title>
      <body>
        <p>This example builds and installs the Python module NumPy. NumPy is a module for
          scientific computing with Python. For information about NumPy, see <xref
            href="http://www.numpy.org/" scope="external" format="html"
          >http://www.numpy.org/</xref>. </p>
        <p>Building the NumPy package requires this software:<ul id="ul_gd2_1g4_vt">
            <li>OpenBLAS libraries, an open source implementation of BLAS (Basic Linear Algebra
              Subprograms).</li>
            <li>The gcc compilers: gcc, gcc-gfortran, and gcc-c++. The compilers are required to
              build the OpenBLAS libraries. See <xref href="#topic_bqb_dtq_wt" format="dita"/></li>
          </ul></p>
        <p>This example process assumes <codeph>yum</codeph> is installed on the Greenplum Database
          segment hosts and the <codeph>gpadmin</codeph> user is a member of
            <codeph>sudoers</codeph> with root privileges on the hosts.</p>
        <p>Download the OpenBLAS and NumPy source files. For example, these <codeph>wget</codeph>
          commands download tar files into the directory
          <codeph>packages</codeph>:<codeblock>wget --directory-prefix=packages http://github.com/xianyi/OpenBLAS/tarball/v0.2.8
wget --directory-prefix=packages http://sourceforge.net/projects/numpy/files/NumPy/1.8.0/numpy-1.8.0.tar.gz/download</codeblock></p>
        <p>Distribute the software to the Geeenplum Database hosts. For example, if you download the
          software to <codeph>/home/gpadmin/packages</codeph> these commands create the directory on
          the hosts and copies the software to hosts for the hosts listed in the
            <codeph>gpdb_remotes</codeph>
          file.<codeblock>gpssh -f gpdb_remotes mkdir packages 
gpscp -f gpdb_remotes packages/* =:/home/gpadmin/packages</codeblock></p>
      </body>
      <topic id="topic_bqb_dtq_wt">
        <title>OpenBLAS Prerequisites </title>
        <body>
          <p>If needed, use <codeph>yum</codeph> to install gcc compilers from system repositories.
            The compilers are required on all hosts where you compile
            OpenBLAS:<codeblock>sudo yum -y install gcc gcc-gfortran gcc-c++</codeblock></p>
          <note>If you cannot install the correct compiler versions with yum, you can download the
            gcc compilers, including gfortran, from source and install them. These two commands
            download and install the compilers:<p>
              <codeblock>wget http://gfortran.com/download/x86_64/snapshots/gcc-4.4.tar.xz
tar xf gcc-4.4.tar.xz -C /usr/local/</codeblock>
            </p><p>If you installed gcc manually from a tar file, add the new gcc binaries to
                <codeph>PATH</codeph> and
              <codeph>LD_LIBRARY_PATH</codeph>:<codeblock>export PATH=$PATH:/usr/local/gcc-4.4/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/gcc-4.4/lib</codeblock></p></note>
          <p>Create a symbolic link to g++ and call it gxx</p>
          <p>
            <codeblock>sudo ln -s /usr/bin/g++ /usr/bin/gxx</codeblock>
          </p>
          <p>You might also need to create symbolic links to any libraries that have different
            versions available for example <codeph>libppl_c.so.4</codeph> to
              <codeph>libppl_c.so.2</codeph>.</p>
          <p>If needed, you can use the <codeph>gpscp</codeph> utility to copy files to Greenplum
            Database hosts and the <codeph>gpssh</codeph> utility to run commands on the hosts. </p>
        </body>
      </topic>
    </topic>
    <topic id="topic_nmj_zsq_wt">
      <title>Build and Install OpenBLAS Libraries</title>
      <body>
        <p>Before build and install the NumPy module, you install the OpenBLAS libraries. This
          section describes how to build and install the libraries on a single host.</p>
        <ol id="ol_fxc_w4r_wt">
          <li>Extract the OpenBLAS files from the file. These commands extract the files from the
            OpenBLAS tar file and simplify the directory name that contains the OpenBLAS
            files.<codeblock>tar -xzf packages/v0.2.8 -C /home/gpadmin/packages
mv /home/gpadmin/packages/xianyi-OpenBLAS-9c51cdf /home/gpadmin/packages/OpenBLAS</codeblock></li>
          <li>Compile OpenBLAS. These commands set the <codeph>LIBRARY_PATH</codeph> environment
            variable and run the <codeph>make</codeph> command to build OpenBLAS libraries.<p>
              <codeblock>cd /home/gpadmin/packages/OpenBLAS
export LIBRARY_PATH=$LD_LIBRARY_PATH
make FC=gfortran USE_THREAD=0</codeblock>
            </p></li>
          <li>These commands install the OpenBLAS libraries in <codeph>/usr/local</codeph> as root
            and change the owner of the files to
            <codeph>gpadmin</codeph>.<codeblock>cd /home/gpadmin/packages/OpenBLAS/
sudo make PREFIX=/usr/local install
sudo ldconfig
sudo chown -R gpadmin /usr/local/lib</codeblock></li>
        </ol>
        <p>These are the libraries that are installed and symbolic links that are
          created:<codeblock>libopenblas.a -> libopenblas_sandybridge-r0.2.8.a
libopenblas_sandybridge-r0.2.8.a
libopenblas_sandybridge-r0.2.8.so
libopenblas.so -> libopenblas_sandybridge-r0.2.8.so
libopenblas.so.0 -> libopenblas_sandybridge-r0.2.8.so</codeblock></p>
        <p>You can use the <codeph>gpssh</codeph> utility to build and install the OpenBLAS
          libraries on multiple hosts.</p>
        <p>All the Greenplum Database hosts (master and segment hosts) have identical
          configurations. You can copy the OpenBLAS libraries from the system where they were built
          instead of building the OpenBlas libraries on all the hosts. For example, these
            <codeph>gpssh</codeph> and <codeph>gpscp</codeph> commands copy and install the OpenBLAS
          libraries on the hosts listed in the <codeph>gpdb_remotes</codeph> file.</p>
        <codeblock>gpssh -f gpdb_remotes -e 'sudo yum -y install gcc gcc-gfortran gcc-c++'
gpssh -f gpdb_remotes -e 'ln -s /usr/bin/g++ /usr/bin/gxx'
gpssh -f gpdb_remotes -e sudo chown gpadmin /usr/local/lib
gpscp -f gpdb_remotes /usr/local/lib/libopen*sandy* =:/usr/local/lib

gpssh -f gpdb_remotes
>>> cd /usr/local/lib
>>> ln -s libopenblas_sandybridge-r0.2.8.a libopenblas.a
>>> ln -s libopenblas_sandybridge-r0.2.8.so libopenblas.so
>>> ln -s libopenblas_sandybridge-r0.2.8.so libopenblas.so.0
>>> sudo ldconfig</codeblock>
      </body>
    </topic>
    <topic id="topic_wwy_5sq_wt">
      <title>Build and Install NumPy</title>
      <body>
        <p>After you have installed the OpenBLAS libraries, you can build and install NumPy module.
          These steps install the NumPy module on a single host. You can use the
            <codeph>gpssh</codeph> utility to build and install the NumPy module on multiple hosts. </p>
        <ol id="ol_kv3_dpr_wt">
          <li>Go to the <codeph>packages</codeph> subdirectory and get the NumPy module source and
            extract the
            files.<codeblock>cd /home/gpadmin/packages
tar -xzf numpy-1.8.0.tar.gz</codeblock></li>
          <li>Set up the environment for building and installing NumPy.
            <codeblock>export BLAS=/usr/local/lib/libopenblas.a
export LAPACK=/usr/local/lib/libopenblas.a
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/
export LIBRARY_PATH=$LD_LIBRARY_PATH</codeblock></li>
          <li>Go to the NumPy directory and build and install NumPy. Building the NumPy package
            might take some
              time.<codeblock>cd numpy-1.8.0
python setup.py build
python setup.py install</codeblock><note>If
              the NumPy module did not successfully build, the NumPy build process might need a
                <codeph>site.cfg</codeph> that specifies the location of the OpenBLAS libraries.
              Create the file <codeph>site.cfg</codeph> in the NumPy package
                directory:<codeblock>cd ~/packages/numpy-1.8.0
touch site.cfg</codeblock><p>Add the
                following to the <codeph>site.cfg</codeph> file and run the NumPy build command
                again:</p><codeblock>[default]
library_dirs = /usr/local/lib

[atlas]
atlas_libs = openblas
library_dirs = /usr/local/lib

[lapack]
lapack_libs = openblas
library_dirs = /usr/local/lib

# added for scikit-learn 
[openblas]
libraries = openblas
library_dirs = /usr/local/lib
include_dirs = /usr/local/include</codeblock></note></li>
          <li>The following Python command ensures that the module is available for import by Python
            on a host system.<codeblock>python -c "import numpy"</codeblock></li>
        </ol>
        <p>As in the simple module installation, you can use the <codeph>gpssh</codeph> utility to
          build, install, and test the module on Greenplum Database segment hosts.</p>
        <p>The environment variables that are require to build the NumPy module are also required in
          the <codeph>gpadmin</codeph> user environment when running Python NumPy functions. You can
          use the <codeph>gpssh</codeph> utility with the <codeph>echo</codeph> command to add the
          environment variables to the <codeph>.bashrc</codeph> file. For example, these
            <codeph>echo</codeph> commands add the environment variables to the
            <codeph>.bashrc</codeph> file in the user home
          directory.<codeblock>echo -e '\n#Needed for NumPy' >> ~/.bashrc
echo -e 'export BLAS=/usr/local/lib/libopenblas.a' >> ~/.bashrc
echo -e 'export LAPACK=/usr/local/lib/libopenblas.a' >> ~/.bashrc
echo -e 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' >> ~/.bashrc
echo -e 'export LIBRARY_PATH=$LD_LIBRARY_PATH' >> ~/.bashrc</codeblock></p>
      </body>
    </topic>
    <topic id="topic_e4p_gcw_vt">
      <title>Testing Installed Python Modules</title>
      <body>
        <p>You can create a simple PL/Python user-defined function (UDF) to validate that Python a
          module is available in the Greenplum Database. This example tests the NumPy module.</p>
        <p>This PL/Python UDF imports the NumPy module. The function returns
            <codeph>SUCCESS</codeph> if the module is imported, and <codeph>FAILURE</codeph> if an
          import error occurs.</p>
        <codeblock>CREATE OR REPLACE FUNCTION plpy_test(x int)
returns text
as $$
  try:
      from numpy import *
      return 'SUCCESS'
  except ImportError, e:
      return 'FAILURE'
$$ language plpythonu;</codeblock>
        <p>Create a table that contains data on each Greenplum Database segment instance. Depending
          on the size of your Greenplum Database installation, you might need to generate more data
          to ensure data is distributed to all segment instances.</p>
        <codeblock>CREATE TABLE DIST AS (SELECT x FROM generate_series(1,50) x ) DISTRIBUTED RANDOMLY ;</codeblock>
        <p>This <codeph>SELECT</codeph> command runs the UDF on the segment hosts where data is
          stored in the primary segment instances. </p>
        <codeblock>SELECT gp_segment_id, plpy_test(x) AS status
  FROM dist
  GROUP BY gp_segment_id, status
  ORDER BY gp_segment_id, status;</codeblock>
        <p>The <codeph>SELECT</codeph> command returns <codeph>SUCCESS</codeph> if the UDF imported
          the Python module on the Greenplum Database segment instance. If the
            <codeph>SELECT</codeph> command returns <codeph>FAILURE</codeph>, you can find the
          segment host of the segment instance host. The Greenplum Database system table
            <codeph>gp_segment_configuration</codeph> contains information about mirroring and
          segment configuration. This command returns the host name for a segment ID.</p>
        <codeblock>SELECT hostname, content AS seg_ID FROM gp_segment_configuration
  WHERE content = <varname>seg_id</varname> ;</codeblock>
        <p>If <codeph>FAILURE</codeph> is returned, these are some possible causes:</p>
        <ul id="ul_kx1_rwq_wt">
          <li>A problem accessing required libraries. For the NumPy example, a Greenplum Database
            might have a problem accessing the OpenBLAS libraries or the Python libraries on a
            segment host.<p>Make sure you get no errors when running command on the segment host as
              the <codeph>gpadmin</codeph> user. This <codeph>gpssh</codeph> command tests importing
              the numpy module on the segment host
              <codeph>mdw1</codeph>.<codeblock>gpssh -h mdw1 python -c "import numpy"</codeblock></p></li>
          <li>If the Python <codeph>import</codeph> command does not return an error, environment
            variables might not be configured in the Greenplum Database environment. For example,
            the variables are not in the <codeph>.bashrc</codeph> file, or Greenplum Database might
            not have been restarted after adding the environment variables to the
              <codeph>.bashrc</codeph> file.<p>Ensure sure that the environment variables are
              properly set and then restart the Greenplum Database. For the NumPy example, ensure
              the environment variables listed at the end of the section <xref
                href="#topic_wwy_5sq_wt" format="dita"/> are defined in the <codeph>.bashrc</codeph>
              file for the <codeph>gpadmin</codeph> user on the master and segment
              hosts.</p><note>On the Greenplum Database master and segment hosts, the
                <codeph>.bashrc</codeph> file for the <codeph>gpadmin</codeph> user must source the
              file <codeph>$GPHOME/greenplum_path.sh</codeph>.</note></li>
        </ul>
      </body>
    </topic>
  </topic>
  <topic id="topic11" xml:lang="en">
    <title id="pw213712">Examples</title>
    <body>
      <p>This PL/Python UDF returns the maximum of two integers:</p>
      <codeblock>CREATE FUNCTION pymax (a integer, b integer)
  RETURNS integer
AS $$
  if (a is None) or (b is None):
      return None
  if a > b:
     return a
  return b
$$ LANGUAGE plpythonu;</codeblock>
      <p>You can use the <codeph>STRICT</codeph> property to perform the null handling instead of
        using the two conditional statements.</p>
      <codeblock>CREATE FUNCTION pymax (a integer, b integer) 
  RETURNS integer AS $$ 
return max(a,b) 
$$ LANGUAGE plpythonu STRICT ;</codeblock>
      <p>You can run the user-defined function <codeph>pymax</codeph> with <codeph>SELECT</codeph>
        command. This example runs the UDF and shows the output.</p>
      <codeblock>SELECT ( pymax(123, 43));
column1
---------
     123
(1 row)</codeblock>
      <p>This example that returns data from an SQL query that is run against a table. These two
        commands create a simple table and add data to the table.</p>
      <codeblock>CREATE TABLE sales (id int, year int, qtr int, day int, region text)
  DISTRIBUTED BY (id) ;

INSERT INTO sales VALUES
 (1, 2014, 1,1, 'usa'),
 (2, 2002, 2,2, 'europe'),
 (3, 2014, 3,3, 'asia'),
 (4, 2014, 4,4, 'usa'),
 (5, 2014, 1,5, 'europe'),
 (6, 2014, 2,6, 'asia'),
 (7, 2002, 3,7, 'usa') ;</codeblock>
      <p>This PL/Python UDF executes a <codeph>SELECT</codeph> command that returns 5 rows from the
        table. The Python function returns the <codeph>REGION</codeph> value from the row specified
        by the input value. In the Python function, the row numbering starts from 0. Valid input for
        the function is an integer between 0 and 4. </p>
      <codeblock>CREATE OR REPLACE FUNCTION mypytest(a integer) 
  RETURNS text 
AS $$ 
  rv = plpy.execute("SELECT * FROM sales ORDER BY id", 5)
  region = rv[a]["region"]
  return region
$$ language plpythonu;</codeblock>
      <p>Running this <codeph>SELECT</codeph> statement returns the <codeph>REGION</codeph> column
        value from the third row of the result set.</p>
      <codeblock>SELECT mypytest(2) ;</codeblock>
      <p>This command deletes the UDF from the database.</p>
      <codeblock>DROP FUNCTION mypytest(integer) ;</codeblock>
    </body>
  </topic>
  <topic id="topic12" xml:lang="en">
    <title id="pw213965">References</title>
    <topic id="topic13" xml:lang="en">
      <title>Technical References</title>
      <body>
        <p>For information about PL/Python see the PostgreSQL documentation at <xref
            href="https://www.postgresql.org/docs/8.3/static/plpython.html" scope="external"
            format="html">https://www.postgresql.org/docs/8.3/static/plpython.html</xref>. </p>
        <p>For information about Python Package Index (PyPI), see <xref
            href="https://pypi.python.org/pypi" format="html" scope="external"
            >https://pypi.python.org/pypi</xref>.</p>
        <p>These are some Python modules that can be downloaded:<ul id="ul_wl3_mnr_wt">
            <li>SciPy library provides user-friendly and efficient numerical routines such as
              routines for numerical integration and optimization <xref
                href="http://www.scipy.org/scipylib/index.html" format="html" scope="external"
                >http://www.scipy.org/scipylib/index.html</xref>. This <codeph>wget</codeph> command
              downloads the SciPy package tar
              file.<codeblock>wget http://sourceforge.net/projects/scipy/files/scipy/0.10.1/scipy-0.10.1.tar.gz/download</codeblock></li>
            <li>Natural Language Toolkit (nltk) is a platform for building Python programs to work
              with human language data. <xref href="http://www.nltk.org/" format="html"
                scope="external">http://www.nltk.org/</xref>. This <codeph>wget</codeph> command
              downloads the nltk package tar
                file.<codeblock>wget http://pypi.python.org/packages/source/n/nltk/nltk-2.0.2.tar.gz#md5=6e714ff74c3398e88be084748df4e657</codeblock><note>The
                Python package Distribute <xref href="https://pypi.python.org/pypi/distribute"
                  format="html" scope="external">https://pypi.python.org/pypi/distribute</xref> is
                required for nltk. The Distribute module should be installed the ntlk package. This
                  <codeph>wget</codeph> command downloads the Distribute package tar
                file.<codeblock>wget http://pypi.python.org/packages/source/d/distribute/distribute-0.6.21.tar.gz</codeblock></note></li>
          </ul></p>
      </body>
    </topic>
    <topic id="topic14" xml:lang="en">
      <title>Useful Reading</title>
      <body>
        <p>For information about the Python language, see <xref href="http://www.python.org/"
            scope="external" format="html">http://www.python.org/</xref>.</p>
        <p>A set of slides that were used in a talk about how the Pivotal data science team uses the
          PyData stack in the Pivotal MPP databases and on Pivotal Cloud Foundry <xref
            href="http://www.slideshare.net/SrivatsanRamanujam/all-thingspythonpivotal"
            format="html" scope="external"
            >http://www.slideshare.net/SrivatsanRamanujam/all-thingspythonpivotal</xref>.</p>
      </body>
    </topic>
  </topic>
</topic>
