<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-bitstring">
  <title>Bit String Functions and Operators</title>
  <body>
    <p> This section describes functions and operators for examining and manipulating bit strings,
      that is values of the types <codeph>bit</codeph> and <codeph>bit varying</codeph>. Aside from
      the usual comparison operators, the operators shown in <xref href="bit_string.xml"/> can be
      used. Bit string operands of <codeph>&amp;</codeph>, <codeph>|</codeph>, and
        <codeph>#</codeph> must be of equal length. When bit shifting, the original length of the
      string is preserved, as shown in the examples. </p>
    <table id="functions-bit-string-op-table">
      <title>Bit String Operators</title>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>Operator</entry>
            <entry>Description</entry>
            <entry>Example</entry>
            <entry>Result</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>||</codeph>
            </entry>
            <entry>concatenation</entry>
            <entry>
              <codeph>B'10001' || B'011'</codeph>
            </entry>
            <entry>
              <codeph>10001011</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&amp;</codeph>
            </entry>
            <entry>bitwise AND</entry>
            <entry>
              <codeph>B'10001' &amp; B'01101'</codeph>
            </entry>
            <entry>
              <codeph>00001</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>|</codeph>
            </entry>
            <entry>bitwise OR</entry>
            <entry>
              <codeph>B'10001' | B'01101'</codeph>
            </entry>
            <entry>
              <codeph>11101</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>#</codeph>
            </entry>
            <entry>bitwise XOR</entry>
            <entry>
              <codeph>B'10001' # B'01101'</codeph>
            </entry>
            <entry>
              <codeph>11100</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>~</codeph>
            </entry>
            <entry>bitwise NOT</entry>
            <entry>
              <codeph>~ B'10001'</codeph>
            </entry>
            <entry>
              <codeph>01110</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&lt;&lt;</codeph>
            </entry>
            <entry>bitwise shift left</entry>
            <entry>
              <codeph>B'10001' &lt;&lt; 3</codeph>
            </entry>
            <entry>
              <codeph>01000</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&gt;&gt;</codeph>
            </entry>
            <entry>bitwise shift right</entry>
            <entry>
              <codeph>B'10001' &gt;&gt; 2</codeph>
            </entry>
            <entry>
              <codeph>00100</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>The following SQL-standard functions work on bit strings as well as character strings:
        <codeph>length</codeph>, <codeph>bit_length</codeph>, <codeph>octet_length</codeph>,
        <codeph>position</codeph>, <codeph>substring</codeph>. </p>
    <p> In addition, it is possible to cast integral values to and from type <codeph>bit</codeph>.
      Some examples:
      <codeblock>
44::bit(10)                    <b>0000101100</b>
44::bit(3)                     <b>100</b>
cast(-44 as bit(12))           <b>111111010100</b>
'1110'::bit(4)::integer        <b>14</b>
</codeblock>
      Note that casting to just "bit" means casting to <codeph>bit(1)</codeph>, and so it will
      deliver only the least significant bit of the integer. </p>
    <note>
      <p> Casting an integer to <codeph>bit(n)</codeph> copies the rightmost <codeph>n</codeph>
        bits. Also, casting an integer to a bit string width wider than the integer itself will
        sign-extend on the left. </p>
    </note>
  </body>
</topic>
