<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-formatting">
  <title>Data Type Formatting Functions</title>
  <body>
    <p> The Greenplum Database formatting functions provide a powerful set of tools for converting
      various data types (date/time, integer, floating point, numeric) to formatted strings and for
      converting from formatted strings to specific data types. <xref
        href="#functions-formatting/functions-formatting-table"/> lists them. These functions all
      follow a common calling convention: the first argument is the value to be formatted and the
      second argument is a template that defines the output or input format. </p>
    <p> The <codeph>to_timestamp</codeph> function can also take a single <codeph>double
        precision</codeph> argument to convert from Unix epoch to <codeph>timestamp with time
        zone</codeph>. (<codeph>Integer</codeph> Unix epochs are implicitly cast to <codeph>double
        precision</codeph>.) </p>
    <p>The <codeph>to_char</codeph> and <codeph>to_timestamp</codeph> functions in the following
      table are classified as stable. They should not be used in statements that execute on the
      segments.</p>
    <table id="functions-formatting-table">
      <title>Formatting Functions</title>
      <tgroup cols="4">
        <colspec colnum="1" colname="c1" colwidth="1.5*"/>
        <colspec colnum="2" colname="c2" colwidth="1.15*"/>
        <colspec colnum="3" colname="c3" colwidth="1*"/>
        <colspec colnum="4" colname="c4" colwidth="1.95*"/>
        <thead>
          <row>
            <entry>Function</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
            <entry>Example</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph><codeph>to_char</codeph>(<codeph>timestamp</codeph>,
                <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>convert time stamp to string</entry>
            <entry>
              <codeph>to_char(current_timestamp, 'HH12:MI:SS')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_char</codeph>(<codeph>interval</codeph>,
                <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>convert interval to string</entry>
            <entry>
              <codeph>to_char(interval '15h 2m 12s', 'HH24:MI:SS')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_char</codeph>(<codeph>int</codeph>, <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>convert integer to string</entry>
            <entry>
              <codeph>to_char(125, '999')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_char</codeph>(<codeph>double precision</codeph>,
                  <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>convert real/double precision to string</entry>
            <entry>
              <codeph>to_char(125.8::real, '999D9')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_char</codeph>(<codeph>numeric</codeph>,
                <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>convert numeric to string</entry>
            <entry>
              <codeph>to_char(-125.8, '999D99S')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_date</codeph>(<codeph>text</codeph>,
                <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>date</codeph>
            </entry>
            <entry>convert string to date</entry>
            <entry>
              <codeph>to_date('05 Dec 2000', 'DD Mon YYYY')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_number</codeph>(<codeph>text</codeph>,
                <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>numeric</codeph>
            </entry>
            <entry>convert string to numeric</entry>
            <entry>
              <codeph>to_number('12,454.8-', '99G999D9S')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_timestamp</codeph>(<codeph>text</codeph>,
                <codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>convert string to time stamp</entry>
            <entry>
              <codeph>to_timestamp('05 Dec 2000', 'DD Mon YYYY')</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>to_timestamp</codeph>(<codeph>double precision</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>convert UNIX epoch to time stamp</entry>
            <entry>
              <codeph>to_timestamp(200120400)</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> In an output template string (for <codeph>to_char</codeph>), there are certain patterns that
      are recognized and replaced with appropriately-formatted data from the value to be formatted.
      Any text that is not a template pattern is simply copied verbatim. Similarly, in an input
      template string (for anything but <codeph>to_char</codeph>), template patterns identify the
      parts of the input data string to be looked at and the values to be found there. </p>
    <p>
      <xref href="#functions-formatting/functions-formatting-datetime-table" format="dita"/> shows
      the template patterns available for formatting date and time values. </p>
    <table id="functions-formatting-datetime-table">
      <title>Template Patterns for Date/Time Formatting</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth=".5*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <thead>
          <row>
            <entry>Pattern</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>HH</codeph>
            </entry>
            <entry>hour of day (01-12)</entry>
          </row>
          <row>
            <entry>
              <codeph>HH12</codeph>
            </entry>
            <entry>hour of day (01-12)</entry>
          </row>
          <row>
            <entry>
              <codeph>HH24</codeph>
            </entry>
            <entry>hour of day (00-23)</entry>
          </row>
          <row>
            <entry>
              <codeph>MI</codeph>
            </entry>
            <entry>minute (00-59)</entry>
          </row>
          <row>
            <entry>
              <codeph>SS</codeph>
            </entry>
            <entry>second (00-59)</entry>
          </row>
          <row>
            <entry>
              <codeph>MS</codeph>
            </entry>
            <entry>millisecond (000-999)</entry>
          </row>
          <row>
            <entry>
              <codeph>US</codeph>
            </entry>
            <entry>microsecond (000000-999999)</entry>
          </row>
          <row>
            <entry>
              <codeph>SSSS</codeph>
            </entry>
            <entry>seconds past midnight (0-86399)</entry>
          </row>
          <row>
            <entry><codeph>AM</codeph> or <codeph>A.M.</codeph> or <codeph>PM</codeph> or
                <codeph>P.M.</codeph></entry>
            <entry>meridian indicator (uppercase)</entry>
          </row>
          <row>
            <entry><codeph>am</codeph> or <codeph>a.m.</codeph> or <codeph>pm</codeph> or
                <codeph>p.m.</codeph></entry>
            <entry>meridian indicator (lowercase)</entry>
          </row>
          <row>
            <entry>
              <codeph>Y,YYY</codeph>
            </entry>
            <entry>year (4 and more digits) with comma</entry>
          </row>
          <row>
            <entry>
              <codeph>YYYY</codeph>
            </entry>
            <entry>year (4 and more digits)</entry>
          </row>
          <row>
            <entry>
              <codeph>YYY</codeph>
            </entry>
            <entry>last 3 digits of year</entry>
          </row>
          <row>
            <entry>
              <codeph>YY</codeph>
            </entry>
            <entry>last 2 digits of year</entry>
          </row>
          <row>
            <entry>
              <codeph>Y</codeph>
            </entry>
            <entry>last digit of year</entry>
          </row>
          <row>
            <entry>
              <codeph>IYYY</codeph>
            </entry>
            <entry>ISO year (4 and more digits)</entry>
          </row>
          <row>
            <entry>
              <codeph>IYY</codeph>
            </entry>
            <entry>last 3 digits of ISO year</entry>
          </row>
          <row>
            <entry>
              <codeph>IY</codeph>
            </entry>
            <entry>last 2 digits of ISO year</entry>
          </row>
          <row>
            <entry>
              <codeph>I</codeph>
            </entry>
            <entry>last digits of ISO year</entry>
          </row>
          <row>
            <entry><codeph>BC</codeph> or <codeph>B.C.</codeph> or <codeph>AD</codeph> or
                <codeph>A.D.</codeph></entry>
            <entry>era indicator (uppercase)</entry>
          </row>
          <row>
            <entry><codeph>bc</codeph> or <codeph>b.c.</codeph> or <codeph>ad</codeph> or
                <codeph>a.d.</codeph></entry>
            <entry>era indicator (lowercase)</entry>
          </row>
          <row>
            <entry>
              <codeph>MONTH</codeph>
            </entry>
            <entry>full uppercase month name (blank-padded to 9 chars)</entry>
          </row>
          <row>
            <entry>
              <codeph>Month</codeph>
            </entry>
            <entry>full mixed-case month name (blank-padded to 9 chars)</entry>
          </row>
          <row>
            <entry>
              <codeph>month</codeph>
            </entry>
            <entry>full lowercase month name (blank-padded to 9 chars)</entry>
          </row>
          <row>
            <entry>
              <codeph>MON</codeph>
            </entry>
            <entry>abbreviated uppercase month name (3 chars in English, localized lengths
              vary)</entry>
          </row>
          <row>
            <entry>
              <codeph>Mon</codeph>
            </entry>
            <entry>abbreviated mixed-case month name (3 chars in English, localized lengths
              vary)</entry>
          </row>
          <row>
            <entry>
              <codeph>mon</codeph>
            </entry>
            <entry>abbreviated lowercase month name (3 chars in English, localized lengths
              vary)</entry>
          </row>
          <row>
            <entry>
              <codeph>MM</codeph>
            </entry>
            <entry>month number (01-12)</entry>
          </row>
          <row>
            <entry>
              <codeph>DAY</codeph>
            </entry>
            <entry>full uppercase day name (blank-padded to 9 chars)</entry>
          </row>
          <row>
            <entry>
              <codeph>Day</codeph>
            </entry>
            <entry>full mixed-case day name (blank-padded to 9 chars)</entry>
          </row>
          <row>
            <entry>
              <codeph>day</codeph>
            </entry>
            <entry>full lowercase day name (blank-padded to 9 chars)</entry>
          </row>
          <row>
            <entry>
              <codeph>DY</codeph>
            </entry>
            <entry>abbreviated uppercase day name (3 chars in English, localized lengths
              vary)</entry>
          </row>
          <row>
            <entry>
              <codeph>Dy</codeph>
            </entry>
            <entry>abbreviated mixed-case day name (3 chars in English, localized lengths
              vary)</entry>
          </row>
          <row>
            <entry>
              <codeph>dy</codeph>
            </entry>
            <entry>abbreviated lowercase day name (3 chars in English, localized lengths
              vary)</entry>
          </row>
          <row>
            <entry>
              <codeph>DDD</codeph>
            </entry>
            <entry>day of year (001-366)</entry>
          </row>
          <row>
            <entry>
              <codeph>DD</codeph>
            </entry>
            <entry>day of month (01-31)</entry>
          </row>
          <row>
            <entry>
              <codeph>D</codeph>
            </entry>
            <entry>day of week (1-7; Sunday is 1)</entry>
          </row>
          <row>
            <entry>
              <codeph>W</codeph>
            </entry>
            <entry>week of month (1-5) (The first week starts on the first day of the
              month.)</entry>
          </row>
          <row>
            <entry>
              <codeph>WW</codeph>
            </entry>
            <entry>week number of year (1-53) (The first week starts on the first day of the
              year.)</entry>
          </row>
          <row>
            <entry>
              <codeph>IW</codeph>
            </entry>
            <entry>ISO week number of year (The first Thursday of the new year is in week
              1.)</entry>
          </row>
          <row>
            <entry>
              <codeph>CC</codeph>
            </entry>
            <entry>century (2 digits) (The twenty-first century starts on 2001-01-01.)</entry>
          </row>
          <row>
            <entry>
              <codeph>J</codeph>
            </entry>
            <entry>Julian Day (days since January 1, 4712 BC)</entry>
          </row>
          <row>
            <entry>
              <codeph>Q</codeph>
            </entry>
            <entry>quarter</entry>
          </row>
          <row>
            <entry>
              <codeph>RM</codeph>
            </entry>
            <entry>month in Roman numerals (I-XII; I=January) (uppercase)</entry>
          </row>
          <row>
            <entry>
              <codeph>rm</codeph>
            </entry>
            <entry>month in Roman numerals (i-xii; i=January) (lowercase)</entry>
          </row>
          <row>
            <entry>
              <codeph>TZ</codeph>
            </entry>
            <entry>time-zone name (uppercase)</entry>
          </row>
          <row>
            <entry>
              <codeph>tz</codeph>
            </entry>
            <entry>time-zone name (lowercase)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> Certain modifiers may be applied to any template pattern to alter its behavior. For example,
        <codeph>FMMonth</codeph> is the <codeph>Month</codeph> pattern with the <codeph>FM</codeph>
      modifier. <xref href="#functions-formatting/functions-formatting-datetimemod-table"
        format="dita"/> shows the modifier patterns for date/time formatting. </p>
    <table id="functions-formatting-datetimemod-table">
      <title>Template Pattern Modifiers for Date/Time Formatting</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="2.67*"/>
        <colspec colnum="3" colname="c3" colwidth="1.26*"/>
        <thead>
          <row>
            <entry>Modifier</entry>
            <entry>Description</entry>
            <entry>Example</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><codeph>FM</codeph> prefix</entry>
            <entry>fill mode (suppress padding blanks and zeroes)</entry>
            <entry>
              <codeph>FMMonth</codeph>
            </entry>
          </row>
          <row>
            <entry><codeph>TH</codeph> suffix</entry>
            <entry>uppercase ordinal number suffix</entry>
            <entry>
              <codeph>DDTH</codeph>
            </entry>
          </row>
          <row>
            <entry><codeph>th</codeph> suffix</entry>
            <entry>lowercase ordinal number suffix</entry>
            <entry>
              <codeph>DDth</codeph>
            </entry>
          </row>
          <row>
            <entry><codeph>FX</codeph> prefix</entry>
            <entry>fixed format global option (see usage notes)</entry>
            <entry>
              <codeph>FX Month DD Day</codeph>
            </entry>
          </row>
          <row>
            <entry><codeph>TM</codeph> prefix</entry>
            <entry>translation mode (print localized day and month names based on
                <varname>lc_messages</varname>)</entry>
            <entry>
              <codeph>TMMonth</codeph>
            </entry>
          </row>
          <row>
            <entry><codeph>SP</codeph> suffix</entry>
            <entry>spell mode (not yet implemented)</entry>
            <entry>
              <codeph>DDSP</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> Usage notes for date/time formatting: <ul>
        <li>
          <p>
            <codeph>FM</codeph> suppresses leading zeroes and trailing blanks that would otherwise
            be added to make the output of a pattern be fixed-width. </p>
        </li>
        <li>
          <p>
            <codeph>TM</codeph> does not include trailing blanks. </p>
        </li>
        <li>
          <p>
            <codeph>to_timestamp</codeph> and <codeph>to_date</codeph> skip multiple blank spaces in
            the input string if the <codeph>FX</codeph> option is not used. <codeph>FX</codeph> must
            be specified as the first item in the template. For example <codeph>to_timestamp('2000
              JUN', 'YYYY MON')</codeph> is correct, but <codeph>to_timestamp('2000 JUN', 'FXYYYY
              MON')</codeph> returns an error, because <codeph>to_timestamp</codeph> expects one
            space only. </p>
        </li>
        <li>
          <p> Ordinary text is allowed in <codeph>to_char</codeph> templates and will be output
            literally. You can put a substring in double quotes to force it to be interpreted as
            literal text even if it contains pattern key words. For example, in <codeph>'"Hello Year
              "YYYY'</codeph>, the <codeph>YYYY</codeph> will be replaced by the year data, but the
            single <codeph>Y</codeph> in <codeph>Year</codeph> will not be. </p>
        </li>
        <li>
          <p> If you want to have a double quote in the output you must precede it with a backslash,
            for example <codeph>E'\\"YYYY Month\\"'</codeph>.  (Two backslashes are necessary
            because the backslash already has a special meaning when using the escape string
            syntax.) </p>
        </li>
        <li>
          <p> The <codeph>YYYY</codeph> conversion from string to <codeph>timestamp</codeph> or
              <codeph>date</codeph> has a restriction if you use a year with more than 4 digits. You
            must use some non-digit character or template after <codeph>YYYY</codeph>, otherwise the
            year is always interpreted as 4 digits. For example (with the year 20000):
              <codeph>to_date('200001131', 'YYYYMMDD')</codeph> will be interpreted as a 4-digit
            year; instead use a non-digit separator after the year, like
              <codeph>to_date('20000-1131', 'YYYY-MMDD')</codeph> or <codeph>to_date('20000Nov31',
              'YYYYMonDD')</codeph>. </p>
        </li>
        <li>
          <p> In conversions from string to <codeph>timestamp</codeph> or <codeph>date</codeph>, the
              <codeph>CC</codeph> field is ignored if there is a <codeph>YYY</codeph>,
              <codeph>YYYY</codeph> or <codeph>Y,YYY</codeph> field. If <codeph>CC</codeph> is used
            with <codeph>YY</codeph> or <codeph>Y</codeph> then the year is computed as
              <codeph>(CC-1)*100+YY</codeph>. </p>
        </li>
        <li>
          <p> Millisecond (<codeph>MS</codeph>) and microsecond (<codeph>US</codeph>) values in a
            conversion from string to <codeph>timestamp</codeph> are used as part of the seconds
            after the decimal point. For example <codeph>to_timestamp('12:3', 'SS:MS')</codeph> is
            not 3 milliseconds, but 300, because the conversion counts it as 12 + 0.3 seconds. This
            means for the format <codeph>SS:MS</codeph>, the input values <codeph>12:3</codeph>,
              <codeph>12:30</codeph>, and <codeph>12:300</codeph> specify the same number of
            milliseconds. To get three milliseconds, one must use <codeph>12:003</codeph>, which the
            conversion counts as 12 + 0.003 = 12.003 seconds. </p>
          <p> Here is a more complex example: <codeph>to_timestamp('15:12:02.020.001230',
              'HH:MI:SS.MS.US')</codeph> is 15 hours, 12 minutes, and 2 seconds + 20 milliseconds +
            1230 microseconds = 2.021230 seconds. </p>
        </li>
        <li>
          <p><codeph>to_char</codeph>'s day of the week numbering (see the 'D' formatting pattern)
            is different from that of the <codeph>extract</codeph> function. </p>
        </li>
        <li>
          <p><codeph>to_char(interval)</codeph> formats <codeph>HH</codeph> and
              <codeph>HH12</codeph> as hours in a single day, while <codeph>HH24</codeph> can output
            hours exceeding a single day, e.g. &gt;24. </p>
        </li>
      </ul>
    </p>
    <p>
      <xref href="#functions-formatting/functions-formatting-numeric-table" format="dita"/> shows
      the template patterns available for formatting numeric values. </p>
    <table id="functions-formatting-numeric-table">
      <title>Template Patterns for Numeric Formatting</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="1.15*"/>
        <thead>
          <row>
            <entry>Pattern</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>9</codeph>
            </entry>
            <entry>value with the specified number of digits</entry>
          </row>
          <row>
            <entry>
              <codeph>0</codeph>
            </entry>
            <entry>value with leading zeros</entry>
          </row>
          <row>
            <entry><codeph>.</codeph> (period)</entry>
            <entry>decimal point</entry>
          </row>
          <row>
            <entry><codeph>,</codeph> (comma)</entry>
            <entry>group (thousand) separator</entry>
          </row>
          <row>
            <entry>
              <codeph>PR</codeph>
            </entry>
            <entry>negative value in angle brackets</entry>
          </row>
          <row>
            <entry>
              <codeph>S</codeph>
            </entry>
            <entry>sign anchored to number (uses locale)</entry>
          </row>
          <row>
            <entry>
              <codeph>L</codeph>
            </entry>
            <entry>currency symbol (uses locale)</entry>
          </row>
          <row>
            <entry>
              <codeph>D</codeph>
            </entry>
            <entry>decimal point (uses locale)</entry>
          </row>
          <row>
            <entry>
              <codeph>G</codeph>
            </entry>
            <entry>group separator (uses locale)</entry>
          </row>
          <row>
            <entry>
              <codeph>MI</codeph>
            </entry>
            <entry>minus sign in specified position (if number &lt; 0)</entry>
          </row>
          <row>
            <entry>
              <codeph>PL</codeph>
            </entry>
            <entry>plus sign in specified position (if number &gt; 0)</entry>
          </row>
          <row>
            <entry>
              <codeph>SG</codeph>
            </entry>
            <entry>plus/minus sign in specified position</entry>
          </row>
          <row>
            <entry>
              <codeph>RN</codeph>
            </entry>
            <entry>roman numeral (input between 1 and 3999)</entry>
          </row>
          <row>
            <entry><codeph>TH</codeph> or <codeph>th</codeph></entry>
            <entry>ordinal number suffix</entry>
          </row>
          <row>
            <entry>
              <codeph>V</codeph>
            </entry>
            <entry>shift specified number of digits (see notes)</entry>
          </row>
          <row>
            <entry>
              <codeph>EEEE</codeph>
            </entry>
            <entry>scientific notation (not implemented yet)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> Usage notes for numeric formatting: <ul>
        <li>
          <p> A sign formatted using <codeph>SG</codeph>, <codeph>PL</codeph>, or
              <codeph>MI</codeph> is not anchored to the number; for example, <codeph>to_char(-12,
              'S9999')</codeph> produces <codeph>' -12'</codeph>, but <codeph>to_char(-12,
              'MI9999')</codeph> produces <codeph>'- 12'</codeph>. The Oracle implementation does
            not allow the use of <codeph>MI</codeph> ahead of <codeph>9</codeph>, but rather
            requires that <codeph>9</codeph> precede <codeph>MI</codeph>. </p>
        </li>
        <li>
          <p>
            <codeph>9</codeph> results in a value with the same number of digits as there are
              <codeph>9</codeph>s. If a digit is not available it outputs a space. </p>
        </li>
        <li>
          <p>
            <codeph>TH</codeph> does not convert values less than zero and does not convert
            fractional numbers. </p>
        </li>
        <li>
          <p>
            <codeph>PL</codeph>, <codeph>SG</codeph>, and <codeph>TH</codeph> are PostgreSQL
            extensions. </p>
        </li>
        <li>
          <p>
            <codeph>V</codeph> effectively multiplies the input values by
              <codeph>10^<i>n</i></codeph>, where <i>n</i> is the number of digits following
              <codeph>V</codeph>. <codeph>to_char</codeph> does not support the use of
              <codeph>V</codeph> combined with a decimal point. (E.g., <codeph>99.9V99</codeph> is
            not allowed.) </p>
        </li>
      </ul>
    </p>
    <p>
      <xref href="#functions-formatting/functions-formatting-examples-table" format="dita"/> shows
      some examples of the use of the <codeph>to_char</codeph> function. </p>
    <table id="functions-formatting-examples-table">
      <title><codeph>to_char</codeph> Examples</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1.56*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <thead>
          <row>
            <entry>Expression</entry>
            <entry>Result</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>to_char(current_timestamp, 'Day, DD HH12:MI:SS')</codeph>
            </entry>
            <entry>
              <codeph>'Tuesday , 06 05:39:18'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(current_timestamp, 'FMDay, FMDD HH12:MI:SS')</codeph>
            </entry>
            <entry>
              <codeph>'Tuesday, 6 05:39:18'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-0.1, '99.99')</codeph>
            </entry>
            <entry>
              <codeph>' -.10'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-0.1, 'FM9.99')</codeph>
            </entry>
            <entry>
              <codeph>'-.1'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(0.1, '0.9')</codeph>
            </entry>
            <entry>
              <codeph>' 0.1'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(12, '9990999.9')</codeph>
            </entry>
            <entry>
              <codeph>' 0012.0'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(12, 'FM9990999.9')</codeph>
            </entry>
            <entry>
              <codeph>'0012.'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, '999')</codeph>
            </entry>
            <entry>
              <codeph>' 485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-485, '999')</codeph>
            </entry>
            <entry>
              <codeph>'-485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, '9 9 9')</codeph>
            </entry>
            <entry>
              <codeph>' 4 8 5'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(1485, '9,999')</codeph>
            </entry>
            <entry>
              <codeph>' 1,485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(1485, '9G999')</codeph>
            </entry>
            <entry>
              <codeph>' 1 485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(148.5, '999.999')</codeph>
            </entry>
            <entry>
              <codeph>' 148.500'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(148.5, 'FM999.999')</codeph>
            </entry>
            <entry>
              <codeph>'148.5'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(148.5, 'FM999.990')</codeph>
            </entry>
            <entry>
              <codeph>'148.500'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(148.5, '999D999')</codeph>
            </entry>
            <entry>
              <codeph>' 148,500'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(3148.5, '9G999D999')</codeph>
            </entry>
            <entry>
              <codeph>' 3 148,500'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-485, '999S')</codeph>
            </entry>
            <entry>
              <codeph>'485-'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-485, '999MI')</codeph>
            </entry>
            <entry>
              <codeph>'485-'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, '999MI')</codeph>
            </entry>
            <entry>
              <codeph>'485 '</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, 'FM999MI')</codeph>
            </entry>
            <entry>
              <codeph>'485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, 'PL999')</codeph>
            </entry>
            <entry>
              <codeph>'+485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, 'SG999')</codeph>
            </entry>
            <entry>
              <codeph>'+485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-485, 'SG999')</codeph>
            </entry>
            <entry>
              <codeph>'-485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-485, '9SG99')</codeph>
            </entry>
            <entry>
              <codeph>'4-85'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(-485, '999PR')</codeph>
            </entry>
            <entry>
              <codeph>'&lt;485&gt;'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, 'L999')</codeph>
            </entry>
            <entry>
              <codeph>'DM 485</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, 'RN')</codeph>
            </entry>
            <entry>
              <codeph>' CDLXXXV'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, 'FMRN')</codeph>
            </entry>
            <entry>
              <codeph>'CDLXXXV'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(5.2, 'FMRN')</codeph>
            </entry>
            <entry>
              <codeph>'V'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(482, '999th')</codeph>
            </entry>
            <entry>
              <codeph>' 482nd'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485, '"Good number:"999')</codeph>
            </entry>
            <entry>
              <codeph>'Good number: 485'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(485.8, '"Pre:"999" Post:" .999')</codeph>
            </entry>
            <entry>
              <codeph>'Pre: 485 Post: .800'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(12, '99V999')</codeph>
            </entry>
            <entry>
              <codeph>' 12000'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(12.4, '99V999')</codeph>
            </entry>
            <entry>
              <codeph>' 12400'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>to_char(12.45, '99V9')</codeph>
            </entry>
            <entry>
              <codeph>' 125'</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
</topic>
