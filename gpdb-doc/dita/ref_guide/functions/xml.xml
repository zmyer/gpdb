<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_tzp_npg_mp">
  <title>XML Functions</title>
  <shortdesc>The functions and function-like expressions described in this section operate on values
    of type <codeph>xml</codeph>. </shortdesc>
  <body>
    <p>The function-like expressions <codeph>xmlparse</codeph> and <codeph>xmlserialize</codeph> for
      converting to and from type xml are not repeated here. See<xref
        href="../data_types.xml#topic1/if139202"/> for more information about the
        <codeph>xml</codeph> type. </p>
  </body>
  <topic id="topic_gxz_pqg_mp">
    <title>Producing XML Content</title>
    <body>
      <p>A set of functions and function-like expressions are available for producing XML content
        from SQL data. As such, they are particularly suitable for formatting query results into XML
        documents for processing in client applications.</p>
    </body>
    <topic id="topic_kl3_bsg_mp">
      <title>xmlcomment</title>
      <body>
        <codeblock>xmlcomment</codeblock>
        <p>The function <codeph>xmlcomment</codeph> creates an XML value containing an XML comment
          with the specified text as content. The text cannot contain "-- " or end with a "- " so
          that the resulting construct is a valid XML comment. If the argument is null, the result
          is null.</p>
        <p>Example:<codeblock>SELECT xmlcomment('hello');

  xmlcomment
--------------
 &lt;!--hello--&gt;
</codeblock></p>
      </body>
    </topic>
    <topic id="topic_klb_j5g_mp">
      <title>xmlconcat</title>
      <body>
        <codeblock>xmlconcat(xml[, ...])</codeblock>
        <p>The function <codeph>xmlconcat</codeph> concatenates a list of individual XML values to
          create a single value containing an XML content fragment. Null values are omitted; the
          result is only null if there are no nonnull arguments.</p>
        <p>Example:<codeblock>SELECT xmlconcat('&lt;abc/&gt;', 
'&lt;bar&gt;foo&lt;/bar&gt;');

      xmlconcat
----------------------
 &lt;abc/&gt;&lt;bar&gt;foo&lt;/bar&gt;
</codeblock></p>
        <p>XML declarations, if present, are combined as follows. If all argument values have the
          same XML version declaration, that version is used in the result, else no version is used.
          If all argument values have the standalone declaration value "yes", then that value is
          used in the result. If all argument values have a standalone declaration value and at
          least one is "no", then that is used in the result. Else the result will have no
          standalone declaration. If the result is determined to require a standalone declaration
          but no version declaration, a version declaration with version 1.0 will be used because
          XML requires an XML declaration to contain a version declaration. Encoding declarations
          are ignored and removed in all cases.</p>
        <p>Example:<codeblock>SELECT xmlconcat('&lt;?xml version="1.1"?&gt;&lt;foo/&gt;', '&lt;?xml version="1.1" standalone="no"?&gt;&lt;bar/&gt;');

             xmlconcat
-----------------------------------
 &lt;?xml version="1.1"?&gt;&lt;foo/&gt;&lt;bar/&gt;
</codeblock></p>
      </body>
    </topic>
    <topic id="topic_qkj_dvg_mp">
      <title>xmlelement</title>
      <body>
        <codeblock>xmlelement(name name [, xmlattributes(value [AS attname] [ , ... ])] [, content, ...])
</codeblock>
        <p>The <codeph>xmlelement</codeph> expression produces an XML element with the given name,
          attributes, and content.</p>
        <p>Examples:<codeblock>SELECT xmlelement(name foo);

 xmlelement
------------
 &lt;foo/&gt;

SELECT xmlelement(name foo, xmlattributes('xyz' as bar));

    xmlelement
------------------
 &lt;foo bar="xyz"/&gt;

SELECT xmlelement(name foo, xmlattributes(current_date as bar), 'cont', 'ent');

             xmlelement
-------------------------------------
 &lt;foo bar="2007-01-26"&gt;content&lt;/foo&gt;
</codeblock></p>
        <p>Element and attribute names that are not valid XML names are escaped by replacing the
          offending characters by the sequence _xHHHH_, where HHHH is the character's Unicode
          codepoint in hexadecimal notation. For
          example:<codeblock>SELECT xmlelement(name "foo$bar", xmlattributes('xyz' as "a&amp;b"));

            xmlelement
----------------------------------
 &lt;foo_x0024_bar a_x0026_b="xyz"/&gt;
</codeblock></p>
        <p>An explicit attribute name need not be specified if the attribute value is a column
          reference, in which case the column's name will be used as the attribute name by default.
          In other cases, the attribute must be given an explicit name. So this example is
          valid:</p>
        <codeblock>CREATE TABLE test (a xml, b xml);
SELECT xmlelement(name test, xmlattributes(a, b)) FROM test;
</codeblock>
        <p>But these are
          not:<codeblock>SELECT xmlelement(name test, xmlattributes('constant'), a, b) FROM test;
SELECT xmlelement(name test, xmlattributes(func(a, b))) FROM test;
</codeblock></p>
        <p>Element content, if specified, will be formatted according to its data type. If the
          content is itself of type <codeph>xml</codeph>, complex XML documents can be constructed.
          For
          example:<codeblock>SELECT xmlelement(name foo, xmlattributes('xyz' as bar),
                            xmlelement(name abc),
                            xmlcomment('test'),
                            xmlelement(name xyz));

                  xmlelement
----------------------------------------------
 &lt;foo bar="xyz"&gt;&lt;abc/&gt;&lt;!--test--&gt;&lt;xyz/&gt;&lt;/foo&gt;
</codeblock></p>
        <p>Content of other types will be formatted into valid XML character data. This means in
          particular that the characters &lt;, &gt;, and &amp; will be converted to entities. Binary
          data (data type <codeph>bytea</codeph>) will be represented in base64 or hex encoding,
          depending on the setting of the configuration parameter <xref
            href="http://www.postgresql.org/docs/9.0/static/runtime-config-client.html#GUC-XMLBINARY"
            format="html" scope="external">xmlbinary</xref>. The particular behavior for individual
          data types is expected to evolve in order to align the SQL and PostgreSQL data types with
          the XML Schema specification, at which point a more precise description will appear.</p>
      </body>
    </topic>
    <topic id="topic_k3l_rvg_mp">
      <title>xmlforest</title>
      <body>
        <codeblock>xmlforest(content [AS name] [ , ...])
</codeblock>
        <p>The <codeph>xmlforest</codeph> expression produces an XML forest (sequence) of elements
          using the given names and content.</p>
        <p>Examples:<codeblock>SELECT xmlforest('abc' AS foo, 123 AS bar);

          xmlforest
------------------------------
 &lt;foo&gt;abc&lt;/foo&gt;&lt;bar&gt;123&lt;/bar&gt;


SELECT xmlforest(table_name, column_name)
FROM information_schema.columns
WHERE table_schema = 'pg_catalog';

                              xmlforest
-------------------------------------------------------------------------
 &lt;table_name&gt;pg_authid&lt;/table_name&gt;&lt;column_name&gt;rolname&lt;/column_name&gt;
 &lt;table_name&gt;pg_authid&lt;/table_name&gt;&lt;column_name&gt;rolsuper&lt;/column_name&gt;
 ...
</codeblock></p>
        <p>As seen in the second example, the element name can be omitted if the content value is a
          column reference, in which case the column name is used by default. Otherwise, a name must
          be specified.</p>
        <p>Element names that are not valid XML names are escaped as shown for
            <codeph>xmlelement</codeph> above. Similarly, content data is escaped to make valid XML
          content, unless it is already of type xml.</p>
        <p>Note that XML forests are not valid XML documents if they consist of more than one
          element, so it might be useful to wrap <codeph>xmlforest</codeph> expressions in
            <codeph>xmlelement</codeph>.</p>
      </body>
    </topic>
    <topic id="topic_b5z_nwg_mp">
      <title>xmlpi</title>
      <body>
        <codeblock>xmlpi(name target [, content])
</codeblock>
        <p>The <codeph>xmlpi</codeph> expression creates an XML processing instruction. The content,
          if present, must not contain the character sequence ?&gt;.</p>
        <p>Example:<codeblock>SELECT xmlpi(name php, 'echo "hello world";');

            xmlpi
-----------------------------
 &lt;?php echo "hello world";?&gt;
</codeblock></p>
      </body>
    </topic>
    <topic id="topic_jcc_5wg_mp">
      <title>xmlroot</title>
      <body>
        <codeblock>xmlroot(xml, version text | no value [, standalone yes|no|no value])
</codeblock>
        <p>The <codeph>xmlroot</codeph> expression alters the properties of the root node of an XML
          value. If a version is specified, it replaces the value in the root node's version
          declaration; if a standalone setting is specified, it replaces the value in the root
          node's standalone declaration.</p>
        <codeblock>SELECT xmlroot(xmlparse(document '&lt;?xml version="1.1"?&gt;&lt;content&gt;abc&lt;/content&gt;'), 
               version '1.0', standalone yes);

                xmlroot
----------------------------------------
 &lt;?xml version="1.0" standalone="yes"?&gt;
 &lt;content&gt;abc&lt;/content&gt;
</codeblock>
      </body>
    </topic>
    <topic id="topic_vxq_zwg_mp">
      <title>xmlagg</title>
      <body>
        <codeblock>xmlagg(xml)
</codeblock>
        <p>The <codeph>xmlagg</codeph> function is classified STABLE. </p>
        <p>The function <codeph>xmlagg</codeph> is, unlike the other functions described here, an
          aggregate function. It concatenates the input values to the aggregate function call, much
          like <codeph>xmlconcat</codeph> does, except that concatenation occurs across rows rather
          than across expressions in a single row. See <xref
            href="http://www.postgresql.org/docs/9.0/static/functions-aggregate.html" format="html"
            scope="external">Section 9.18</xref> for additional information about aggregate
          functions.</p>
        <p>Example:<codeblock>CREATE TABLE test (y int, x xml);
INSERT INTO test VALUES (1, '&lt;foo&gt;abc&lt;/foo&gt;');
INSERT INTO test VALUES (2, '&lt;bar/&gt;');
SELECT xmlagg(x) FROM test;
        xmlagg
----------------------
 &lt;foo&gt;abc&lt;/foo&gt;&lt;bar/&gt;
</codeblock></p>
        <p>To determine the order of the concatenation, an ORDER BY clause may be added to the
          aggregate call as described in <xref
            href="http://www.postgresql.org/docs/9.0/static/sql-expressions.html#SYNTAX-AGGREGATES"
            format="html" scope="external">Section 4.2.7</xref>. For
          example:<codeblock>SELECT xmlagg(x ORDER BY y DESC) FROM test;
        xmlagg
----------------------
 &lt;bar/&gt;&lt;foo&gt;abc&lt;/foo&gt;
</codeblock></p>
        <p>The following non-standard approach used to be recommended in previous versions, and may
          still be useful in specific
          cases:<codeblock>SELECT xmlagg(x) FROM (SELECT * FROM test ORDER BY y DESC) AS tab;
        xmlagg
----------------------
 &lt;bar/&gt;&lt;foo&gt;abc&lt;/foo&gt;
</codeblock></p>
      </body>
    </topic>
  </topic>
  <topic id="topic_kww_sxg_mp">
    <title>XML Predicates</title>
    <body>
      <p>The expressions described in this section check properties of xml values.</p>
    </body>
    <topic id="xml-isdocument">
      <title>IS DOCUMENT</title>
      <body>
        <codeblock>xml IS DOCUMENT
</codeblock>
        <p>The expression <codeph>IS DOCUMENT</codeph> returns true if the argument XML value is a
          proper XML document, false if it is not (that is, it is a content fragment), or null if
          the argument is null. See <xref
            href="http://www.postgresql.org/docs/9.0/static/datatype-xml.html" format="html"
            scope="external">Section 8.13</xref> about the difference between documents and content
          fragments.</p>
      </body>
    </topic>
    <topic id="topic_xml_exists">
      <title>XMLEXISTS</title>
      <body>
        <codeblock>XMLEXISTS(text PASSING [BY REF] <i>xml</i> [By REF])</codeblock>
        <p>The function <codeph>xmlexists</codeph> returns true if the XPath expression in the first
          argument returns any nodes, and false otherwise. (If either argument is null, the result
          is null.) </p>
        <p>Example:<codeblock>
SELECT xmlexists('//town[text() = ''Toronto'']' 
PASSING BY REF '&lt;towns&gt;&lt;town&gt;Toronto&lt;/town&gt;&lt;town>Ottawa&lt;/town&gt;&lt;/towns&lt;');

 xmlexists
------------
 t
(1 row)</codeblock></p>
        <p>The <codeph>BY REF</codeph> clauses have no effect in PostgreSQL, but are allowed for SQL
          conformance and compatibility with other implementations. Per SQL standard, the first
            <codeph>BY REF</codeph> is required, the second is optional. Also note that the SQL
          standard specifies the <codeph>xmlexists</codeph> construct to take an XQuery expression
          as first argument, but PostgreSQL currently only supports XPath, which is a subset of
          XQuery. </p>
      </body>
    </topic>
    <topic id="topic_yxh_ryg_mp">
      <title>Processing XML</title>
      <body>
        <p>To process values of data type xml, PostgreSQL offers the function
          <codeph>xpath</codeph>, which evaluates XPath 1.0 expressions.</p>
        <codeblock>xpath(xpath, xml[, nsarray])
</codeblock>
        <p>The <codeph>BY REF</codeph> clauses have no effect in PostgreSQL, but are allowed for SQL
          conformance and compatibility with other implementations. Per SQL standard, the first BY
          REF is required, the second is optional. Also note that the SQL standard specifies the
          xmlexists construct to take an XQuery expression as first argument, but PostgreSQL
          currently only supports XPath, which is a subset of XQuery. </p>
      </body>
    </topic>
    <topic id="xml_is_well_formed">
      <title>xml_is_well_formed</title>
      <body>
        <codeblock>xml_is_well_formed(<i>text</i>)
xml_is_well_formed_document(<i>text</i>)
xml_is_well_formed_content(<i>text</i>)
</codeblock>
        <p>These functions check whether a text string is well-formed XML, returning a Boolean
          result. <codeph>xml_is_well_formed_document</codeph> checks for a well-formed document,
          while <codeph>xml_is_well_formed_content</codeph> checks for well-formed content.
            <codeph>xml_is_well_formed</codeph> does the former if the <codeph>xmloption</codeph>
          configuration parameter is set to <codeph>DOCUMENT</codeph>, or the latter if it is set to
            <codeph>CONTENT</codeph>. This means that <codeph>xml_is_well_formed</codeph> is useful
          for seeing whether a simple cast to type <codeph>xml</codeph> will succeed, whereas the
          other two functions are useful for seeing whether the corresponding variants of
            <codeph>XMLPARSE</codeph> will succeed. </p>
        <p>Examples:
          <codeblock>SET xmloption TO DOCUMENT;
SELECT xml_is_well_formed('&lt;&gt;');
 xml_is_well_formed 
--------------------
 f
(1 row)

SELECT xml_is_well_formed('&lt;abc/&gt;');
 xml_is_well_formed 
--------------------
 t
(1 row)

SET xmloption TO CONTENT;
SELECT xml_is_well_formed('abc');
 xml_is_well_formed 
--------------------
 t
(1 row)

SELECT xml_is_well_formed_document('&lt;pg:foo xmlns:pg="http://postgresql.org/stuff"&gt;bar&lt;/pg:foo&gt;');
 xml_is_well_formed_document 
-----------------------------
 t
(1 row)

SELECT xml_is_well_formed_document('&lt;pg:foo xmlns:pg="http://postgresql.org/stuff"&gt;bar&lt;/my:foo&gt;');
 xml_is_well_formed_document 
-----------------------------
 f
(1 row)      
          </codeblock></p>
        <p>The last example shows that the checks include whether namespaces are correctly
          matched.</p>
      </body>
    </topic>
  </topic>
  <topic id="topic_processing_xml">
    <title>Processing XML</title>
    <body>
      <p>To process values of data type <codeph>xml</codeph>, PostgreSQL offers the functions
          <codeph>xpath</codeph> and <codeph>xpath_exists</codeph>, which evaluate XPath 1.0
        expressions. <codeblock>xpath(<i>xpath</i>, <i>xml</i> [, <i>nsarray</i>])</codeblock>
      </p>
      <p>The function <codeph>xpath</codeph> evaluates the XPath expression
            <i><codeph>xpath</codeph></i> against the XML value <codeph><i>xml</i></codeph>. It
        returns an array of XML values corresponding to the node set produced by the XPath
        expression.</p>
      <p>The second argument must be a well formed XML document. In particular, it must have a
        single root node element.</p>
      <p>The third argument of the function is an array of namespace mappings. This array should be
        a two-dimensional array with the length of the second axis being equal to 2 (i.e., it should
        be an array of arrays, each of which consists of exactly 2 elements). The first element of
        each array entry is the namespace name (alias), the second the namespace URI. It is not
        required that aliases provided in this array are the same that those being used in the XML
        document itself (in other words, both in the XML document and in the <codeph>xpath</codeph>
        function context, aliases are local).</p>
      <p>Example:<codeblock>SELECT xpath('/my:a/text()', '&lt;my:a xmlns:my="http://example.com"&gt;test&lt;/my:a&gt;', 
             ARRAY[ARRAY['my', 'http://example.com']]);

 xpath  
--------
 {test}
(1 row)
</codeblock></p>
      <p>How to deal with default (anonymous)
        namespaces:<codeblock>SELECT xpath('//mydefns:b/text()', '&lt;a xmlns="http://example.com"&gt;&lt;b&gt;test&lt;/b&gt;&lt;/a&gt;',
             ARRAY[ARRAY['mydefns', 'http://example.com']]);

 xpath
--------
 {test}
(1 row)
</codeblock></p>
    </body>
  </topic>

  <topic id="topic_aw2_hzg_mp">
    <title>Mapping Tables to XML</title>
    <body>
      <p>The following functions map the contents of relational tables to XML values. They can be
        thought of as XML export
        functionality:<codeblock>table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xml(query text, nulls boolean, tableforest boolean, targetns text)
cursor_to_xml(cursor refcursor, count int, nulls boolean, 
              tableforest boolean, targetns text)
</codeblock></p>
      <p>The return type of each function is <codeph>xml</codeph>.</p>
      <p><codeph>table_to_xml</codeph> maps the content of the named table, passed as parameter
          <codeph>tbl</codeph>. The regclass type accepts strings identifying tables using the usual
        notation, including optional schema qualifications and double quotes.
          <codeph>query_to_xml</codeph> executes the query whose text is passed as parameter query
        and maps the result set. <codeph>cursor_to_xml</codeph> fetches the indicated number of rows
        from the cursor specified by the parameter cursor. This variant is recommended if large
        tables have to be mapped, because the result value is built up in memory by each
        function.</p>
      <p>If tableforest is false, then the resulting XML document looks like
        this:<codeblock>&lt;tablename&gt;
  &lt;row&gt;
    &lt;columnname1&gt;data&lt;/columnname1&gt;
    &lt;columnname2&gt;data&lt;/columnname2&gt;
  &lt;/row&gt;

  &lt;row&gt;
    ...
  &lt;/row&gt;

  ...
&lt;/tablename&gt;
</codeblock></p>
      <p>If tableforest is true, the result is an XML content fragment that looks like
        this:<codeblock>&lt;tablename&gt;
  &lt;columnname1&gt;data&lt;/columnname1&gt;
  &lt;columnname2&gt;data&lt;/columnname2&gt;
&lt;/tablename&gt;

&lt;tablename&gt;
  ...
&lt;/tablename&gt;

...
</codeblock></p>
      <p>If no table name is available, that is, when mapping a query or a cursor, the string table
        is used in the first format, row in the second format.</p>
      <p>The choice between these formats is up to the user. The first format is a proper XML
        document, which will be important in many applications. The second format tends to be more
        useful in the<codeph>cursor_to_xml</codeph> function if the result values are to be
        reassembled into one document later on. The functions for producing XML content discussed
        above, in particular <codeph>xmlelement</codeph>, can be used to alter the results to
        taste.</p>
      <p>The data values are mapped in the same way as described for the function
          <codeph>xmlelement</codeph> above.</p>
      <p>The parameter nulls determines whether null values should be included in the output. If
        true, null values in columns are represented
        as:<codeblock>&lt;columnname xsi:nil="true"/&gt;
</codeblock></p>
      <p>where xsi is the XML namespace prefix for XML Schema Instance. An appropriate namespace
        declaration will be added to the result value. If false, columns containing null values are
        simply omitted from the output.</p>
      <p>The parameter targetns specifies the desired XML namespace of the result. If no particular
        namespace is wanted, an empty string should be passed.</p>
      <p>The following functions return XML Schema documents describing the mappings performed by
        the corresponding functions
        above:<codeblock>table_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text)
</codeblock></p>
      <p>It is essential that the same parameters are passed in order to obtain matching XML data
        mappings and XML Schema documents.</p>
      <p>The following functions produce XML data mappings and the corresponding XML Schema in one
        document (or forest), linked together. They can be useful where self-contained and
        self-describing results are
        wanted:<codeblock>table_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xml_and_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
</codeblock></p>
      <p>In addition, the following functions are available to produce analogous mappings of entire
        schemas or the entire current
        database:<codeblock>schema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text)
schema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
schema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)

database_to_xml(nulls boolean, tableforest boolean, targetns text)
database_to_xmlschema(nulls boolean, tableforest boolean, targetns text)
database_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text)
</codeblock></p>
      <p>Note that these potentially produce a lot of data, which needs to be built up in memory.
        When requesting content mappings of large schemas or databases, it might be worthwhile to
        consider mapping the tables separately instead, possibly even through a cursor.</p>
      <p>The result of a schema content mapping looks like
        this:<codeblock>&lt;schemaname&gt;

table1-mapping

table2-mapping

...

&lt;/schemaname&gt;
</codeblock></p>
      <p>where the format of a table mapping depends on the tableforest parameter as explained
        above.</p>
      <p>The result of a database content mapping looks like
        this:<codeblock>&lt;dbname&gt;

&lt;schema1name&gt;
  ...
&lt;/schema1name&gt;

&lt;schema2name&gt;
  ...
&lt;/schema2name&gt;

...

&lt;/dbname&gt;
</codeblock></p>
      <p>where the schema mapping is as above.</p>
      <p>As an example of using the output produced by these functions, <xref
          href="http://www.postgresql.org/docs/9.0/static/functions-xml.html#XSLT-XML-HTML"
          format="html" scope="external">Figure 9-1</xref> shows an XSLT stylesheet that converts
        the output of <codeph>table_to_xml_and_xmlschema</codeph> to an HTML document containing a
        tabular rendition of the table data. In a similar manner, the results from these functions
        can be converted into other XML-based formats.</p>
      <fig id="fig_ulc_1yg_mp">
        <title>XSLT stylesheet for converting SQL/XML output to HTML</title>
        <codeblock>&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.w3.org/1999/xhtml"
&gt;

  &lt;xsl:output method="xml"
      doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
      doctype-public="-//W3C/DTD XHTML 1.0 Strict//EN"
      indent="yes"/&gt;

  &lt;xsl:template match="/*"&gt;
    &lt;xsl:variable name="schema" select="//xsd:schema"/&gt;
    &lt;xsl:variable name="tabletypename"
                  select="$schema/xsd:element[@name=name(current())]/@type"/&gt;
    &lt;xsl:variable name="rowtypename"
                  select="$schema/xsd:complexType[@name=$tabletypename]/xsd:sequence/xsd:element[@name='row']/@type"/&gt;

    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;&lt;xsl:value-of select="name(current())"/&gt;&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;xsl:for-each select="$schema/xsd:complexType[@name=$rowtypename]/xsd:sequence/xsd:element/@name"&gt;
              &lt;th&gt;&lt;xsl:value-of select="."/&gt;&lt;/th&gt;
            &lt;/xsl:for-each&gt;
          &lt;/tr&gt;

          &lt;xsl:for-each select="row"&gt;
            &lt;tr&gt;
              &lt;xsl:for-each select="*"&gt;
                &lt;td&gt;&lt;xsl:value-of select="."/&gt;&lt;/td&gt;
              &lt;/xsl:for-each&gt;
            &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
        &lt;/table&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</codeblock>
      </fig>
    </body>
  </topic>

</topic>
