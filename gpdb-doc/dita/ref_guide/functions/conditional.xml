<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-conditional">

  <title>Conditional Expressions</title>
  <body>
    <p> This section describes the SQL-compliant conditional expressions available in Greenplum
      Database. </p>
    <note type="tip"> If your needs go beyond the capabilities of these conditional expressions you
      might want to consider writing a stored procedure in a more expressive programming language. </note>
    <section>
      <title>
        <codeph>CASE</codeph>
      </title>
      <p> The SQL <codeph>CASE</codeph> expression is a generic conditional expression, similar to
        if/else statements in other languages: <codeblock>
CASE WHEN <i>condition</i> THEN <i>result</i>
     [WHEN ...]
     [ELSE <i>result</i>]
END
</codeblock>
        <codeph>CASE</codeph> clauses can be used wherever an expression is valid. <i>condition</i>
        is an expression that returns a <codeph>boolean</codeph> result. If the result is true then
        the value of the <codeph>CASE</codeph> expression is the <i>result</i> that follows the
        condition. If the result is false any subsequent <codeph>WHEN</codeph> clauses are searched
        in the same manner. If no <codeph>WHEN</codeph>
        <i>condition</i> is true then the value of the case expression is the <i>result</i> in the
          <codeph>ELSE</codeph> clause. If the <codeph>ELSE</codeph> clause is omitted and no
        condition matches, the result is null. </p>
      <p> An example:
        <screen>
SELECT * FROM test;

 a
---
 1
 2
 3
SELECT a,
       CASE WHEN a=1 THEN 'one'
            WHEN a=2 THEN 'two'
            ELSE 'other'
       END
    FROM test;

 a | case
---+-------
 1 | one
 2 | two
 3 | other
</screen>
      </p>
      <p> The data types of all the <i>result</i> expressions must be convertible to a single output
        type. See <xref href="#typeconv-union-case" format="html">Type Resolution for UNION, CASE,
          and Related Constructs</xref> for more detail. </p>
      <p> The following "simple" <codeph>CASE</codeph> expression is a specialized variant of the
        general form above:
        <codeblock>
CASE <i>expression</i>
    WHEN <i>value</i> THEN <i>result</i>
    [WHEN ...]
    [ELSE <i>result</i>]
END
</codeblock>
        The <i>expression</i> is computed and compared to all the <i>value</i> specifications in the
          <codeph>WHEN</codeph> clauses until one is found that is equal. If no match is found, the
          <i>result</i> in the <codeph>ELSE</codeph> clause (or a null value) is returned. This is
        similar to the <codeph>switch</codeph> statement in C. </p>
      <p> The example above can be written using the simple <codeph>CASE</codeph> syntax:
        <screen>
SELECT a,
       CASE a WHEN 1 THEN 'one'
              WHEN 2 THEN 'two'
              ELSE 'other'
       END
    FROM test;

 a | case
---+-------
 1 | one
 2 | two
 3 | other
</screen>
      </p>
      <p> A <codeph>CASE</codeph> expression does not evaluate any subexpressions that are not
        needed to determine the result. For example, this is a possible way of avoiding a
        division-by-zero failure:
        <codeblock>
SELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false END;
</codeblock>
      </p>
    </section>
    <section>
      <title>
        <codeph>COALESCE</codeph>
      </title>
      <codeblock>
<codeph>COALESCE</codeph>(<i>value</i> [, ...])
</codeblock>
      <p> The <codeph>COALESCE</codeph> function returns the first of its arguments that is not
        null. Null is returned only if all arguments are null. It is often used to substitute a
        default value for null values when data is retrieved for display, for example:
        <codeblock>
SELECT COALESCE(description, short_description, '(none)') ...
</codeblock>
      </p>
      <p> Like a <codeph>CASE</codeph> expression, <codeph>COALESCE</codeph> will not evaluate
        arguments that are not needed to determine the result; that is, arguments to the right of
        the first non-null argument are not evaluated. This SQL-standard function provides
        capabilities similar to <codeph>NVL</codeph> and <codeph>IFNULL</codeph>, which are used in
        some other database systems. </p>
    </section>
    <section>
      <title>
        <codeph>NULLIF</codeph>
      </title>
      <codeblock>
<codeph>NULLIF</codeph>(<i>value1</i>, <i>value2</i>)
</codeblock>
      <p> The <codeph>NULLIF</codeph> function returns a null value if <i>value1</i> and
          <i>value2</i> are equal; otherwise it returns <i>value1</i>. This can be used to perform
        the inverse operation of the <codeph>COALESCE</codeph> example given above:
        <codeblock>
SELECT NULLIF(value, '(none)') ...
</codeblock>
      </p>
      <p> If <i>value1</i> is <codeph>(none)</codeph>, return a null, otherwise return
        <i>value1</i>. </p>
    </section>
    <section>
      <title>GREATEST and LEAST</title>
      <codeblock>
<codeph>GREATEST</codeph>(<i>value</i> [, ...])
</codeblock>
      <codeblock>
<codeph>LEAST</codeph>(<i>value</i> [, ...])
</codeblock>
      <p> The <codeph>GREATEST</codeph> and <codeph>LEAST</codeph> functions select the largest or
        smallest value from a list of any number of expressions. The expressions must all be
        convertible to a common data type, which will be the type of the result (see <xref
          href="#typeconv-union-case" format="html">Type Resolution for UNION, CASE, and Related
          Constructs</xref> for details). NULL values in the list are ignored. The result will be
        NULL only if all the expressions evaluate to NULL. </p>
      <p> Note that <codeph>GREATEST</codeph> and <codeph>LEAST</codeph> are not in the SQL
        standard, but are a common extension. </p>
    </section>
  </body>
</topic>
