<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-net">
  <title>Network Address Functions and Operators</title>
  <body>
    <p>
      <xref href="#functions-net/cidr-inet-operators-table" format="dita"/> shows the operators
      available for the <codeph>cidr</codeph> and <codeph>inet</codeph> types. The operators
        <codeph>&lt;&lt;</codeph>, <codeph>&lt;&lt;=</codeph>, <codeph>&gt;&gt;</codeph>, and
        <codeph>&gt;&gt;=</codeph> test for subnet inclusion. They consider only the network parts
      of the two addresses, ignoring any host part, and determine whether one network part is
      identical to or a subnet of the other. </p>
    <table id="cidr-inet-operators-table">
      <title>cidr and inet Operators</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1.28*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="2.41*"/>
        <thead>
          <row>
            <entry>Operator</entry>
            <entry>Description</entry>
            <entry>Example</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>&lt;</codeph>
            </entry>
            <entry>is less than</entry>
            <entry>
              <codeph>inet '192.168.1.5' &lt; inet '192.168.1.6'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&lt;=</codeph>
            </entry>
            <entry>is less than or equal</entry>
            <entry>
              <codeph>inet '192.168.1.5' &lt;= inet '192.168.1.5'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>=</codeph>
            </entry>
            <entry>equals</entry>
            <entry>
              <codeph>inet '192.168.1.5' = inet '192.168.1.5'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&gt;=</codeph>
            </entry>
            <entry>is greater or equal</entry>
            <entry>
              <codeph>inet '192.168.1.5' &gt;= inet '192.168.1.5'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&gt;</codeph>
            </entry>
            <entry>is greater than</entry>
            <entry>
              <codeph>inet '192.168.1.5' &gt; inet '192.0.2.4'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&lt;&gt;</codeph>
            </entry>
            <entry>is not equal</entry>
            <entry>
              <codeph>inet '192.168.1.5' &lt;&gt; inet '192.0.2.4'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&lt;&lt;</codeph>
            </entry>
            <entry>is contained within</entry>
            <entry>
              <codeph>inet '192.168.1.5' &lt;&lt; inet '192.168.1/24'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&lt;&lt;=</codeph>
            </entry>
            <entry>is contained within or equals</entry>
            <entry>
              <codeph>inet '192.168.1/24' &lt;&lt;= inet '192.168.1/24'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&gt;&gt;</codeph>
            </entry>
            <entry>contains</entry>
            <entry>
              <codeph>inet '192.168.1/24' &gt;&gt; inet '192.168.1.5'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&gt;&gt;=</codeph>
            </entry>
            <entry>contains or equals</entry>
            <entry>
              <codeph>inet '192.168.1/24' &gt;&gt;= inet '192.168.1/24'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>~</codeph>
            </entry>
            <entry>bitwise NOT</entry>
            <entry>
              <codeph>~ inet '192.168.1.6'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>&amp;</codeph>
            </entry>
            <entry>bitwise AND</entry>
            <entry>
              <codeph>inet '192.168.1.6' &amp; inet '0.0.0.255'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>|</codeph>
            </entry>
            <entry>bitwise OR</entry>
            <entry>
              <codeph>inet '192.168.1.6' | inet '0.0.0.255'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>+</codeph>
            </entry>
            <entry>addition</entry>
            <entry>
              <codeph>inet '192.168.1.6' + 25</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>subtraction</entry>
            <entry>
              <codeph>inet '192.0.2.43' - 36</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>subtraction</entry>
            <entry>
              <codeph>inet '192.0.2.43' - inet '192.0.2.19'</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>
      <xref href="#functions-net/cidr-inet-functions-table" format="dita"/> shows the functions
      available for use with the <codeph>cidr</codeph> and <codeph>inet</codeph> types. The
        <codeph>host</codeph>, <codeph>text</codeph>, and <codeph>abbrev</codeph> functions are
      primarily intended to offer alternative display formats. </p>
    <table id="cidr-inet-functions-table">
      <title>cidr and inet Functions</title>
      <tgroup cols="5">
        <colspec colnum="1" colname="c1" colwidth="3*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="3*"/>
        <colspec colnum="4" colname="c4" colwidth="3.5*"/>
        <colspec colnum="5" colname="c5" colwidth="1.5*"/>
        <thead>
          <row>
            <entry>Function</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
            <entry>Example</entry>
            <entry>Result</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>abbrev(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>abbreviated display format as text</entry>
            <entry>
              <codeph>abbrev(inet '10.1.0.0/16')</codeph>
            </entry>
            <entry>
              <codeph>10.1.0.0/16</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>abbrev(<i>cidr</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>abbreviated display format as text</entry>
            <entry>
              <codeph>abbrev(cidr '10.1.0.0/16')</codeph>
            </entry>
            <entry>
              <codeph>10.1/16</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>broadcast(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>inet</codeph>
            </entry>
            <entry>broadcast address for network</entry>
            <entry>
              <codeph>broadcast('192.168.1.5/24')</codeph>
            </entry>
            <entry>
              <codeph>192.0.2.255/24</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>family(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>int</codeph>
            </entry>
            <entry>extract family of address; <codeph>4</codeph> for IPv4, <codeph>6</codeph> for
              IPv6</entry>
            <entry>
              <codeph>family('::1')</codeph>
            </entry>
            <entry>
              <codeph>6</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>host(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>extract IP address as text</entry>
            <entry>
              <codeph>host('192.168.1.5/24')</codeph>
            </entry>
            <entry>
              <codeph>192.168.1.5</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>hostmask(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>inet</codeph>
            </entry>
            <entry>construct host mask for network</entry>
            <entry>
              <codeph>hostmask('192.168.23.20/30')</codeph>
            </entry>
            <entry>
              <codeph>0.0.0.3</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>masklen(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>int</codeph>
            </entry>
            <entry>extract netmask length</entry>
            <entry>
              <codeph>masklen('192.168.1.5/24')</codeph>
            </entry>
            <entry>
              <codeph>24</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>netmask(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>inet</codeph>
            </entry>
            <entry>construct netmask for network</entry>
            <entry>
              <codeph>netmask('192.168.1.5/24')</codeph>
            </entry>
            <entry>
              <codeph>255.255.255.0</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>network(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>cidr</codeph>
            </entry>
            <entry>extract network part of address</entry>
            <entry>
              <codeph>network('192.168.1.5/24')</codeph>
            </entry>
            <entry>
              <codeph>192.168.1.0/24</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>set_masklen(<i>inet</i>, <i>int</i>)</codeph>
            </entry>
            <entry>
              <codeph>inet</codeph>
            </entry>
            <entry>set netmask length for <codeph>inet</codeph> value</entry>
            <entry>
              <codeph>set_masklen('192.168.1.5/24', 16)</codeph>
            </entry>
            <entry>
              <codeph>192.168.1.5/16</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>set_masklen(<i>cidr</i>, <i>int</i>)</codeph>
            </entry>
            <entry>
              <codeph>cidr</codeph>
            </entry>
            <entry>set netmask length for <codeph>cidr</codeph> value</entry>
            <entry>
              <codeph>set_masklen('192.168.1.0/24'::cidr, 16)</codeph>
            </entry>
            <entry>
              <codeph>192.168.0.0/16</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>text(<i>inet</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>extract IP address and netmask length as text</entry>
            <entry>
              <codeph>text(inet '192.168.1.5')</codeph>
            </entry>
            <entry>
              <codeph>192.168.1.5/32</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> Any <codeph>cidr</codeph> value can be cast to <codeph>inet</codeph> implicitly or
      explicitly; therefore, the functions shown above as operating on <codeph>inet</codeph> also
      work on <codeph>cidr</codeph> values. (Where there are separate functions for
        <codeph>inet</codeph> and <codeph>cidr</codeph>, it is because the behavior should be
      different for the two cases.) Also, it is permitted to cast an <codeph>inet</codeph> value to
        <codeph>cidr</codeph>. When this is done, any bits to the right of the netmask are silently
      zeroed to create a valid <codeph>cidr</codeph> value. In addition, you can cast a text value
      to <codeph>inet</codeph> or <codeph>cidr</codeph> using normal casting syntax: for example,
          <codeph>inet(<i>expression</i>)</codeph> or <codeph><i>colname</i>::cidr</codeph>. </p>
    <p>
      <xref href="#functions-net/macaddr-functions-table" format="dita"/> shows the functions
      available for use with the <codeph>macaddr</codeph> type. The function
          <codeph><codeph>trunc</codeph>(<codeph>macaddr</codeph>)</codeph> returns a MAC address
      with the last 3 bytes set to zero. This can be used to associate the remaining prefix with a
      manufacturer. </p>
    <table id="macaddr-functions-table">
      <title>macaddr Functions</title>
      <tgroup cols="5">
        <colspec colnum="1" colname="c1" colwidth="2*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="1.52*"/>
        <colspec colnum="4" colname="c4" colwidth="2.5*"/>
        <colspec colnum="5" colname="c5" colwidth="2*"/>
        <thead>
          <row>
            <entry>Function</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
            <entry>Example</entry>
            <entry>Result</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph><codeph>trunc</codeph>(<codeph>macaddr</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>macaddr</codeph>
            </entry>
            <entry>set last 3 bytes to zero</entry>
            <entry>
              <codeph>trunc(macaddr '12:34:56:78:90:ab')</codeph>
            </entry>
            <entry>
              <codeph>12:34:56:00:00:00</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> The <codeph>macaddr</codeph> type also supports the standard relational operators
        (<codeph>&gt;</codeph>, <codeph>&lt;=</codeph>, etc.) for lexicographical ordering. </p>
  </body>
</topic>
