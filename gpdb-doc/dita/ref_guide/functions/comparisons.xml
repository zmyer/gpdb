<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-comparisons">
  <title>Row and Array Comparisons</title>
  <shortdesc> This section describes several specialized constructs for making multiple comparisons
    between groups of values. </shortdesc>
  <body>
    <p>These forms are syntactically related to the subquery forms of the previous section, but do
      not involve subqueries. The forms involving array subexpressions are Greenplum Database
      extensions; the rest are SQL-compliant. All of the expression forms documented in this section
      return Boolean (true/false) results. </p>
    <section>
      <title> IN </title>
      <codeblock>
<i>expression</i> IN (<i>value</i> [, ...])
</codeblock>
      <p> The right-hand side is a parenthesized list of scalar expressions. The result is "true" if
        the left-hand expression's result is equal to any of the right-hand expressions. This is a
        shorthand notation for
        <codeblock>
<i>expression</i> = <i>value1</i>
OR
<i>expression</i> = <i>value2</i>
OR
...
</codeblock>
      </p>
      <p> Note that if the left-hand expression yields null, or if there are no equal right-hand
        values and at least one right-hand expression yields null, the result of the
          <codeph>IN</codeph> construct will be null, not false. This is in accordance with SQL's
        normal rules for Boolean combinations of null values. </p>
    </section>
    <section>
      <title> NOT IN </title>
      <codeblock>
<i>expression</i> NOT IN (<i>value</i> [, ...])
</codeblock>
      <p> The right-hand side is a parenthesized list of scalar expressions. The result is "true" if
        the left-hand expression's result is unequal to all of the right-hand expressions. This is a
        shorthand notation for
        <codeblock>
<i>expression</i> &lt;&gt; <i>value1</i>
AND
<i>expression</i> &lt;&gt; <i>value2</i>
AND
...
</codeblock>
      </p>
      <p> Note that if the left-hand expression yields null, or if there are no equal right-hand
        values and at least one right-hand expression yields null, the result of the <codeph>NOT
          IN</codeph> construct will be null, not true as one might naively expect. This is in
        accordance with SQL's normal rules for Boolean combinations of null values. </p>
      <note type="tip">
        <p>
          <codeph>x NOT IN y</codeph> is equivalent to <codeph>NOT (x IN y)</codeph> in all cases.
          However, null values are much more likely to trip up the novice when working with
            <codeph>NOT IN</codeph> than when working with <codeph>IN</codeph>. It's best to express
          your condition positively if possible. </p>
      </note>
    </section>
    <section>
      <title>ANY/SOME (array)</title>
      <codeblock>
<i>expression</i> <i>operator</i> ANY (<i>array expression</i>)
<i>expression</i> <i>operator</i> SOME (<i>array expression</i>)
</codeblock>
      <p> The right-hand side is a parenthesized expression, which must yield an array value. The
        left-hand expression is evaluated and compared to each element of the array using the given
          <i>operator</i>, which must yield a Boolean result. The result of <codeph>ANY</codeph> is
        "true" if any true result is obtained. The result is "false" if no true result is found
        (including the special case where the array has zero elements). </p>
      <p> If the array expression yields a null array, the result of <codeph>ANY</codeph> will be
        null. If the left-hand expression yields null, the result of <codeph>ANY</codeph> is
        ordinarily null (though a non-strict comparison operator could possibly yield a different
        result). Also, if the right-hand array contains any null elements and no true comparison
        result is obtained, the result of <codeph>ANY</codeph> will be null, not false (again,
        assuming a strict comparison operator). This is in accordance with SQL's normal rules for
        Boolean combinations of null values. </p>
      <p>
        <codeph>SOME</codeph> is a synonym for <codeph>ANY</codeph>. </p>
    </section>
    <section>
      <title>ALL (array)</title>
      <codeblock>
<i>expression</i> <i>operator</i> ALL (<i>array expression</i>)
</codeblock>
      <p> The right-hand side is a parenthesized expression, which must yield an array value. The
        left-hand expression is evaluated and compared to each element of the array using the given
          <i>operator</i>, which must yield a Boolean result. The result of <codeph>ALL</codeph> is
        "true" if all comparisons yield true (including the special case where the array has zero
        elements). The result is "false" if any false result is found. </p>
      <p> If the array expression yields a null array, the result of <codeph>ALL</codeph> will be
        null. If the left-hand expression yields null, the result of <codeph>ALL</codeph> is
        ordinarily null (though a non-strict comparison operator could possibly yield a different
        result). Also, if the right-hand array contains any null elements and no false comparison
        result is obtained, the result of <codeph>ALL</codeph> will be null, not true (again,
        assuming a strict comparison operator). This is in accordance with SQL's normal rules for
        Boolean combinations of null values. </p>
    </section>
    <section> id="row-wise-comparison"> <title>Row-wise Comparison</title>
      <codeblock>
<i>row_constructor</i> <i>operator</i> <i>row_constructor</i>
</codeblock>
      <p> Each side is a row constructor, as described in <xref href="#functions-comparisons"
          format="dita"/>. The two row values must have the same number of fields. Each side is
        evaluated and they are compared row-wise. Row comparisons are allowed when the
          <i>operator</i> is <codeph>=</codeph>, <codeph>&lt;&gt;</codeph>, <codeph>&lt;</codeph>,
          <codeph>&lt;=</codeph>, <codeph>&gt;</codeph> or <codeph>&gt;=</codeph>, or has semantics
        similar to one of these. (To be specific, an operator can be a row comparison operator if it
        is a member of a B-Tree operator class, or is the negator of the <codeph>=</codeph> member
        of a B-Tree operator class.) </p>
      <p> The <codeph>=</codeph> and <codeph>&lt;&gt;</codeph> cases work slightly differently from
        the others. Two rows are considered equal if all their corresponding members are non-null
        and equal; the rows are unequal if any corresponding members are non-null and unequal;
        otherwise the result of the row comparison is unknown (null). </p>
      <p> For the <codeph>&lt;</codeph>, <codeph>&lt;=</codeph>, <codeph>&gt;</codeph> and
          <codeph>&gt;=</codeph> cases, the row elements are compared left-to-right, stopping as
        soon as an unequal or null pair of elements is found. If either of this pair of elements is
        null, the result of the row comparison is unknown (null); otherwise comparison of this pair
        of elements determines the result. For example, <codeph>ROW(1,2,NULL) &lt;
          ROW(1,3,0)</codeph> yields true, not null, because the third pair of elements are not
        considered. </p><codeblock>
<i>row_constructor</i> IS DISTINCT FROM <i>row_constructor</i>
</codeblock>
      <p> This construct is similar to a <codeph>&lt;&gt;</codeph> row comparison, but it does not
        yield null for null inputs. Instead, any null value is considered unequal to (distinct from)
        any non-null value, and any two nulls are considered equal (not distinct). Thus the result
        will always be either true or false, never null. </p>
      <codeblock>
<i>row_constructor</i> IS NOT DISTINCT FROM <i>row_constructor</i>
</codeblock>
      <p> This construct is similar to a <codeph>=</codeph> row comparison, but it does not yield
        null for null inputs. Instead, any null value is considered unequal to (distinct from) any
        non-null value, and any two nulls are considered equal (not distinct). Thus the result will
        always be either true or false, never null. </p>
    </section>
  </body>
</topic>
