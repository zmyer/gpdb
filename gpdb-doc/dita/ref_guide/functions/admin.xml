<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-admin">
  <title>System Administration Functions</title>
  <body>
    <p>
      <xref href="#functions-admin/functions-admin-set-table" format="dita"/> shows the functions
      available to query and alter run-time configuration parameters. </p>
    <table id="functions-admin-set-table">
      <title>Configuration Settings Functions</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph><codeph>current_setting</codeph>(<i>setting_name</i>)</codeph>
              <i>(volatile)</i></entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>current value of setting</entry>
          </row>
          <row>
            <entry>
              <codeph>
                <codeph>set_config(<i>setting_name</i>, <i>new_value</i>, <i>is_local</i>)</codeph>
              </codeph>
              <i>(stable)</i></entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>set parameter and return new value</entry>
          </row>
        </tbody>
      </tgroup>
    </table>



    <p> The function <codeph>current_setting</codeph> yields the current value of the setting
        <i>setting_name</i>. It corresponds to the SQL command <cmdname>SHOW</cmdname>. An example:
      <codeblock>
SELECT current_setting('datestyle');

 current_setting
-----------------
 ISO, MDY
(1 row)
</codeblock>
    </p>
    <p>The <codeph>setconfig()</codeph> function is classified VOLATILE. You can use it to set the
      value of a parameter on the master only.</p>
    <p>
      <codeph>set_config</codeph> sets the parameter <i>setting_name</i> to <i>new_value</i>. If
        <i>is_local</i> is <codeph>true</codeph>, the new value will only apply to the current
      transaction. If you want the new value to apply for the current session, use
        <codeph>false</codeph> instead. The function corresponds to the SQL command
        <cmdname>SET</cmdname>. An example:
      <codeblock>
SELECT set_config('log_statement_stats', 'off', false);

 set_config
------------
 off
(1 row)
</codeblock>
    </p>




    <p>The functions shown in <xref href="#functions-admin/functions-admin-signal-table"
        format="dita"/> send control signals to other server processes. Use of these functions is
      restricted to superusers. </p>
    <p>The server signalling functions are classified VOLATILE and should not be used in statements
      that execute on segments.</p>
    <table id="functions-admin-signal-table">
      <title>Server Signalling Functions</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>pg_cancel_backend(<i>pid</i> int) <i>(volatile)</i></codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Cancel a backend's current query</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_reload_conf()</codeph>
              <i>(volatile)</i></entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Cause server processes to reload their configuration files</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_rotate_logfile()</codeph>
              <i>(volatile)</i>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Rotate server's log file</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> Each of these functions returns <codeph>true</codeph> if successful and
        <codeph>false</codeph> otherwise. </p>
    <p>
      <codeph>pg_cancel_backend</codeph> sends a query cancel (<codeph>SIGINT</codeph>) signal to a
      backend process identified by process ID. The process ID of an active backend can be found
      from the <codeph>procpid</codeph> column in the <codeph>pg_stat_activity</codeph> view, or by
      listing the <cmdname>postgres</cmdname> processes on the server with <cmdname>ps</cmdname>. </p>
    <p>
      <codeph>pg_reload_conf</codeph> sends a <codeph>SIGHUP</codeph> signal to the server, causing
      the configuration files to be reloaded by all server processes. </p>
    <p>
      <codeph>pg_rotate_logfile</codeph> signals the log-file manager to switch to a new output file
      immediately. This works only when <varname>redirect_stderr</varname> is used for logging,
      since otherwise there is no log-file manager subprocess. </p>
    <p> The functions shown in <xref href="#functions-admin/functions-admin-backup-table"
        type="table" format="dita"/> assist in making on-line backups. Use of the first three
      functions is restricted to superusers. </p>
    <p>The <codeph>pg_start_backup()</codeph> and <codeph>pg_stop_backup()</codeph> functions are
      classified VOLATILE and should not be used in statements that execute on segments. </p>
    <table id="functions-admin-backup-table">
      <title>Backup Control Functions</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>pg_start_backup(<i>label</i> text)</codeph>
              <i>(volatile)</i>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Set up for performing on-line backup</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_stop_backup()</codeph>
              <i>(volatile)</i></entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Finish performing on-line backup</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_switch_xlog()</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Force switch to a new transaction log file</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_current_xlog_location()</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Get current transaction log write location</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_current_xlog_insert_location()</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Get current transaction log insert location</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_xlogfile_name_offset(<i>location</i> text)</codeph>
            </entry>
            <entry><codeph>text</codeph>, <codeph>integer</codeph></entry>
            <entry>Convert transaction log location string to file name and decimal byte offset
              within file</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_xlogfile_name(<i>location</i> text)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Convert transaction log location string to file name</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>
      <codeph>pg_start_backup</codeph> accepts a single parameter which is an arbitrary user-defined
      label for the backup. (Typically this would be the name under which the backup dump file will
      be stored.) The function writes a backup label file into the database cluster's data
      directory, and then returns the backup's starting transaction log location as text. The user
      need not pay any attention to this result value, but it is provided in case it is of use.
      <codeblock>
postgres=# select pg_start_backup('label_goes_here');
 pg_start_backup
-----------------
 0/D4445B8
(1 row)
</codeblock>
    </p>
    <p>
      <codeph>pg_stop_backup</codeph> removes the label file created by
        <codeph>pg_start_backup</codeph>, and instead creates a backup history file in the
      transaction log archive area. The history file includes the label given to
        <codeph>pg_start_backup</codeph>, the starting and ending transaction log locations for the
      backup, and the starting and ending times of the backup. The return value is the backup's
      ending transaction log location (which again may be of little interest). After noting the
      ending location, the current transaction log insertion point is automatically advanced to the
      next transaction log file, so that the ending transaction log file can be archived immediately
      to complete the backup. </p>
    <p>
      <codeph>pg_switch_xlog</codeph> moves to the next transaction log file, allowing the current
      file to be archived (assuming you are using continuous archiving). The result is the ending
      transaction log location + 1 within the just-completed transaction log file. If there has been
      no transaction log activity since the last transaction log switch,
        <codeph>pg_switch_xlog</codeph> does nothing and returns the start location of the
      transaction log file currently in use. </p>
    <p>
      <codeph>pg_current_xlog_location</codeph> displays the current transaction log write location
      in the same format used by the above functions. Similarly
        <codeph>pg_current_xlog_insert_location</codeph> displays the current transaction log
      insertion point. The insertion point is the "logical" end of transaction log at any instant,
      while the write location is the end of what has actually been written out from the server's
      internal buffers. The write location is the end of what can be examined from outside the
      server, and is usually what you want if you are interested in archiving partially-complete
      transaction log files. The insertion point is made available primarily for server debugging
      purposes. These are both read-only operations and do not require superuser permissions. </p>
    <p> You can use <codeph>pg_xlogfile_name_offset</codeph> to extract the corresponding
      transaction log file name and byte offset from the results of any of the above functions. For
      example:
      <codeblock>
postgres=# select * from pg_xlogfile_name_offset(pg_stop_backup());
        file_name         | file_offset 
--------------------------+-------------
 00000001000000000000000D |     4039624
(1 row)
</codeblock>
      Similarly, <codeph>pg_xlogfile_name</codeph> extracts just the transaction log file name. When
      the given transction log location is exactly at an transaction log file boundary, both these
      functions return the name of the preceding transaction log file. This is usually the desired
      behavior for managing transaction log archiving behavior, since the preceding file is the last
      one that currently needs to be archived. </p>
    <!--<p> For details about proper usage of these functions, see <xref href="#continuous-archiving" format="dita"/>. </p>-->
    <p> The functions shown in <xref href="#functions-admin/functions-admin-dbsize" format="dita"/>
      calculate the actual disk space usage of database objects. </p>
    <p>All of the databases object size functions are classified STABLE. They should not be used in
      statements that execute on segments.</p>
    <table id="functions-admin-dbsize">
      <title>Database Object Size Functions</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><codeph>pg_column_size</codeph>(<codeph>any</codeph>)</entry>
            <entry>
              <codeph>int</codeph>
            </entry>
            <entry>Number of bytes used to store a particular value (possibly compressed)</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_database_size</codeph>(<codeph>oid</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Disk space used by the database with the specified OID</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_database_size</codeph>(<codeph>name</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Disk space used by the database with the specified name</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_relation_size</codeph>(<codeph>oid</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Disk space used by the table or index with the specified OID</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_relation_size</codeph>(<codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry> Disk space used by the table or index with the specified name. The table name
              may be qualified with a schema name </entry>
          </row>
          <row>
            <entry>
              <codeph>pg_size_pretty(bigint)</codeph>
              <i>(volatile)</i></entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Converts a size in bytes into a human-readable format with size units</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_tablespace_size</codeph>(<codeph>oid</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Disk space used by the tablespace with the specified OID</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_tablespace_size</codeph>(<codeph>name</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Disk space used by the tablespace with the specified name</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_total_relation_size</codeph>(<codeph>oid</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry> Total disk space used by the table with the specified OID, including indexes and
              toasted data </entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_total_relation_size</codeph>(<codeph>text</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry> Total disk space used by the table with the specified name, including indexes
              and toasted data. The table name may be qualified with a schema name </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>
      <codeph>pg_column_size</codeph> shows the space used to store any individual data value. </p>
    <p>
      <codeph>pg_database_size</codeph> and <codeph>pg_tablespace_size</codeph> accept the OID or
      name of a database or tablespace, and return the total disk space used therein. </p>
    <p>
      <codeph>pg_relation_size</codeph> accepts the OID or name of a table, index or toast table,
      and returns the size in bytes. </p>
    <p>
      <codeph>pg_size_pretty</codeph> can be used to format the result of one of the other functions
      in a human-readable way, using kB, MB, GB or TB as appropriate. </p>
    <p>
      <codeph>pg_total_relation_size</codeph> accepts the OID or name of a table or toast table, and
      returns the size in bytes of the data and all associated indexes and toast tables. </p>
    <p> The functions shown in <xref href="#functions-admin/functions-admin-genfile" type="table"
        format="dita"/> provide native file access to files on the machine hosting the server. Only
      files within the database cluster directory and the <varname>log_directory</varname> may be
      accessed. Use a relative path for files within the cluster directory, and a path matching the
        <varname>log_directory</varname> configuration setting for log files. Use of these functions
      is restricted to superusers. </p>
    <table id="functions-admin-genfile">
      <title>Generic File Access Functions</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>pg_ls_dir(<i>dirname</i> text)</codeph>
              <i>(volatile)</i></entry>
            <entry>
              <codeph>setof text</codeph>
            </entry>
            <entry>List the contents of a directory</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_read_file(<i>filename</i> text, <i>offset</i> bigint, <i>length</i>
                bigint)</codeph>
              <i>(volatile)</i></entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Return the contents of a text file</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_stat_file(<i>filename</i> text)</codeph>
              <i>(volatile)</i></entry>
            <entry>
              <codeph>record</codeph>
            </entry>
            <entry>Return information about a file</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>
      <codeph>pg_ls_dir</codeph> returns all the names in the specified directory, except the
      special entries "<codeph>.</codeph>" and "<codeph>..</codeph>". </p>
    <p>
      <codeph>pg_read_file</codeph> returns part of a text file, starting at the given
      <i>offset</i>, returning at most <i>length</i> bytes (less if the end of file is reached
      first). If <i>offset</i> is negative, it is relative to the end of the file. </p>
    <p>
      <codeph>pg_stat_file</codeph> returns a record containing the file size, last accessed time
      stamp, last modified time stamp, last file status change time stamp (Unix platforms only),
      file creation time stamp (Windows only), and a <codeph>boolean</codeph> indicating if it is a
      directory. Typical usages include:
      <codeblock>
SELECT * FROM pg_stat_file('filename');
SELECT (pg_stat_file('filename')).modification;
</codeblock></p>
    <p> The functions shown in <xref href="#functions-admin/functions-advisory-locks" type="table"/>
      manage advisory locks. </p>
    <table id="functions-advisory-locks">
      <title>Advisory Lock Functions</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_lock</codeph>(<i>key</i>
                <codeph>bigint</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>void</codeph>
            </entry>
            <entry>Obtain exclusive advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_lock</codeph>(<i>key1</i>
                <codeph>int</codeph>, <i>key2</i>
                <codeph>int</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>void</codeph>
            </entry>
            <entry>Obtain exclusive advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_lock_shared</codeph>(<i>key</i>
                <codeph>bigint</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>void</codeph>
            </entry>
            <entry>Obtain shared advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_lock_shared</codeph>(<i>key1</i>
                <codeph>int</codeph>, <i>key2</i>
                <codeph>int</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>void</codeph>
            </entry>
            <entry>Obtain shared advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_try_advisory_lock</codeph>(<i>key</i>
                <codeph>bigint</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Obtain exclusive advisory lock if available</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_try_advisory_lock</codeph>(<i>key1</i>
                <codeph>int</codeph>, <i>key2</i>
                <codeph>int</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Obtain exclusive advisory lock if available</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_try_advisory_lock_shared</codeph>(<i>key</i>
                <codeph>bigint</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Obtain shared advisory lock if available</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_try_advisory_lock_shared</codeph>(<i>key1</i>
                <codeph>int</codeph>, <i>key2</i>
                <codeph>int</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Obtain shared advisory lock if available</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_unlock</codeph>(<i>key</i>
                <codeph>bigint</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Release an exclusive advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_unlock</codeph>(<i>key1</i>
                <codeph>int</codeph>, <i>key2</i>
                <codeph>int</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Release an exclusive advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_unlock_shared</codeph>(<i>key</i>
                <codeph>bigint</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Release a shared advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_unlock_shared</codeph>(<i>key1</i>
                <codeph>int</codeph>, <i>key2</i>
                <codeph>int</codeph>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Release a shared advisory lock</entry>
          </row>
          <row>
            <entry>
              <codeph><codeph>pg_advisory_unlock_all</codeph>()</codeph>
            </entry>
            <entry>
              <codeph>void</codeph>
            </entry>
            <entry>Release all advisory locks held by the current session</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>
      <codeph>pg_advisory_lock</codeph> locks an application-defined resource, which may be
      identified either by a single 64-bit key value or two 32-bit key values (note that these two
      key spaces do not overlap). If another session already holds a lock on the same resource, the
      function will wait until the resource becomes available. The lock is exclusive. Multiple lock
      requests stack, so that if the same resource is locked three times it must be also unlocked
      three times to be released for other sessions' use. </p>
    <p>
      <codeph>pg_advisory_lock_shared</codeph> works the same as <codeph>pg_advisory_lock</codeph>,
      except the lock can be shared with other sessions requesting shared locks. Only would-be
      exclusive lockers are locked out. </p>
    <p>
      <codeph>pg_try_advisory_lock</codeph> is similar to <codeph>pg_advisory_lock</codeph>, except
      the function will not wait for the lock to become available. It will either obtain the lock
      immediately and return <codeph>true</codeph>, or return <codeph>false</codeph> if the lock
      cannot be acquired now. </p>
    <p>
      <codeph>pg_try_advisory_lock_shared</codeph> works the same as
        <codeph>pg_try_advisory_lock</codeph>, except it attempts to acquire shared rather than
      exclusive lock. </p>
    <p>
      <codeph>pg_advisory_unlock</codeph> will release a previously-acquired exclusive advisory
      lock. It will return <codeph>true</codeph> if the lock is successfully released. If the lock
      was in fact not held, it will return <codeph>false</codeph>, and in addition, an SQL warning
      will be raised by the server. </p>
    <p>
      <codeph>pg_advisory_unlock_shared</codeph> works the same as
        <codeph>pg_advisory_unlock</codeph>, except to release a shared advisory lock. </p>
    <p>
      <codeph>pg_advisory_unlock_all</codeph> will release all advisory locks held by the current
      session. (This function is implicitly invoked at session end, even if the client disconnects
      ungracefully.) </p>
  </body>
</topic>
