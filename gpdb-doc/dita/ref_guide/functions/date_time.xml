<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-datetime">
  <title>Date/Time Functions and Operators</title>
  <body>
    <p>
      <xref href="#functions-datetime/functions-datetime-table" format="dita"/> shows the available
      functions for date/time value processing, with details appearing in the following subsections.
        <xref href="#functions-datetime/operators-datetime-table" format="dita"/> illustrates the
      behaviors of the basic arithmetic operators (<codeph>+</codeph>, <codeph>*</codeph>, etc.).
      For formatting functions, refer to <xref href="formatting.xml"/>. </p>
    <p> All the functions and operators described below that take <codeph>time</codeph> or
        <codeph>timestamp</codeph> inputs actually come in two variants: one that takes <codeph>time
        with time zone</codeph> or <codeph>timestamp with time zone</codeph>, and one that takes
        <codeph>time without time zone</codeph> or <codeph>timestamp without time zone</codeph>. For
      brevity, these variants are not shown separately. Also, the <codeph>+</codeph> and
        <codeph>*</codeph> operators come in commutative pairs (for example both date + integer and
      integer + date); we show only one of each such pair. </p>
    <table id="operators-datetime-table">
      <title>Date/Time Operators</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Operator</entry>
            <entry>Example</entry>
            <entry>Result</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>+</codeph>
            </entry>
            <entry>
              <codeph>date '2001-09-28' + integer '7'</codeph>
            </entry>
            <entry>
              <codeph>date '2001-10-05'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>+</codeph>
            </entry>
            <entry>
              <codeph>date '2001-09-28' + interval '1 hour'</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-28 01:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>+</codeph>
            </entry>
            <entry>
              <codeph>date '2001-09-28' + time '03:00'</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-28 03:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>+</codeph>
            </entry>
            <entry>
              <codeph>interval '1 day' + interval '1 hour'</codeph>
            </entry>
            <entry>
              <codeph>interval '1 day 01:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>+</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-28 01:00' + interval '23 hours'</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-29 00:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>+</codeph>
            </entry>
            <entry>
              <codeph>time '01:00' + interval '3 hours'</codeph>
            </entry>
            <entry>
              <codeph>time '04:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>- interval '23 hours'</codeph>
            </entry>
            <entry>
              <codeph>interval '-23:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>date '2001-10-01' - date '2001-09-28'</codeph>
            </entry>
            <entry>
              <codeph>integer '3'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>date '2001-10-01' - integer '7'</codeph>
            </entry>
            <entry>
              <codeph>date '2001-09-24'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>date '2001-09-28' - interval '1 hour'</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-27 23:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>time '05:00' - time '03:00'</codeph>
            </entry>
            <entry>
              <codeph>interval '02:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>time '05:00' - interval '2 hours'</codeph>
            </entry>
            <entry>
              <codeph>time '03:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-28 23:00' - interval '23 hours'</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-28 00:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>interval '1 day' - interval '1 hour'</codeph>
            </entry>
            <entry>
              <codeph>interval '1 day -01:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>-</codeph>
            </entry>
            <entry>
              <codeph>timestamp '2001-09-29 03:00' - timestamp '2001-09-27 12:00'</codeph>
            </entry>
            <entry>
              <codeph>interval '1 day 15:00:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>*</codeph>
            </entry>
            <entry>
              <codeph>900 * interval '1 second'</codeph>
            </entry>
            <entry>
              <codeph>interval '00:15:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>*</codeph>
            </entry>
            <entry>
              <codeph>21 * interval '1 day'</codeph>
            </entry>
            <entry>
              <codeph>interval '21 days'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>*</codeph>
            </entry>
            <entry>
              <codeph>double precision '3.5' * interval '1 hour'</codeph>
            </entry>
            <entry>
              <codeph>interval '03:30:00'</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>/</codeph>
            </entry>
            <entry>
              <codeph>interval '1 hour' / double precision '1.5'</codeph>
            </entry>
            <entry>
              <codeph>interval '00:40:00'</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>The <codeph>timeofday</codeph> function is classified VOLATILE. The following date/time
      functions are classified STABLE:<ul id="ul_mzz_2k1_mp">
        <li><codeph>age</codeph></li>
        <li><codeph>current_date</codeph></li>
        <li><codeph>current_time</codeph></li>
        <li><codeph>current_timestamp</codeph></li>
        <li><codeph>localtime</codeph></li>
        <li><codeph>localtimestamp</codeph></li>
        <li><codeph>now</codeph></li>
      </ul></p>
    <table id="functions-datetime-table">
      <title>Date/Time Functions</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1.63*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="2.13*"/>
        <thead>
          <row>
            <entry>Function</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>age(<i>timestamp</i>, <i>timestamp</i>)</codeph>
              <i>(stable)</i>
            </entry>
            <entry>
              <codeph>interval</codeph>
            </entry>
            <entry>Subtract arguments, producing a "symbolic" result that uses years and
              months</entry>
          </row>
          <row>
            <entry>
              <codeph>age(<i>timestamp</i>)</codeph>
              <i>(stable)</i>
            </entry>
            <entry>
              <codeph>interval</codeph>
            </entry>
            <entry>Subtract from <codeph>current_date</codeph></entry>
          </row>
          <row>
            <entry>
              <codeph>clock_timestamp()</codeph>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>Current date and time (changes during statement execution); see <xref
                href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>current_date </codeph>
              <i>(stable)</i>
            </entry>
            <entry>
              <codeph>date</codeph>
            </entry>
            <entry>Current date; see <xref href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>current_time </codeph>
              <i>(stable)</i>
            </entry>
            <entry>
              <codeph>time with time zone</codeph>
            </entry>
            <entry>Current time of day; see <xref href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>current_timestamp <i>(stable)</i>
              </codeph>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>Current date and time (start of current transaction); see <xref
                href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>date_part(<i>text</i>, <i>timestamp</i>)</codeph>
            </entry>
            <entry>
              <codeph>double precision</codeph>
            </entry>
            <entry>Get subfield (equivalent to <codeph>extract</codeph>); see <xref
                href="#functions-datetime-extract"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>date_part(<i>text</i>, <i>interval</i>)</codeph>
            </entry>
            <entry>
              <codeph>double precision</codeph>
            </entry>
            <entry>Get subfield (equivalent to <codeph>extract</codeph>); see <xref
                href="#functions-datetime-extract"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>date_trunc(<i>text</i>, <i>timestamp</i>)</codeph>
            </entry>
            <entry>
              <codeph>timestamp</codeph>
            </entry>
            <entry>Truncate to specified precision; see also <xref href="#functions-datetime-trunc"
              />
            </entry>
          </row>
          <row>
            <entry>
              <codeph>extract(<i>field</i> from <i>timestamp</i>)</codeph>
            </entry>
            <entry>
              <codeph>double precision</codeph>
            </entry>
            <entry>Get subfield; see <xref href="#functions-datetime-extract"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>extract(<i>field</i> from <i>interval</i>)</codeph>
            </entry>
            <entry>
              <codeph>double precision</codeph>
            </entry>
            <entry>Get subfield; see <xref href="#functions-datetime-extract"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>isfinite(<i>timestamp</i>) </codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Test for finite time stamp (not equal to infinity)</entry>
          </row>
          <row>
            <entry>
              <codeph>isfinite(<i>interval</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>Test for finite interval</entry>
          </row>
          <row>
            <entry>
              <codeph>justify_days(<i>interval</i>)</codeph>
            </entry>
            <entry>
              <codeph>interval</codeph>
            </entry>
            <entry>Adjust interval so 30-day time periods are represented as months</entry>
          </row>
          <row>
            <entry>
              <codeph>justify_hours(<i>interval</i>)</codeph>
            </entry>
            <entry>
              <codeph>interval</codeph>
            </entry>
            <entry>Adjust interval so 24-hour time periods are represented as days</entry>
          </row>
          <row>
            <entry>
              <codeph>justify_interval(<i>interval</i>)</codeph>
            </entry>
            <entry>
              <codeph>interval</codeph>
            </entry>
            <entry>Adjust interval using <codeph>justify_days</codeph> and
                <codeph>justify_hours</codeph>, with additional sign adjustments</entry>
          </row>
          <row>
            <entry>ocaltime <i>(stable)</i>
            </entry>
            <entry>
              <codeph>time</codeph>
            </entry>
            <entry>Current time of day; see <xref href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>localtimestamp <i>(stable)</i>
            </entry>
            <entry>
              <codeph>timestamp</codeph>
            </entry>
            <entry>Current date and time (start of current transaction); see <xref
                href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>now()</codeph>
              <i>(stable)</i>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>Current date and time (start of current transaction); see <xref
                href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>statement_timestamp()</codeph>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>Current date and time (start of current statement); see <xref
                href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>timeofday()</codeph>
              <i>(volatile)</i>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Current date and time (like <codeph>clock_timestamp</codeph>, but as a
                <codeph>text</codeph> string); see <xref href="#functions-datetime-current"/>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>transaction_timestamp()</codeph>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>Current date and time (start of current transaction); see <xref
                href="#functions-datetime-current"/>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p><xref href="#functions-datetime/table_zkq_s5g_4p" format="dita"/> shows usage examples for
      the functions in <xref href="#functions-datetime/functions-datetime-table" format="dita"
      />.</p>
    <table id="table_zkq_s5g_4p">
      <title>Date/Time Functions Examples</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1.53*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <thead>
          <row>
            <entry>Example</entry>
            <entry>Result</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>age(timestamp '2001-04-10', timestamp '1957-06-13')</codeph>
            </entry>
            <entry>
              <codeph>43 years 9 mons 27 days</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>age(timestamp '1957-06-13')</codeph>
            </entry>
            <entry>
              <codeph>43 years 8 mons 3 days</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>date_part('hour', timestamp '2001-02-16 20:38:40')</codeph>
            </entry>
            <entry>
              <codeph>20</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>date_part('month', interval '2 years 3 months')</codeph>
            </entry>
            <entry>
              <codeph>3</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>date_trunc('hour', timestamp '2001-02-16 20:38:40')</codeph>
            </entry>
            <entry>
              <codeph>2001-02-16 20:00:00</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>extract(hour from timestamp '2001-02-16 20:38:40')</codeph>
            </entry>
            <entry>
              <codeph>20</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>extract(month from interval '2 years 3 months')</codeph>
            </entry>
            <entry>
              <codeph>3</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>isfinite(timestamp '2001-02-16 21:28:30')</codeph>
            </entry>
            <entry>
              <codeph>true</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>isfinite(interval '4 hours')</codeph>
            </entry>
            <entry>
              <codeph>true</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>justify_days(interval '30 days')</codeph>
            </entry>
            <entry>
              <codeph>1 month</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>justify_hours(interval '24 hours')</codeph>
            </entry>
            <entry>
              <codeph>1 day</codeph>
            </entry>
          </row>
          <row>
            <entry>
              <codeph>justify_interval(interval '1 mon -1 hour')</codeph>
            </entry>
            <entry>
              <codeph>29 days 23:00:00</codeph>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p> In addition to these functions, the SQL <codeph>OVERLAPS</codeph> operator is supported:
      <codeblock>
(<i>start1</i>, <i>end1</i>) OVERLAPS (<i>start2</i>, <i>end2</i>)
(<i>start1</i>, <i>length1</i>) OVERLAPS (<i>start2</i>, <i>length2</i>)
</codeblock>
      This expression yields true when two time periods (defined by their endpoints) overlap, false
      when they do not overlap. The endpoints can be specified as pairs of dates, times, or time
      stamps; or as a date, time, or time stamp followed by an interval. </p>
    <screen>
SELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<b>Result: </b><tt>true</tt>
SELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<b>Result: </b><tt>false</tt>
</screen>
    <p> When adding an <codeph>interval</codeph> value to (or subtracting an
        <codeph>interval</codeph> value from) a <codeph>timestamp with time zone</codeph> value, the
      days component advances (or decrements) the date of the <codeph>timestamp with time
        zone</codeph> by the indicated number of days. Across daylight saving time changes (with the
      session time zone set to a time zone that recognizes DST), this means <codeph>interval '1
        day'</codeph> does not necessarily equal <codeph>interval '24 hours'</codeph>. For example,
      with the session time zone set to <codeph>CST7CDT</codeph>, <codeph>timestamp with time zone
        '2005-04-02 12:00-07' + interval '1 day' </codeph> will produce <codeph>timestamp with time
        zone '2005-04-03 12:00-06'</codeph>, while adding <codeph>interval '24 hours'</codeph> to
      the same initial <codeph>timestamp with time zone</codeph> produces <codeph>timestamp with
        time zone '2005-04-03 13:00-06'</codeph>, as there is a change in daylight saving time at
        <codeph>2005-04-03 02:00</codeph> in time zone <codeph>CST7CDT</codeph>. </p>
  </body>
  <topic id="functions-datetime-extract">
    <title>EXTRACT, date_part</title>
    <body>
      <codeblock>
EXTRACT(<i>field</i> FROM <i>source</i>)
</codeblock>
      <p> The <codeph>extract</codeph> function retrieves subfields such as year or hour from
        date/time values. <i>source</i> must be a value expression of type
          <codeph>timestamp</codeph>, <codeph>time</codeph>, or <codeph>interval</codeph>.
        (Expressions of type <codeph>date</codeph> will be cast to <codeph>timestamp</codeph> and
        can therefore be used as well.) <i>field</i> is an identifier or string that selects what
        field to extract from the source value. The <codeph>extract</codeph> function returns values
        of type <codeph>double precision</codeph>. The following are valid field names: <!-- alphabetical -->
        <parml>
          <plentry>
            <pt><codeph>century</codeph></pt>
            <pd>
              <p> The century </p>
              <screen>
SELECT EXTRACT(CENTURY FROM TIMESTAMP '2000-12-16 12:21:13');
<b>Result: </b><codeph>20</codeph>
SELECT EXTRACT(CENTURY FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>21</codeph>
</screen>
              <p> The first century starts at 0001-01-01 00:00:00 AD, although they did not know it
                at the time. This definition applies to all Gregorian calendar countries. There is
                no century number 0, you go from -1 to 1. If you disagree with this, please write
                your complaint to: Pope, Cathedral Saint-Peter of Roma, Vatican. </p>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>day</codeph></pt>
            <pd>
              <p> The day (of the month) field (1 - 31) </p>
              <screen>
SELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>16</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>decade</codeph></pt>
            <pd>
              <p> The year field divided by 10 </p>
              <screen>
SELECT EXTRACT(DECADE FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>200</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>dow</codeph></pt>
            <pd>
              <p> The day of the week (0 - 6; Sunday is 0) (for <codeph>timestamp</codeph> values
                only) </p>
              <screen>
SELECT EXTRACT(DOW FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>5</codeph>
</screen>
              <p> Note that <codeph>extract</codeph>'s day of the week numbering is different from
                that of the <codeph>to_char</codeph> function. </p>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>doy</codeph></pt>
            <pd>
              <p> The day of the year (1 - 365/366) (for <codeph>timestamp</codeph> values only) </p>
              <screen>
SELECT EXTRACT(DOY FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>47</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>epoch</codeph></pt>
            <pd>
              <p> For <codeph>date</codeph> and <codeph>timestamp</codeph> values, the number of
                seconds since 1970-01-01 00:00:00-00 (can be negative); for
                  <codeph>interval</codeph> values, the total number of seconds in the interval </p>
              <screen>
SELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-08');
<b>Result: </b><codeph>982384720</codeph>

SELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');
<b>Result: </b><codeph>442800</codeph>
</screen>
              <p> Here is how you can convert an epoch value back to a time stamp: </p>
              <screen>
SELECT TIMESTAMP WITH TIME ZONE 'epoch' + 982384720 * INTERVAL '1 second';
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>hour</codeph></pt>
            <pd>
              <p> The hour field (0 - 23) </p>
              <screen>
SELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>20</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>microseconds</codeph></pt>
            <pd>
              <p> The seconds field, including fractional parts, multiplied by 1 000 000. Note that
                this includes full seconds. </p>
              <screen>
SELECT EXTRACT(MICROSECONDS FROM TIME '17:12:28.5');
<b>Result: </b><codeph>28500000</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>millennium</codeph></pt>
            <pd>
              <p> The millennium </p>
              <screen>
SELECT EXTRACT(MILLENNIUM FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>3</codeph>
</screen>
              <p> Years in the 1900s are in the second millennium. The third millennium starts
                January 1, 2001. </p>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>milliseconds</codeph></pt>
            <pd>
              <p> The seconds field, including fractional parts, multiplied by 1000. Note that this
                includes full seconds. </p>
              <screen>
SELECT EXTRACT(MILLISECONDS FROM TIME '17:12:28.5');
<b>Result: </b><codeph>28500</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>minute</codeph></pt>
            <pd>
              <p> The minutes field (0 - 59) </p>
              <screen>
SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>38</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>month</codeph></pt>
            <pd>
              <p> For <codeph>timestamp</codeph> values, the number of the month within the year (1
                - 12) ; for <codeph>interval</codeph> values the number of months, modulo 12 (0 -
                11) </p>
              <screen>
SELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>2</codeph>

SELECT EXTRACT(MONTH FROM INTERVAL '2 years 3 months');
<b>Result: </b><codeph>3</codeph>

SELECT EXTRACT(MONTH FROM INTERVAL '2 years 13 months');
<b>Result: </b><codeph>1</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>quarter</codeph></pt>
            <pd>
              <p> The quarter of the year (1 - 4) that the day is in (for <codeph>timestamp</codeph>
                values only) </p>
              <screen>
SELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>1</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>second</codeph></pt>
            <pd>
              <p> The seconds field, including fractional parts (0 - 59<fn> 60 if leap seconds are
                  implemented by the operating system </fn>) </p>
              <screen>
SELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>40</codeph>

SELECT EXTRACT(SECOND FROM TIME '17:12:28.5');
<b>Result: </b><codeph>28.5</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>timezone</codeph></pt>
            <pd>
              <p> The time zone offset from UTC, measured in seconds. Positive values correspond to
                time zones east of UTC, negative values to zones west of UTC. </p>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>timezone_hour</codeph></pt>
            <pd>
              <p> The hour component of the time zone offset </p>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>timezone_minute</codeph></pt>
            <pd>
              <p> The minute component of the time zone offset </p>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>week</codeph></pt>
            <pd>
              <p> The number of the week of the year that the day is in. By definition (ISO 8601),
                the first week of a year contains January 4 of that year. (The ISO-8601 week starts
                on Monday.) In other words, the first Thursday of a year is in week 1 of that year.
                (for <codeph>timestamp</codeph> values only) </p>
              <p> Because of this, it is possible for early January dates to be part of the 52nd or
                53rd week of the previous year. For example, <codeph>2005-01-01</codeph> is part of
                the 53rd week of year 2004, and <codeph>2006-01-01</codeph> is part of the 52nd week
                of year 2005. </p>
              <screen>
SELECT EXTRACT(WEEK FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>7</codeph>
</screen>
            </pd>
          </plentry>
          <plentry>
            <pt><codeph>year</codeph></pt>
            <pd>
              <p> The year field. Keep in mind there is no <codeph>0 AD</codeph>, so subtracting
                  <codeph>BC</codeph> years from <codeph>AD</codeph> years should be done with care. </p>
              <screen>
SELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>2001</codeph>
</screen>
            </pd>
          </plentry>
        </parml>
      </p>
      <p> The <codeph>extract</codeph> function is primarily intended for computational processing.
        For formatting date/time values for display, see <xref
          href="formatting.xml#functions-formatting"/>. </p>
      <p> The <codeph>date_part</codeph> function is modeled on the traditional Greenplum Database
        equivalent to the SQL-standard function <codeph>extract</codeph>:
        <codeblock>
date_part('<i>field</i>', <i>source</i>)
</codeblock> Note that here the
          <i>field</i> parameter needs to be a string value, not a name. The valid field names for
          <codeph>date_part</codeph> are the same as for <codeph>extract</codeph>. </p>
      <screen>
SELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>16</codeph>

SELECT date_part('hour', INTERVAL '4 hours 3 minutes');
<b>Result: </b><codeph>4</codeph>
</screen>
    </body>
  </topic>

  <topic id="functions-datetime-trunc">
    <title>date_trunc</title>
    <body>
      <p> The function <codeph>date_trunc</codeph> is conceptually similar to the
          <codeph>trunc</codeph> function for numbers. </p>
      <p> date_trunc('<i>field</i>', <i>source</i>) <i>source</i> is a value expression of type
          <codeph>timestamp</codeph> or <codeph>interval</codeph>. (Values of type
          <codeph>date</codeph> and <codeph>time</codeph> are cast automatically, to
          <codeph>timestamp</codeph> or <codeph>interval</codeph> respectively.) <i>field</i>
        selects to which precision to truncate the input value. The return value is of type
          <codeph>timestamp</codeph> or <codeph>interval</codeph> with all fields that are less
        significant than the selected one set to zero (or one, for day and month). </p>
      <p> Valid values for <i>field</i> are: <ul>
          <li><codeph>microseconds</codeph></li>
          <li><codeph>milliseconds</codeph></li>
          <li><codeph>second</codeph></li>
          <li><codeph>minute</codeph></li>
          <li><codeph>hour</codeph></li>
          <li><codeph>day</codeph></li>
          <li><codeph>week</codeph></li>
          <li><codeph>month</codeph></li>
          <li><codeph>quarter</codeph></li>
          <li><codeph>year</codeph></li>
          <li><codeph>decade</codeph></li>
          <li><codeph>century</codeph></li>
          <li><codeph>millennium</codeph></li>
        </ul>
      </p>
      <p> Examples:
        <screen>
SELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>2001-02-16 20:00:00</codeph>

SELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40');
<b>Result: </b><codeph>2001-01-01 00:00:00</codeph>
</screen>
      </p>
    </body>
  </topic>
  <topic id="functions-datetime-zoneconvert">
    <title>AT TIME ZONE</title>
    <body>
      <p> The <codeph>AT TIME ZONE</codeph> construct allows conversions of time stamps to different
        time zones. <xref
          href="#functions-datetime-zoneconvert/functions-datetime-zoneconvert-table" format="dita"
        /> shows its variants. </p>
      <table id="functions-datetime-zoneconvert-table">
        <title><codeph>AT TIME ZONE</codeph> Variants</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1.51*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="1.32*"/>
          <thead>
            <row>
              <entry>Expression</entry>
              <entry>Return Type</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <codeph><codeph>timestamp without time zone</codeph> AT TIME ZONE
                  <i>zone</i></codeph>
              </entry>
              <entry>
                <codeph>timestamp with time zone</codeph>
              </entry>
              <entry>Treat given time stamp <i>without time zone</i> as located in the specified
                time zone</entry>
            </row>
            <row>
              <entry>
                <codeph><codeph>timestamp with time zone</codeph> AT TIME ZONE <i>zone</i></codeph>
              </entry>
              <entry>
                <codeph>timestamp without time zone</codeph>
              </entry>
              <entry>Convert given time stamp <i>with time zone</i> to the new time zone</entry>
            </row>
            <row>
              <entry>
                <codeph><codeph>time with time zone</codeph> AT TIME ZONE <i>zone</i></codeph>
              </entry>
              <entry>
                <codeph>time with time zone</codeph>
              </entry>
              <entry>Convert given time <i>with time zone</i> to the new time zone</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p> In these expressions, the desired time zone <i>zone</i> can be specified either as a text
        string (e.g., <codeph>'PST'</codeph>) or as an interval (e.g., <codeph>INTERVAL
          '-08:00'</codeph>). In the text case, a time zone name may be specified in any of the ways
        described in <xref scope="external"
          href="https://www.postgresql.org/docs/8.3/static/datatype-datetime.html#DATATYPE-TIMEZONES"
          format="html">Time Zones</xref>. </p>
      <p> Examples (supposing that the local time zone is <codeph>PST8PDT</codeph>):
        <screen>
SELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'MST';
<b>Result: </b><codeph>2001-02-16 19:38:40-08</codeph>

SELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'MST';
<b>Result: </b><codeph>2001-02-16 18:38:40</codeph>
</screen>
        The first example takes a time stamp without time zone and interprets it as MST time
        (UTC-7), which is then converted to PST (UTC-8) for display. The second example takes a time
        stamp specified in EST (UTC-5) and converts it to local time in MST (UTC-7). </p>
      <p> The function <codeph><codeph>timezone</codeph>(<i>zone</i>, <i>timestamp</i>)</codeph> is
        equivalent to the SQL-conforming construct <codeph><i>timestamp</i> AT TIME ZONE
          <i>zone</i></codeph>. </p>
    </body>
  </topic>

  <topic id="functions-datetime-current">
    <title>Current Date/Time</title>
    <body>
      <p> Greenplum Database provides a number of functions that return values related to the
        current date and time. These SQL-standard functions all return values based on the start
        time of the current transaction:
        <codeblock>
CURRENT_DATE
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_TIME(<i>precision</i>)
CURRENT_TIMESTAMP(<i>precision</i>)
LOCALTIME
LOCALTIMESTAMP
LOCALTIME(<i>precision</i>)
LOCALTIMESTAMP(<i>precision</i>)</codeblock></p>
      <p>
        <codeph>CURRENT_TIME</codeph> and <codeph>CURRENT_TIMESTAMP</codeph> deliver values with
        time zone; <codeph>LOCALTIME</codeph> and <codeph>LOCALTIMESTAMP</codeph> deliver values
        without time zone. </p>
      <p>
        <codeph>CURRENT_TIME</codeph>, <codeph>CURRENT_TIMESTAMP</codeph>,
          <codeph>LOCALTIME</codeph>, and <codeph>LOCALTIMESTAMP</codeph> can optionally be given a
        precision parameter, which causes the result to be rounded to that many fractional digits in
        the seconds field. Without a precision parameter, the result is given to the full available
        precision. </p>
      <p> Some examples:
        <screen>
SELECT CURRENT_TIME;
<b>Result: </b><codeph>14:39:53.662522-05</codeph>

SELECT CURRENT_DATE;
<b>Result: </b><codeph>2001-12-23</codeph>

SELECT CURRENT_TIMESTAMP;
<b>Result: </b><codeph>2001-12-23 14:39:53.662522-05</codeph>

SELECT CURRENT_TIMESTAMP(2);
<b>Result: </b><codeph>2001-12-23 14:39:53.66-05</codeph>

SELECT LOCALTIMESTAMP;
<b>Result: </b><codeph>2001-12-23 14:39:53.662522</codeph>
</screen>
      </p>
      <p> Since these functions return the start time of the current transaction, their values do
        not change during the transaction. This is considered a feature: the intent is to allow a
        single transaction to have a consistent notion of the "current" time, so that multiple
        modifications within the same transaction bear the same time stamp. </p>
      <note>
        <p> Other database systems may advance these values more frequently. </p>
      </note>
      <p> Greenplum Database also provides functions that return the start time of the current
        statement, as well as the actual current time at the instant the function is called. The
        complete list of non-SQL-standard time functions is:
        <codeblock>
now()
transaction_timestamp()
statement_timestamp()
clock_timestamp()
timeofday()
</codeblock></p>
      <p>
        <codeph>now()</codeph> is a traditional Greenplum Database equivalent to
          <codeph>CURRENT_TIMESTAMP</codeph>. <codeph>transaction_timestamp()</codeph> is likewise
        equivalent to <codeph>CURRENT_TIMESTAMP</codeph>, but is named to clearly reflect what it
        returns. <codeph>statement_timestamp()</codeph> returns the start time of the current
        statement (more specifically, the time of receipt of the latest command message from the
        client). <codeph>statement_timestamp()</codeph> and <codeph>transaction_timestamp()</codeph>
        return the same value during the first command of a transaction, but may differ during
        subsequent commands. <codeph>clock_timestamp()</codeph> returns the actual current time, and
        therefore its value changes even within a single SQL command. <codeph>timeofday()</codeph>
        is a historical Greenplum Database function. Like <codeph>clock_timestamp()</codeph>, it
        returns the actual current time, but as a formatted <codeph>text</codeph> string rather than
        a <codeph>timestamp with time zone</codeph> value. </p>
      <p> All the date/time data types also accept the special literal value <codeph>now</codeph> to
        specify the current date and time (again, interpreted as the transaction start time). Thus,
        the following three all return the same result:
        <codeblock>
SELECT CURRENT_TIMESTAMP;
SELECT now();
SELECT TIMESTAMP 'now';  -- incorrect for use with DEFAULT
</codeblock>
      </p>
      <note type="tip">
        <p> You do not want to use the third form when specifying a <codeph>DEFAULT</codeph> clause
          while creating a table. The system will convert <codeph>now</codeph> to a
            <codeph>timestamp</codeph> as soon as the constant is parsed, so that when the default
          value is needed, the time of the table creation would be used! The first two forms will
          not be evaluated until the default value is used, because they are function calls. Thus
          they will give the desired behavior of defaulting to the time of row insertion. </p>
      </note>
    </body>
  </topic>

  <topic id="functions-datetime-delay">
    <title>Delaying Execution</title>
    <body>
      <p> The following function is available to delay execution of the server process: <codeblock>
pg_sleep(<i>seconds</i>)
</codeblock>
        <codeph>pg_sleep</codeph> makes the current session's process sleep until <i>seconds</i>
        seconds have elapsed. <i>seconds</i> is a value of type <codeph>double precision</codeph>,
        so fractional-second delays can be specified. For example:
        <codeblock>
SELECT pg_sleep(1.5);
</codeblock>
      </p>
      <note>
        <p> The effective resolution of the sleep interval is platform-specific; 0.01 seconds is a
          common value. The sleep delay will be at least as long as specified. It may be longer
          depending on factors such as server load. </p>
      </note>
      <note>
        <p> Make sure that your session does not hold more locks than necessary when calling
            <codeph>pg_sleep</codeph>. Otherwise other sessions might have to wait for your sleeping
          process, slowing down the entire system. </p>
      </note>
    </body>
  </topic>
</topic>
