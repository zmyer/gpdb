<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-sequence">
  <title>Sequence Manipulation Functions</title>
  <body>
    <p> This section describes Greenplum Database's functions for operating on <i>sequence
        objects</i>. Sequence objects (also called sequence generators or just sequences) are
      special single-row tables created with <cmdname>CREATE SEQUENCE</cmdname>. A sequence object
      is usually used to generate unique identifiers for rows of a table. The sequence functions,
      listed in <xref href="#functions-sequence/functions-sequence-table"/>, provide simple,
      multiuser-safe methods for obtaining successive sequence values from sequence objects. </p>
    <p>The <codeph>nextval</codeph> and <codeph>setval</codeph> functions are classified VOLATILE
      and should not be used in statements that operate on distributed data in segments.</p>
    <table id="functions-sequence-table">
      <title>Sequence Functions</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Function</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>nextval(regclass)</codeph>
              <i>(volatile)</i>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Advance sequence and return new value</entry>
          </row>
          <row>
            <entry>
              <codeph>setval(regclass, bigint)</codeph>
              <i>(volatile)</i>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Set sequence's current value</entry>
          </row>
          <row>
            <entry>
              <codeph>setval(regclass, bigint, boolean)</codeph>
              <i>(volatile)</i>
            </entry>
            <entry>
              <codeph>bigint</codeph>
            </entry>
            <entry>Set sequence's current value and <codeph>is_called</codeph> flag</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <note>The PostgreSQL <codeph>currval()</codeph> and <codeph>lastval()</codeph> functions are not
      supported on Greenplum Database.</note>
    <p> The sequence to be operated on by a sequence-function call is specified by a
        <codeph>regclass</codeph> argument, which is just the OID of the sequence in the
        <codeph>pg_class</codeph> system catalog. You do not have to look up the OID by hand,
      however, since the <codeph>regclass</codeph> data type's input converter will do the work for
      you. Just write the sequence name enclosed in single quotes, so that it looks like a literal
      constant. To achieve some compatibility with the handling of ordinary SQL names, the string
      will be converted to lowercase unless it contains double quotes around the sequence name. Thus
      <codeblock>
nextval('foo')      <b>operates on sequence <codeph>foo</codeph></b>
nextval('FOO')      <b>operates on sequence <codeph>foo</codeph></b>
nextval('"Foo"')    <b>operates on sequence <codeph>Foo</codeph></b>
</codeblock>
      The sequence name can be schema-qualified if necessary:
      <codeblock>
nextval('myschema.foo')     <b>operates on <codeph>myschema.foo</codeph></b>
nextval('"myschema".foo')   <b>same as above</b>
nextval('foo')              <b>searches search path for <codeph>foo</codeph></b>
</codeblock>
    </p>
    <note>
      <p> Before PostgreSQL 8.1, the arguments of the sequence functions were of type
          <codeph>text</codeph>, not <codeph>regclass</codeph>, and the above-described conversion
        from a text string to an OID value would happen at run time during each call. For backwards
        compatibility, this facility still exists, but internally it is now handled as an implicit
        coercion from <codeph>text</codeph> to <codeph>regclass</codeph> before the function is
        invoked. </p>
      <p> When you write the argument of a sequence function as an unadorned literal string, it
        becomes a constant of type <codeph>regclass</codeph>. Since this is really just an OID, it
        will track the originally identified sequence despite later renaming, schema reassignment,
        etc. This "early binding" behavior is usually desirable for sequence references in column
        defaults and views. But sometimes you will want "late binding" where the sequence reference
        is resolved at run time. To get late-binding behavior, force the constant to be stored as a
          <codeph>text</codeph> constant instead of <codeph>regclass</codeph>:
        <codeblock>
nextval('foo'::text)      <b><codeph>foo</codeph> is looked up at runtime</b>
</codeblock></p>
      <p> Of course, the argument of a sequence function can be an expression as well as a constant.
        If it is a text expression then the implicit coercion will result in a run-time lookup. </p>
    </note>
    <p> The available sequence functions are: <parml>
        <plentry>
          <pt><codeph>nextval</codeph></pt>
          <pd>
            <p> Advance the sequence object to its next value and return that value. This is done
              atomically: even if multiple sessions execute <codeph>nextval</codeph> concurrently,
              each will safely receive a distinct sequence value. </p>
          </pd>
        </plentry>
        <plentry>
          <pt><codeph>setval</codeph></pt>
          <pd>
            <p> Reset the sequence object's counter value. The two-parameter form sets the
              sequence's <codeph>last_value</codeph> field to the specified value and sets its
                <codeph>is_called</codeph> field to <codeph>true</codeph>, meaning that the next
                <codeph>nextval</codeph> will advance the sequence before returning a value. In the
              three-parameter form, <codeph>is_called</codeph> may be set either
                <codeph>true</codeph> or <codeph>false</codeph>. If it's set to
                <codeph>false</codeph>, the next <codeph>nextval</codeph> will return exactly the
              specified value, and sequence advancement commences with the following
                <codeph>nextval</codeph>. For example,
              <screen>
SELECT setval('foo', 42);           <b>Next <codeph>nextval</codeph> will return 43</b>
SELECT setval('foo', 42, true);     <b>Same as above</b>
SELECT setval('foo', 42, false);    <b>Next <codeph>nextval</codeph> will return 42</b>
</screen>
              The result returned by <codeph>setval</codeph> is just the value of its second
              argument. </p>
          </pd>
        </plentry>
      </parml></p>
    <p> If a sequence object has been created with default parameters, <codeph>nextval</codeph>
      calls on it will return successive values beginning with 1. Other behaviors can be obtained by
      using special parameters in the <xref href="../sql_commands/CREATE_SEQUENCE.xml"/> command;
      see its command reference page for more information. </p>
    <note type="important">
      <p> To avoid blocking of concurrent transactions that obtain numbers from the same sequence, a
          <codeph>nextval</codeph> operation is never rolled back; that is, once a value has been
        fetched it is considered used, even if the transaction that did the <codeph>nextval</codeph>
        later aborts. This means that aborted transactions may leave unused "holes" in the sequence
        of assigned values. <codeph>setval</codeph> operations are never rolled back, either. </p>
    </note>
  </body>
</topic>
