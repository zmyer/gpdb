<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-info">
  <title>System Information Functions</title>
  <body>
    <p>
      <xref href="#functions-info/functions-info-session-table" format="dita"/> shows several
      functions that extract session and system information. </p>
    <p>All session information functions are classified STABLE. They should be used only in
      statements that run on the master. </p>
    <table id="functions-info-session-table">
      <title>Session Information Functions</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1.17*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="1.31*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>current_database()</codeph>
            </entry>
            <entry>
              <codeph>name</codeph>
            </entry>
            <entry>name of current database</entry>
          </row>
          <row>
            <entry>
              <codeph>current_schema()</codeph>
            </entry>
            <entry>
              <codeph>name</codeph>
            </entry>
            <entry>name of current schema</entry>
          </row>
          <row>
            <entry>
              <codeph>current_schemas(<i>boolean</i>)</codeph>
            </entry>
            <entry>
              <codeph>name[]</codeph>
            </entry>
            <entry>names of schemas in search path optionally including implicit schemas</entry>
          </row>
          <row>
            <entry>
              <codeph> current_user </codeph>
            </entry>
            <entry>
              <codeph>name</codeph>
            </entry>
            <entry>user name of current execution context</entry>
          </row>
          <row>
            <entry>
              <codeph>inet_client_addr()</codeph>
            </entry>
            <entry>
              <codeph>inet</codeph>
            </entry>
            <entry>address of the remote connection</entry>
          </row>
          <row>
            <entry>
              <codeph>inet_client_port()</codeph>
            </entry>
            <entry>
              <codeph>int</codeph>
            </entry>
            <entry>port of the remote connection</entry>
          </row>
          <row>
            <entry>
              <codeph>inet_server_addr()</codeph>
            </entry>
            <entry>
              <codeph>inet</codeph>
            </entry>
            <entry>address of the local connection</entry>
          </row>
          <row>
            <entry>
              <codeph>inet_server_port()</codeph>
            </entry>
            <entry>
              <codeph>int</codeph>
            </entry>
            <entry>port of the local connection</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_my_temp_schema()</codeph>
            </entry>
            <entry>
              <codeph>oid</codeph>
            </entry>
            <entry>OID of session's temporary schema, or 0 if none</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_is_other_temp_schema(<i>oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>is schema another session's temporary schema?</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_postmaster_start_time()</codeph>
            </entry>
            <entry>
              <codeph>timestamp with time zone</codeph>
            </entry>
            <entry>server start time</entry>
          </row>
          <row>
            <entry>
              <codeph>session_user </codeph>
            </entry>
            <entry>
              <codeph>name</codeph>
            </entry>
            <entry>session user name</entry>
          </row>
          <row>
            <entry>
              <codeph>user </codeph>
            </entry>
            <entry>
              <codeph>name</codeph>
            </entry>
            <entry>equivalent to <codeph>current_user</codeph></entry>
          </row>
          <row>
            <entry>
              <codeph>version()</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>Greenplum Database version information</entry>
          </row>
        </tbody>
      </tgroup>
    </table>



    <p> The <codeph>session_user</codeph> is normally the user who initiated the current database
      connection; but superusers can change this setting with <xref
        href="../sql_commands/SET_SESSION_AUTHORIZATION.xml#topic1"/>. The
        <codeph>current_user</codeph> is the user identifier that is applicable for permission
      checking. Normally, it is equal to the session user, but it can be changed with <xref
        href="../sql_commands/SET_ROLE.xml#topic1"/>. It also changes during the execution of
      functions with the attribute <codeph>SECURITY DEFINER</codeph>. In Unix parlance, the session
      user is the "real user" and the current user is the "effective user". </p>
    <note>
      <codeph>current_user</codeph>, <codeph>session_user</codeph>, and <codeph>user</codeph> have
      special syntactic status in SQL: they must be called without trailing parentheses. </note>
    <p>
      <codeph>current_schema</codeph> returns the name of the schema that is at the front of the
      search path (or a null value if the search path is empty). This is the schema that will be
      used for any tables or other named objects that are created without specifying a target
      schema. <codeph>current_schemas(boolean)</codeph> returns an array of the names of all schemas
      presently in the search path. The Boolean option determines whether or not implicitly included
      system schemas such as <codeph>pg_catalog</codeph> are included in the search path returned. </p>
    <note> The search path may be altered at run time. The command is:
      <codeblock>
SET search_path TO <i>schema</i> [, <i>schema</i>, ...]
</codeblock>
    </note>




    <p>
      <codeph>inet_client_addr</codeph> returns the IP address of the current client, and
        <codeph>inet_client_port</codeph> returns the port number. <codeph>inet_server_addr</codeph>
      returns the IP address on which the server accepted the current connection, and
        <codeph>inet_server_port</codeph> returns the port number. All these functions return NULL
      if the current connection is via a Unix-domain socket. </p>


    <p>
      <codeph>pg_my_temp_schema</codeph> returns the OID of the current session's temporary schema,
      or 0 if it has none (because it has not created any temporary tables).
        <codeph>pg_is_other_temp_schema</codeph> returns true if the given OID is the OID of any
      other session's temporary schema. (This can be useful, for example, to exclude other sessions'
      temporary tables from a catalog display.) </p>

    <p>
      <codeph>pg_postmaster_start_time</codeph> returns the <codeph>timestamp with time
        zone</codeph> when the server started. </p>

    <p>
      <codeph>version</codeph> returns a string describing the Greenplum Database server's version. </p>
    <p>
      <xref href="#functions-info/functions-info-access-table" format="dita"/> lists functions that
      allow the user to query object access privileges programmatically. See <xref scope="external"
        href="https://www.postgresql.org/docs/8.3/static/ddl-priv.html" format="html"
        >Privileges</xref> for more information about privileges. </p>
    <p>All access privilege inquiry functions are classified STABLE. They should not be used in
      statements that run on segments.</p>
    <table id="functions-info-access-table">
      <title>Access Privilege Inquiry Functions</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="2.76*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="1.41*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>has_database_privilege(<i>user</i>, <i>database</i>,
                <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does user have privilege for database</entry>
          </row>
          <row>
            <entry>
              <codeph>has_database_privilege(<i>database</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does current user have privilege for database</entry>
          </row>
          <row>
            <entry>
              <codeph>has_function_privilege(<i>user</i>, <i>function</i>,
                <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does user have privilege for function</entry>
          </row>
          <row>
            <entry>
              <codeph>has_function_privilege(<i>function</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does current user have privilege for function</entry>
          </row>
          <row>
            <entry>
              <codeph>has_language_privilege(<i>user</i>, <i>language</i>,
                <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does user have privilege for language</entry>
          </row>
          <row>
            <entry>
              <codeph>has_language_privilege(<i>language</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does current user have privilege for language</entry>
          </row>
          <row>
            <entry>
              <codeph>has_schema_privilege(<i>user</i>, <i>schema</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does user have privilege for schema</entry>
          </row>
          <row>
            <entry>
              <codeph>has_schema_privilege(<i>schema</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does current user have privilege for schema</entry>
          </row>
          <row>
            <entry>
              <codeph>has_table_privilege(<i>user</i>, <i>table</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does user have privilege for table</entry>
          </row>
          <row>
            <entry>
              <codeph>has_table_privilege(<i>table</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does current user have privilege for table</entry>
          </row>
          <row>
            <entry>
              <codeph>has_tablespace_privilege(<i>user</i>, <i>tablespace</i>,
                <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does user have privilege for tablespace</entry>
          </row>
          <row>
            <entry>
              <codeph>has_tablespace_privilege(<i>tablespace</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does current user have privilege for tablespace</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_has_role(<i>user</i>, <i>role</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does user have privilege for role</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_has_role(<i>role</i>, <i>privilege</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>does current user have privilege for role</entry>
          </row>
        </tbody>
      </tgroup>
    </table>






    <p>
      <codeph>has_database_privilege</codeph> checks whether a user can access a database in a
      particular way. The possibilities for its arguments are analogous to
        <codeph>has_table_privilege</codeph>. The desired access privilege type must evaluate to
        <codeph>CREATE</codeph>, <codeph>CONNECT</codeph>, <codeph>TEMPORARY</codeph>, or
        <codeph>TEMP</codeph> (which is equivalent to <codeph>TEMPORARY</codeph>). </p>
    <p>
      <codeph>has_function_privilege</codeph> checks whether a user can access a function in a
      particular way. The possibilities for its arguments are analogous to
        <codeph>has_table_privilege</codeph>. When specifying a function by a text string rather
      than by OID, the allowed input is the same as for the <codeph>regprocedure</codeph> data type
      (see <xref href="#datatype-oid" scope="external">Object Identifier Types</xref>). The desired
      access privilege type must evaluate to <codeph>EXECUTE</codeph>. An example is:
      <codeblock>
SELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');
</codeblock>
    </p>
    <p>
      <codeph>has_language_privilege</codeph> checks whether a user can access a procedural language
      in a particular way. The possibilities for its arguments are analogous to
        <codeph>has_table_privilege</codeph>. The desired access privilege type must evaluate to
        <codeph>USAGE</codeph>. </p>
    <p>
      <codeph>has_schema_privilege</codeph> checks whether a user can access a schema in a
      particular way. The possibilities for its arguments are analogous to
        <codeph>has_table_privilege</codeph>. The desired access privilege type must evaluate to
        <codeph>CREATE</codeph> or <codeph>USAGE</codeph>. </p>
    <p>
      <codeph>has_table_privilege</codeph> checks whether a user can access a table in a particular
      way. The user can be specified by name or by OID (<codeph>pg_authid.oid</codeph>), or if the
      argument is omitted <codeph>current_user</codeph> is assumed. The table can be specified by
      name or by OID. (Thus, there are actually six variants of
      <codeph>has_table_privilege</codeph>, which can be distinguished by the number and types of
      their arguments.) When specifying by name, the name can be schema-qualified if necessary. The
      desired access privilege type is specified by a text string, which must evaluate to one of the
      values <codeph>SELECT</codeph>, <codeph>INSERT</codeph>, <codeph>UPDATE</codeph>,
        <codeph>DELETE</codeph>, <codeph>REFERENCES</codeph>, or <codeph>TRIGGER</codeph>. (Case of
      the string is not significant, however.) An example is:
      <codeblock>
SELECT has_table_privilege('myschema.mytable', 'select');
</codeblock>
    </p>
    <p>
      <codeph>has_tablespace_privilege</codeph> checks whether a user can access a tablespace in a
      particular way. The possibilities for its arguments are analogous to
        <codeph>has_table_privilege</codeph>. The desired access privilege type must evaluate to
        <codeph>CREATE</codeph>. </p>
    <p>
      <codeph>pg_has_role</codeph> checks whether a user can access a role in a particular way. The
      possibilities for its arguments are analogous to <codeph>has_table_privilege</codeph>. The
      desired access privilege type must evaluate to <codeph>MEMBER</codeph> or
        <codeph>USAGE</codeph>. <codeph>MEMBER</codeph> denotes direct or indirect membership in the
      role (that is, the right to do <cmdname>SET ROLE</cmdname>), while <codeph>USAGE</codeph>
      denotes whether the privileges of the role are immediately available without doing
        <cmdname>SET ROLE</cmdname>. </p>
    <p> To test whether a user holds a grant option on the privilege, append <codeph>WITH GRANT
        OPTION</codeph> to the privilege key word; for example <codeph>'UPDATE WITH GRANT
        OPTION'</codeph>. </p>
    <p>
      <xref href="#functions-info/functions-info-schema-table" format="dita"/> shows functions that
      determine whether a certain object is <i>visible</i> in the current schema search path. A
      table is said to be visible if its containing schema is in the search path and no table of the
      same name appears earlier in the search path. This is equivalent to the statement that the
      table can be referenced by name without explicit schema qualification. For example, to list
      the names of all visible tables:
      <codeblock>
SELECT relname FROM pg_class WHERE pg_table_is_visible(oid);
</codeblock>
    </p>
    <p>All schema visibility inquiry functions are classified STABLE. They should not be used in
      statements that run on segments.</p>
    <table id="functions-info-schema-table">
      <title>Schema Visibility Inquiry Functions</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="2.49*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="1.27*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>pg_conversion_is_visible(<i>conversion_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>is conversion visible in search path</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_function_is_visible(<i>function_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>is function visible in search path</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_operator_is_visible(<i>operator_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>is operator visible in search path</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_opclass_is_visible(<i>opclass_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>is operator class visible in search path</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_table_is_visible(<i>table_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>is table visible in search path</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_type_is_visible(<i>type_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>boolean</codeph>
            </entry>
            <entry>is type (or domain) visible in search path</entry>
          </row>
        </tbody>
      </tgroup>
    </table>






    <p>
      <codeph>pg_conversion_is_visible</codeph>, <codeph>pg_function_is_visible</codeph>,
        <codeph>pg_operator_is_visible</codeph>, <codeph>pg_opclass_is_visible</codeph>,
        <codeph>pg_table_is_visible</codeph>, and <codeph>pg_type_is_visible</codeph> perform the
      visibility check for conversions, functions, operators, operator classes, tables, and types.
      Note that <codeph>pg_table_is_visible</codeph> can also be used with views, indexes and
      sequences; <codeph>pg_type_is_visible</codeph> can also be used with domains. For functions
      and operators, an object in the search path is visible if there is no object of the same name
        <i>and argument data type(s)</i> earlier in the path. For operator classes, both name and
      associated index access method are considered. </p>
    <p> All these functions require object OIDs to identify the object to be checked. If you want to
      test an object by name, it is convenient to use the OID alias types
      (<codeph>regclass</codeph>, <codeph>regtype</codeph>, <codeph>regprocedure</codeph>, or
        <codeph>regoperator</codeph>), for example
      <codeblock>
SELECT pg_type_is_visible('myschema.widget'::regtype);
</codeblock> Note that it
      would not make much sense to test an unqualified name in this way -- if the name can be
      recognized at all, it must be visible. </p>










    <p>
      <xref href="#functions-info/functions-info-catalog-table" format="dita"/> lists functions that
      extract information from the system catalogs. </p>
    <p>All system catalog information functions are classified STABLE. They should not be used in
      statements that run on segments.</p>
    <table id="functions-info-catalog-table">
      <title>System Catalog Information Functions</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="2.7*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="2.68*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>format_type(<i>type_oid</i>, <i>typemod</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get SQL name of a data type</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_constraintdef(<i>constraint_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get definition of a constraint</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_constraintdef(<i>constraint_oid</i>, <i>pretty_bool</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get definition of a constraint</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_expr(<i>expr_text</i>, <i>relation_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>decompile internal form of an expression, assuming that any Vars in it refer to
              the relation indicated by the second parameter</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_expr(<i>expr_text</i>, <i>relation_oid</i>,
                <i>pretty_bool</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>decompile internal form of an expression, assuming that any Vars in it refer to
              the relation indicated by the second parameter</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_indexdef(<i>index_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get <cmdname>CREATE INDEX</cmdname> command for index</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_indexdef(<i>index_oid</i>, <i>column_no</i>,
                <i>pretty_bool</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get <cmdname>CREATE INDEX</cmdname> command for index, or definition of just one
              index column when <i>column_no</i> is not zero</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_ruledef(<i>rule_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get <cmdname>CREATE RULE</cmdname> command for rule</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_ruledef(<i>rule_oid</i>, <i>pretty_bool</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get <cmdname>CREATE RULE</cmdname> command for rule</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_serial_sequence(<i>table_name</i>, <i>column_name</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get name of the sequence that a <codeph>serial</codeph> or
                <codeph>bigserial</codeph> column uses</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_triggerdef(<i>trigger_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get <cmdname>CREATE [ CONSTRAINT ] TRIGGER</cmdname> command for trigger</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_userbyid(<i>roleid</i>)</codeph>
            </entry>
            <entry>
              <codeph>name</codeph>
            </entry>
            <entry>get role name with given ID</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_viewdef(<i>view_name</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get underlying <cmdname>SELECT</cmdname> command for view
              (<i>deprecated</i>)</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_viewdef(<i>view_name</i>, <i>pretty_bool</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get underlying <cmdname>SELECT</cmdname> command for view
              (<i>deprecated</i>)</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_viewdef(<i>view_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get underlying <cmdname>SELECT</cmdname> command for view</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_get_viewdef(<i>view_oid</i>, <i>pretty_bool</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get underlying <cmdname>SELECT</cmdname> command for view</entry>
          </row>
          <row>
            <entry>
              <codeph>pg_tablespace_databases(<i>tablespace_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>setof oid</codeph>
            </entry>
            <entry>get the set of database OIDs that have objects in the tablespace</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>
      <codeph>format_type</codeph> returns the SQL name of a data type that is identified by its
      type OID and possibly a type modifier. Pass NULL for the type modifier if no specific modifier
      is known. </p>
    <p>
      <codeph>pg_get_constraintdef</codeph>, <codeph>pg_get_indexdef</codeph>,
        <codeph>pg_get_ruledef</codeph>, and <codeph>pg_get_triggerdef</codeph>, respectively
      reconstruct the creating command for a constraint, index, rule, or trigger. (Note that this is
      a decompiled reconstruction, not the original text of the command.)
        <codeph>pg_get_expr</codeph> decompiles the internal form of an individual expression, such
      as the default value for a column. It may be useful when examining the contents of system
      catalogs. <codeph>pg_get_viewdef</codeph> reconstructs the <cmdname>SELECT</cmdname> query
      that defines a view. Most of these functions come in two variants, one of which can optionally
      "pretty-print" the result. The pretty-printed format is more readable, but the default format
      is more likely to be interpreted the same way by future versions of Greenplum Database; avoid
      using pretty-printed output for dump purposes. Passing <codeph>false</codeph> for the
      pretty-print parameter yields the same result as the variant that does not have the parameter
      at all. </p>
    <p>
      <codeph>pg_get_serial_sequence</codeph> returns the name of the sequence associated with a
      column, or NULL if no sequence is associated with the column. The first input parameter is a
      table name with optional schema, and the second parameter is a column name. Because the first
      parameter is potentially a schema and table, it is not treated as a double-quoted identifier,
      meaning it is lowercased by default, while the second parameter, being just a column name, is
      treated as double-quoted and has its case preserved. The function returns a value suitably
      formatted for passing to the sequence functions (see <xref
        href="sequence.xml#functions-sequence"/>). This association can be modified or removed with
        <cmdname>ALTER SEQUENCE OWNED BY</cmdname>. (The function probably should have been called
        <codeph>pg_get_owned_sequence</codeph>; its name reflects the fact that it's typically used
      with <codeph>serial</codeph> or <codeph>bigserial</codeph> columns.) </p>
    <p>
      <codeph>pg_get_userbyid</codeph> extracts a role's name given its OID. </p>
    <p>
      <codeph>pg_tablespace_databases</codeph> allows a tablespace to be examined. It returns the
      set of OIDs of databases that have objects stored in the tablespace. If this function returns
      any rows, the tablespace is not empty and cannot be dropped. To display the specific objects
      populating the tablespace, you will need to connect to the databases identified by
        <codeph>pg_tablespace_databases</codeph> and query their <codeph>pg_class</codeph> catalogs. </p>




    <p> The functions shown in <xref href="#functions-info/functions-info-comment-table"
        format="dita"/> extract comments previously stored with the <xref
        href="../sql_commands/COMMENT.xml#topic1"/> command. A null value is returned if no comment
      could be found matching the specified parameters. </p>
    <p>All comment information functions are classified STABLE. They should not be used in
      statements that run on segments.</p>
    <table id="functions-info-comment-table">
      <title>Comment Information Functions</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="2.54*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="1.72*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Return Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>col_description(<i>table_oid</i>, <i>column_number</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get comment for a table column</entry>
          </row>
          <row>
            <entry>
              <codeph>obj_description(<i>object_oid</i>, <i>catalog_name</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get comment for a database object</entry>
          </row>
          <row>
            <entry>
              <codeph>obj_description(<i>object_oid</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get comment for a database object (<i>deprecated</i>)</entry>
          </row>
          <row>
            <entry>
              <codeph>shobj_description(<i>object_oid</i>, <i>catalog_name</i>)</codeph>
            </entry>
            <entry>
              <codeph>text</codeph>
            </entry>
            <entry>get comment for a shared database object</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>
      <codeph>col_description</codeph> returns the comment for a table column, which is specified by
      the OID of its table and its column number. <codeph>obj_description</codeph> cannot be used
      for table columns since columns do not have OIDs of their own. </p>
    <p> The two-parameter form of <codeph>obj_description</codeph> returns the comment for a
      database object specified by its OID and the name of the containing system catalog. For
      example, <codeph>obj_description(123456,'pg_class')</codeph> would retrieve the comment for a
      table with OID 123456. The one-parameter form of <codeph>obj_description</codeph> requires
      only the object OID. It is now deprecated since there is no guarantee that OIDs are unique
      across different system catalogs; therefore, the wrong comment could be returned. </p>
    <p>
      <codeph>shobj_description</codeph> is used just like <codeph>obj_description</codeph> only
      that it is used for retrieving comments on shared objects. Some system catalogs are global to
      all databases within each cluster and their descriptions are stored globally as well. </p>
  </body>
</topic>
