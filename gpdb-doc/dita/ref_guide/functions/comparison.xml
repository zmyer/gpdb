<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-comparison">
  <title>Comparison Operators</title>
  <shortdesc>Comparison operators evaluate their operands and return a true, false, or unknown
    result.</shortdesc>
  <body>
    <p>The usual comparison operators are available, shown in the following table: </p>
    <table id="functions-comparison-table">
      <title>Comparison Operators</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Operator</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <codeph>&lt;</codeph>
            </entry>
            <entry>less than</entry>
          </row>
          <row>
            <entry>
              <codeph>&gt;</codeph>
            </entry>
            <entry>greater than</entry>
          </row>
          <row>
            <entry>
              <codeph>&lt;=</codeph>
            </entry>
            <entry>less than or equal to</entry>
          </row>
          <row>
            <entry>
              <codeph>&gt;=</codeph>
            </entry>
            <entry>greater than or equal to</entry>
          </row>
          <row>
            <entry>
              <codeph>=</codeph>
            </entry>
            <entry>equal</entry>
          </row>
          <row>
            <entry>
              <codeph>&lt;&gt;</codeph> or <codeph>!=</codeph>
            </entry>
            <entry>not equal</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <note>
      <p> The <codeph>!=</codeph> operator is converted to <codeph>&lt;&gt;</codeph> in the parser
        stage. It is not possible to implement <codeph>!=</codeph> and <codeph>&lt;&gt;</codeph>
        operators that do different things. </p>
    </note>
    <p>Comparison operators are available for the data types where they makes sense. The comparison
      operators are binary operators that return values of type <codeph>boolean</codeph>;
      expressions like <codeph>1 &lt; 2 &lt; 3</codeph> are not valid (because there is no
        <codeph>&lt;</codeph> operator to compare a Boolean value with <codeph>3</codeph>).</p>
    <p> In addition to the comparison operators, the special <codeph>BETWEEN</codeph> construct is
      available. <codeblock>
<i>a</i> BETWEEN <i>x</i> AND <i>y</i>
</codeblock> is equivalent to
      <codeblock>
<i>a</i> &gt;= <i>x</i> AND <i>a</i> &lt;= <i>y</i>
</codeblock>Similarly,
      <codeblock>
<i>a</i> NOT BETWEEN <i>x</i> AND <i>y</i>
</codeblock> is equivalent to
      <codeblock>
<i>a</i> &lt; <i>x</i> OR <i>a</i> &gt; <i>y</i>
</codeblock>There is no
      difference between the two respective forms apart from the CPU cycles required to rewrite the
      first one into the second one internally. <codeph>BETWEEN SYMMETRIC</codeph> is the same as
        <codeph>BETWEEN</codeph> except there is no requirement that the argument to the left of
        <codeph>AND</codeph> be less than or equal to the argument on the right; the proper range is
      automatically determined. </p>
    <p>To check whether a value is or is not null, use the constructs
      <codeblock>
<i>expression</i> IS NULL
<i>expression</i> IS NOT NULL
</codeblock> or the
      equivalent, but nonstandard, constructs
      <codeblock>
<i>expression</i> ISNULL
<i>expression</i> NOTNULL
</codeblock>
    </p>
    <p> Do <i>not</i> write <codeph><i>expression</i> = NULL</codeph> because <codeph>NULL</codeph>
      is not "equal to" <codeph>NULL</codeph>. (The null value represents an unknown value, and it
      is not known whether two unknown values are equal.) This behavior conforms to the SQL
      standard. </p>
    <note type="tip">
      <p> Some applications may expect that <codeph><i>expression</i> = NULL</codeph> returns true
        if <i>expression</i> evaluates to the null value. It is highly recommended that these
        applications be modified to comply with the SQL standard. However, if that cannot be done
        the <varname>transform-null-equals</varname> configuration parameter is available. If it is
        enabled, Greenplum Database will convert <codeph>x = NULL</codeph> clauses to <codeph>x IS
          NULL</codeph>. </p>
    </note>
    <note>
      <p>If the <i>expression</i> is row-valued, then <codeph>IS NULL</codeph> is true when the row
        expression itself is null or when all the row's fields are null, while <codeph>IS NOT
          NULL</codeph> is true when the row expression itself is non-null and all the row's fields
        are non-null. This definition conforms to the SQL standard. </p>
    </note>
    <p>The ordinary comparison operators yield null (signifying "unknown") when either input is
      null. Another way to do comparisons is with the <codeph>IS [NOT] DISTINCT FROM</codeph>
      construct:
      <codeblock>
<i>expression</i> IS DISTINCT FROM <i>expression</i>
<i>expression</i> IS NOT DISTINCT FROM <i>expression</i>
</codeblock>
      For non-null inputs, <codeph>IS DISTINCT FROM</codeph> is the same as the
        <codeph>&lt;&gt;</codeph> operator. However, when both inputs are null it will return false,
      and when just one input is null it will return true. Similarly, <codeph>IS NOT DISTINCT
        FROM</codeph> is identical to <codeph>=</codeph> for non-null inputs, but it returns true
      when both inputs are null, and false when only one input is null. Thus, these constructs
      effectively act as though null were a normal data value, rather than "unknown". </p>
    <p> Boolean values can also be tested using the constructs
      <codeblock>
<i>expression</i> IS TRUE
<i>expression</i> IS NOT TRUE
<i>expression</i> IS FALSE
<i>expression</i> IS NOT FALSE
<i>expression</i> IS UNKNOWN
<i>expression</i> IS NOT UNKNOWN
</codeblock>
      These will always return true or false, never a null value, even when the operand is null. A
      null input is treated as the logical value "unknown". Notice that <codeph>IS UNKNOWN</codeph>
      and <codeph>IS NOT UNKNOWN</codeph> are effectively the same as <codeph>IS NULL</codeph> and
        <codeph>IS NOT NULL</codeph>, respectively, except that the input expression must be of
      Boolean type. </p>
  </body>
</topic>
