<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_okc_zth_mp">
  <title>Window Functions</title>
  <shortdesc>A window function is an aggregate function applied to a partition of the result set. </shortdesc>
  <body>
    <p>Window expressions allow application developers to more easily compose complex online
      analytical processing (OLAP) queries using standard SQL commands. For example, with window
      expressions, users can calculate moving averages or sums over various intervals, reset
      aggregations and ranks as selected column values change, and express complex ratios in simple
      terms.</p>
    <p>A window expression represents the application of a <i>window function</i> applied to a
        <i>window frame</i>, which is defined in an <codeph>OVER</codeph> clause. A window partition
      is a set of rows that are grouped together to apply a window function. Unlike aggregate
      functions, which return a result value for each group of rows, window functions return a
      result value for every row, but that value is calculated with respect to the rows in a
      particular window partition. If no partition is specified, the window function is computed
      over the complete intermediate result set.</p>
    <p>The following built-in window functions are Greenplum extensions to the PostgreSQL database.
      All window functions are <i>immutable</i>. For more information about window functions, see
        <xref href="http://gpdb-docs-nginx.cfapps.io/4320/admin_guide/query.html#topic13"
        format="html" scope="external">Window Expressions</xref>.</p>
    <table id="in164369">
      <title>Window functions</title>
      <tgroup cols="4">
        <colspec colname="col1" colnum="1" colwidth="87.46*"/>
        <colspec colname="col2" colnum="2" colwidth="59*"/>
        <colspec colname="col3" colnum="3" colwidth="180*"/>
        <colspec colname="col4" colnum="4" colwidth="121.77*"/>
        <thead>
          <row>
            <entry colname="col1">Function</entry>
            <entry colname="col2">Return Type</entry>
            <entry colname="col3">Full Syntax</entry>
            <entry colname="col4">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">
              <codeph>cume_dist()</codeph>
            </entry>
            <entry colname="col2">
              <codeph>double precision</codeph>
            </entry>
            <entry colname="col3">
              <codeph>CUME_DIST() OVER ( [PARTITION BY ] ORDER BY <i>expr</i></codeph>
            </entry>
            <entry colname="col4">Calculates the cumulative distribution of a value in a group of
              values. Rows with equal values always evaluate to the same cumulative distribution
              value.</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>dense_rank()</codeph>
            </entry>
            <entry colname="col2">
              <codeph>bigint</codeph>
            </entry>
            <entry colname="col3">
              <codeph>DENSE_RANK () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr</i>
                )</codeph>
            </entry>
            <entry colname="col4">Computes the rank of a row in an ordered group of rows without
              skipping rank values. Rows with equal values are given the same rank value.</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>first_value(<i>expr</i>)</codeph>
            </entry>
            <entry colname="col2">same as input <ph>expr</ph> type</entry>
            <entry colname="col3">
              <codeph>FIRST_VALUE(<i/>) OVER ([PARTITION BY <i>expr</i>] ORDER BY [ROWS|RANGE
                  <i>frame_expr</i>] )</codeph>
            </entry>
            <entry colname="col4">Returns the first value in an ordered set of values.</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>lag(<i>expr</i> [,<i>offset</i>] [,<i>default</i>])</codeph>
            </entry>
            <entry colname="col2">same as input <i>expr</i> type</entry>
            <entry colname="col3">
              <codeph>LAG( <i>expr</i> [, <i>offset</i> ] [, <i>default</i> ]) OVER ( [PARTITION BY
                  <i>expr</i> ] ORDER BY <i>expr</i> )</codeph>
            </entry>
            <entry colname="col4">Provides access to more than one row of the same table without
              doing a self join. Given a series of rows returned from a query and a position of the
              cursor, <codeph>LAG</codeph> provides access to a row at a given physical offset prior
              to that position. The default <codeph>offset</codeph> is 1. <i>default</i> sets the
              value that is returned if the offset goes beyond the scope of the window. If
                <i>default</i> is not specified, the default value is null.</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>last_value<i>expr</i></codeph>
            </entry>
            <entry colname="col2">same as input <i>expr</i> type</entry>
            <entry colname="col3">
              <codeph>LAST_VALUE(<i>expr</i>) OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr</i>
                [ROWS|RANGE <i>frame_expr</i>] )</codeph>
            </entry>
            <entry colname="col4">Returns the last value in an ordered set of values.</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>
                <codeph>lead(<i>expr</i> [,<i>offset</i>] [,<i>default</i>])</codeph>
              </codeph>
            </entry>
            <entry colname="col2">same as input <i>expr</i> type</entry>
            <entry colname="col3">
              <codeph>LEAD(<i>expr </i>[,<i>offset</i>] [,<i>expr</i><i>default</i>]) OVER (
                [PARTITION BY <i>expr</i>] ORDER BY <i>expr</i> )</codeph>
            </entry>
            <entry colname="col4">Provides access to more than one row of the same table without
              doing a self join. Given a series of rows returned from a query and a position of the
              cursor, <codeph>lead</codeph> provides access to a row at a given physical offset
              after that position. If <i>offset</i> is not specified, the default offset is 1.
                <i>default</i> sets the value that is returned if the offset goes beyond the scope
              of the window. If <i>default</i> is not specified, the default value is null.</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>ntile(<i>expr</i>)</codeph>
            </entry>
            <entry colname="col2">
              <codeph>bigint</codeph>
            </entry>
            <entry colname="col3">
              <codeph>NTILE(<i>expr</i>) OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr</i>
                )</codeph>
            </entry>
            <entry colname="col4">Divides an ordered data set into a number of buckets (as defined
              by <i>expr</i>) and assigns a bucket number to each row.</entry>
          </row>
          <row>
            <entry colname="col1"><codeph>percent_rank(</codeph>)</entry>
            <entry colname="col2">
              <codeph>double precision</codeph>
            </entry>
            <entry colname="col3">
              <codeph>PERCENT_RANK () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr
                </i>)</codeph>
            </entry>
            <entry colname="col4">Calculates the rank of a hypothetical row <codeph>R</codeph> minus
              1, divided by 1 less than the number of rows being evaluated (within a window
              partition).</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>rank()</codeph>
            </entry>
            <entry colname="col2">
              <codeph>bigint</codeph>
            </entry>
            <entry colname="col3">
              <codeph>RANK () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr </i>)</codeph>
            </entry>
            <entry colname="col4">Calculates the rank of a row in an ordered group of values. Rows
              with equal values for the ranking criteria receive the same rank. The number of tied
              rows are added to the rank number to calculate the next rank value. Ranks may not be
              consecutive numbers in this case.</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>row_number()</codeph>
            </entry>
            <entry colname="col2">
              <codeph>bigint</codeph>
            </entry>
            <entry colname="col3">
              <codeph>ROW_NUMBER () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr
                </i>)</codeph>
            </entry>
            <entry colname="col4">Assigns a unique number to each row to which it is applied (either
              each row in a window partition or each row of the query).</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
</topic>
