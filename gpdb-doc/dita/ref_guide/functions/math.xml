<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="math_functions">
 <title>Mathematical Functions and Operators</title>
 <shortdesc>Mathematical functions and operators are used in arthmetic expressions. </shortdesc>
 <body>
  <p> Mathematical operators are provided for many Greenplum Database types. For types without
   common mathematical conventions for all possible permutations (e.g., date/time types) we describe
   the actual behavior in subsequent sections. </p>
  <p>The following table shows the available mathematical operators. </p>
  <table id="functions-math-op-table">
   <title>Mathematical Operators</title>
   <tgroup cols="4">
    <colspec colnum="1" colname="c1" colwidth="1*"/>
    <colspec colnum="2" colname="c2" colwidth="3*"/>
    <colspec colnum="3" colname="c3" colwidth="2*"/>
    <colspec colnum="4" colname="c4" colwidth="1*"/>
    <thead>
     <row>
      <entry>Operator</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <codeph>+</codeph>
      </entry>
      <entry>addition</entry>
      <entry>
       <codeph>2 + 3</codeph>
      </entry>
      <entry>
       <codeph>5</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>-</codeph>
      </entry>
      <entry>subtraction</entry>
      <entry>
       <codeph>2 - 3</codeph>
      </entry>
      <entry>
       <codeph>-1</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>*</codeph>
      </entry>
      <entry>multiplication</entry>
      <entry>
       <codeph>2 * 3</codeph>
      </entry>
      <entry>
       <codeph>6</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>/</codeph>
      </entry>
      <entry>division (integer division truncates results)</entry>
      <entry>
       <codeph>4 / 2</codeph>
      </entry>
      <entry>
       <codeph>2</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>%</codeph>
      </entry>
      <entry>modulo (remainder)</entry>
      <entry>
       <codeph>5 % 4</codeph>
      </entry>
      <entry>
       <codeph>1</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>^</codeph>
      </entry>
      <entry>exponentiation</entry>
      <entry>
       <codeph>2.0 ^ 3.0</codeph>
      </entry>
      <entry>
       <codeph>8</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>|/</codeph>
      </entry>
      <entry>square root</entry>
      <entry>
       <codeph>|/ 25.0</codeph>
      </entry>
      <entry>
       <codeph>5</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>||/</codeph>
      </entry>
      <entry>cube root</entry>
      <entry>
       <codeph>||/ 27.0</codeph>
      </entry>
      <entry>
       <codeph>3</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>!</codeph>
      </entry>
      <entry>factorial</entry>
      <entry>
       <codeph>5 !</codeph>
      </entry>
      <entry>
       <codeph>120</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>!!</codeph>
      </entry>
      <entry>factorial (prefix operator)</entry>
      <entry>
       <codeph>!! 5</codeph>
      </entry>
      <entry>
       <codeph>120</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>@</codeph>
      </entry>
      <entry>absolute value</entry>
      <entry>
       <codeph>@ -5.0</codeph>
      </entry>
      <entry>
       <codeph>5</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>&amp;</codeph>
      </entry>
      <entry>bitwise AND</entry>
      <entry>
       <codeph>91 &amp; 15</codeph>
      </entry>
      <entry>
       <codeph>11</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>|</codeph>
      </entry>
      <entry>bitwise OR</entry>
      <entry>
       <codeph>32 | 3</codeph>
      </entry>
      <entry>
       <codeph>35</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>#</codeph>
      </entry>
      <entry>bitwise XOR</entry>
      <entry>
       <codeph>17 # 5</codeph>
      </entry>
      <entry>
       <codeph>20</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>~</codeph>
      </entry>
      <entry>bitwise NOT</entry>
      <entry>
       <codeph>~1</codeph>
      </entry>
      <entry>
       <codeph>-2</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>&lt;&lt;</codeph>
      </entry>
      <entry>bitwise shift left</entry>
      <entry>
       <codeph>1 &lt;&lt; 4</codeph>
      </entry>
      <entry>
       <codeph>16</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>&gt;&gt;</codeph>
      </entry>
      <entry>bitwise shift right</entry>
      <entry>
       <codeph>8 &gt;&gt; 2</codeph>
      </entry>
      <entry>
       <codeph>2</codeph>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <p> The bitwise operators work only on integral data types, whereas the others are available for
   all numeric data types. The bitwise operators are also available for the bit string types
    <codeph>bit</codeph> and <codeph>bit varying</codeph>, as shown in <xref
    href="bit_string.xml#functions-bitstring/functions-bit-string-op-table"/>. </p>
  <p>
   <xref href="#math_functions/functions-math-func-table" format="dita" type="table"/> shows the
   available mathematical functions. In the table, <codeph>dp</codeph> indicates <codeph>double
    precision</codeph>. Many of these functions are provided in multiple forms with different
   argument types. Except where noted, any given form of a function returns the same data type as
   its argument. The functions working with <codeph>double precision</codeph> data are mostly
   implemented on top of the host system's C library; accuracy and behavior in boundary cases may
   therefore vary depending on the host system.</p>
  <p>The <codeph>random()</codeph> and <codeph>setseed()</codeph> functions are classified as
    <codeph>VOLATILE</codeph> in Greenplum Database, and should not be used at the segment
   level.</p>
  <table id="functions-math-func-table">
   <title>Mathematical Functions</title>
   <tgroup cols="5">
    <thead>
     <row>
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <codeph>abs(<i>x</i>)</codeph>
      </entry>
      <entry>(same as <i>x</i>)</entry>
      <entry>absolute value</entry>
      <entry>
       <codeph>abs(-17.4)</codeph>
      </entry>
      <entry>
       <codeph>17.4</codeph>
      </entry>
     </row>

     <row>
      <entry>
       <codeph><codeph>cbrt</codeph>(<codeph>dp</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>dp</codeph>
      </entry>
      <entry>cube root</entry>
      <entry>
       <codeph>cbrt(27.0)</codeph>
      </entry>
      <entry>
       <codeph>3</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>ceil(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>smallest integer not less than argument</entry>
      <entry>
       <codeph>ceil(-42.8)</codeph>
      </entry>
      <entry>
       <codeph>-42</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>ceiling(dp</codeph> or <codeph>numeric)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>smallest integer not less than argument (alias for <codeph>ceil</codeph>)</entry>
      <entry>
       <codeph>ceiling(-95.3)</codeph>
      </entry>
      <entry>
       <codeph>-95</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>degrees</codeph>(<codeph>dp</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>dp</codeph>
      </entry>
      <entry>radians to degrees</entry>
      <entry>
       <codeph>degrees(0.5)</codeph>
      </entry>
      <entry>
       <codeph>28.6478897565412</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>exp</codeph>(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>exponential</entry>
      <entry>
       <codeph>exp(1.0)</codeph>
      </entry>
      <entry>
       <codeph>2.71828182845905</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph>floor(<i>dp</i> or <i>numeric</i>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>largest integer not greater than argument</entry>
      <entry>
       <codeph>floor(-42.8)</codeph>
      </entry>
      <entry>
       <codeph>-43</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>ln</codeph>(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>natural logarithm</entry>
      <entry>
       <codeph>ln(2.0)</codeph>
      </entry>
      <entry>
       <codeph>0.693147180559945</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>log</codeph>(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>base 10 logarithm</entry>
      <entry>
       <codeph>log(100.0)</codeph>
      </entry>
      <entry>
       <codeph>2</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>log</codeph>(<i>b</i>
        <codeph>numeric</codeph>, <i>x</i>
        <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>numeric</codeph>
      </entry>
      <entry>logarithm to base <i>b</i></entry>
      <entry>
       <codeph>log(2.0, 64.0)</codeph>
      </entry>
      <entry>
       <codeph>6.0000000000</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>mod</codeph>(<i>y</i>, <i>x</i>)</codeph>
      </entry>
      <entry>(same as argument types)</entry>
      <entry>remainder of <i>y</i>/<i>x</i></entry>
      <entry>
       <codeph>mod(9,4)</codeph>
      </entry>
      <entry>
       <codeph>1</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>pi</codeph>()</codeph>
      </entry>
      <entry>
       <codeph>dp</codeph>
      </entry>
      <entry>"pi" constant</entry>
      <entry>
       <codeph>pi()</codeph>
      </entry>
      <entry>
       <codeph>3.14159265358979</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>power</codeph>(<i>a</i>
        <codeph>dp</codeph>, <i>b</i>
        <codeph>dp</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>dp</codeph>
      </entry>
      <entry><i>a</i> raised to the power of <i>b</i></entry>
      <entry>
       <codeph>power(9.0, 3.0)</codeph>
      </entry>
      <entry>
       <codeph>729</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>power</codeph>(<i>a</i>
        <codeph>numeric</codeph>, <i>b</i>
        <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>numeric</codeph>
      </entry>
      <entry><i>a</i> raised to the power of <i>b</i></entry>
      <entry>
       <codeph>power(9.0, 3.0)</codeph>
      </entry>
      <entry>
       <codeph>729</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>radians</codeph>(<codeph>dp</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>dp</codeph>
      </entry>
      <entry>degrees to radians</entry>
      <entry>
       <codeph>radians(45.0)</codeph>
      </entry>
      <entry>
       <codeph>0.785398163397448</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>random</codeph>()</codeph>
       <i> (volatile)</i>
      </entry>
      <entry>
       <codeph>dp</codeph>
      </entry>
      <entry>random value in the range 0.0 &lt;= x &lt; 1.0</entry>
      <entry>
       <codeph>random()</codeph>
      </entry>
      <entry/>
     </row>
     <row>
      <entry>
       <codeph><codeph>round</codeph>(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>round to nearest integer</entry>
      <entry>
       <codeph>round(42.4)</codeph>
      </entry>
      <entry>
       <codeph>42</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>round</codeph>(<i>v</i>
        <codeph>numeric</codeph>, <i>s</i>
        <codeph>int</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>numeric</codeph>
      </entry>
      <entry>round to <i>s</i> decimal places</entry>
      <entry>
       <codeph>round(42.4382, 2)</codeph>
      </entry>
      <entry>
       <codeph>42.44</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>setseed</codeph>(<codeph>dp</codeph>)</codeph>
       <i>(volatile)</i>
      </entry>
      <entry>
       <codeph>int</codeph>
      </entry>
      <entry>set seed for subsequent <codeph>random()</codeph> calls (value between 0 and
       1.0)</entry>
      <entry>
       <codeph>setseed(0.54823)</codeph>
      </entry>
      <entry>
       <codeph>1177314959</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>sign</codeph>(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>sign of the argument (-1, 0, +1)</entry>
      <entry>
       <codeph>sign(-8.4)</codeph>
      </entry>
      <entry>
       <codeph>-1</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>sqrt</codeph>(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>square root</entry>
      <entry>
       <codeph>sqrt(2.0)</codeph>
      </entry>
      <entry>
       <codeph>1.4142135623731</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>trunc</codeph>(<codeph>dp</codeph> or <codeph>numeric</codeph>)</codeph>
      </entry>
      <entry>(same as input)</entry>
      <entry>truncate toward zero</entry>
      <entry>
       <codeph>trunc(42.8)</codeph>
      </entry>
      <entry>
       <codeph>42</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>trunc</codeph>(<i>v</i>
        <codeph>numeric</codeph>, <i>s</i>
        <codeph>int</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>numeric</codeph>
      </entry>
      <entry>truncate to <i>s</i> decimal places</entry>
      <entry>
       <codeph>trunc(42.4382, 2)</codeph>
      </entry>
      <entry>
       <codeph>42.43</codeph>
      </entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>width_bucket</codeph>(<i>op</i>
        <codeph>numeric</codeph>, <i>b1</i>
        <codeph>numeric</codeph>, <i>b2</i>
        <codeph>numeric</codeph>, <i>count</i>
        <codeph>int</codeph>)</codeph>
      </entry>
      <entry>
       <codeph>int</codeph>
      </entry>
      <entry>return the bucket to which <i>operand</i> would be assigned in an equidepth histogram
       with <i>count</i> buckets, in the range <i>b1</i> to <i>b2</i></entry>
      <entry>
       <codeph>width_bucket(5.35, 0.024, 10.06, 5)</codeph>
      </entry>
      <entry>
       <codeph>3</codeph>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <p> Finally, <xref href="#math_functions/functions-math-trig-table" format="dita"/> shows the
   available trigonometric functions. All trigonometric functions take arguments and return values
   of type <codeph>double precision</codeph>. </p>
  <table id="functions-math-trig-table">
   <title>Trigonometric Functions</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Function</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <codeph><codeph>acos</codeph>(<i>x</i>)</codeph>
      </entry>
      <entry>inverse cosine</entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>asin</codeph>(<i>x</i>)</codeph>
      </entry>
      <entry>inverse sine</entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>atan</codeph>(<i>x</i>)</codeph>
      </entry>
      <entry>inverse tangent</entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>atan2</codeph>(<i>x</i>, <i>y</i>)</codeph>
      </entry>
      <entry>inverse tangent of <codeph><i>x</i>/<i>y</i></codeph></entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>cos</codeph>(<i>x</i>)</codeph>
      </entry>
      <entry>cosine</entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>cot</codeph>(<i>x</i>)</codeph>
      </entry>
      <entry>cotangent</entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>sin</codeph>(<i>x</i>)</codeph>
      </entry>
      <entry>sine</entry>
     </row>
     <row>
      <entry>
       <codeph><codeph>tan</codeph>(<i>x</i>)</codeph>
      </entry>
      <entry>tangent</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </body>
</topic>
