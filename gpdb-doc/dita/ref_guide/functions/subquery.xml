<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions-subquery">
  <title>Subquery Expressions</title>
  <body>
    <p> This section describes the SQL-compliant subquery expressions available in Greenplum
      Database. All of the expression forms documented in this section return Boolean (true/false)
      results. </p>
    <section>
      <title> EXISTS </title>
      <codeblock>
EXISTS (<i>subquery</i>)
</codeblock>
      <p> The argument of <codeph>EXISTS</codeph> is an arbitrary <cmdname>SELECT</cmdname>
        statement, or <i>subquery</i>. The subquery is evaluated to determine whether it returns any
        rows. If it returns at least one row, the result of <codeph>EXISTS</codeph> is "true"; if
        the subquery returns no rows, the result of <codeph>EXISTS</codeph> is "false". </p>
      <p> The subquery can refer to variables from the surrounding query, which will act as
        constants during any one evaluation of the subquery. </p>
      <p> The subquery will generally only be executed far enough to determine whether at least one
        row is returned, not all the way to completion. It is unwise to write a subquery that has
        any side effects (such as calling sequence functions); whether the side effects occur or not
        may be difficult to predict. </p>
      <p> Since the result depends only on whether any rows are returned, and not on the contents of
        those rows, the output list of the subquery is normally uninteresting. A common coding
        convention is to write all <codeph>EXISTS</codeph> tests in the form <codeph>EXISTS(SELECT 1
          WHERE ...)</codeph>. There are exceptions to this rule however, such as subqueries that
        use <codeph>INTERSECT</codeph>. </p>
      <p> This simple example is like an inner join on <codeph>col2</codeph>, but it produces at
        most one output row for each <codeph>tab1</codeph> row, even if there are multiple matching
          <codeph>tab2</codeph> rows:
        <screen>
SELECT col1 FROM tab1
    WHERE EXISTS(SELECT 1 FROM tab2 WHERE col2 = tab1.col2);
</screen>
      </p>
    </section>
    <section>
      <title> IN </title>
      <codeblock>
<i>expression</i> IN (<i>subquery</i>)
</codeblock>
      <p> The right-hand side is a parenthesized subquery, which must return exactly one column. The
        left-hand expression is evaluated and compared to each row of the subquery result. The
        result of <codeph>IN</codeph> is "true" if any equal subquery row is found. The result is
        "false" if no equal row is found (including the special case where the subquery returns no
        rows). </p>
      <p> Note that if the left-hand expression yields null, or if there are no equal right-hand
        values and at least one right-hand row yields null, the result of the <codeph>IN</codeph>
        construct will be null, not false. This is in accordance with SQL's normal rules for Boolean
        combinations of null values. </p>
      <p> As with <codeph>EXISTS</codeph>, it's unwise to assume that the subquery will be evaluated
        completely. </p>
      <codeblock>
<i>row_constructor</i> IN (<i>subquery</i>)
</codeblock>
      <p> The left-hand side of this form of <codeph>IN</codeph> is a row constructor, as described
        in <xref href="#sql-syntax/sql-syntax-row-constructors" scope="external"/>. The right-hand
        side is a parenthesized subquery, which must return exactly as many columns as there are
        expressions in the left-hand row. The left-hand expressions are evaluated and compared
        row-wise to each row of the subquery result. The result of <codeph>IN</codeph> is "true" if
        any equal subquery row is found. The result is "false" if no equal row is found (including
        the special case where the subquery returns no rows). </p>
      <p> As usual, null values in the rows are combined per the normal rules of SQL Boolean
        expressions. Two rows are considered equal if all their corresponding members are non-null
        and equal; the rows are unequal if any corresponding members are non-null and unequal;
        otherwise the result of that row comparison is unknown (null). If all the per-row results
        are either unequal or null, with at least one null, then the result of <codeph>IN</codeph>
        is null. </p>
    </section>
    <section>
      <title> NOT IN </title>
      <codeblock>
<i>expression</i> NOT IN (<i>subquery</i>)
</codeblock>
      <p> The right-hand side is a parenthesized subquery, which must return exactly one column. The
        left-hand expression is evaluated and compared to each row of the subquery result. The
        result of <codeph>NOT IN</codeph> is "true" if only unequal subquery rows are found
        (including the special case where the subquery returns no rows). The result is "false" if
        any equal row is found. </p>
      <p> Note that if the left-hand expression yields null, or if there are no equal right-hand
        values and at least one right-hand row yields null, the result of the <codeph>NOT
          IN</codeph> construct will be null, not true. This is in accordance with SQL's normal
        rules for Boolean combinations of null values. </p>
      <p> As with <codeph>EXISTS</codeph>, it's unwise to assume that the subquery will be evaluated
        completely. </p>
      <codeblock>
<i>row_constructor</i> NOT IN (<i>subquery</i>)
</codeblock>
      <p> The left-hand side of this form of <codeph>NOT IN</codeph> is a row constructor, as
        described in <xref href="#sql-syntax/sql-syntax-row-constructors" scope="external"/>. The
        right-hand side is a parenthesized subquery, which must return exactly as many columns as
        there are expressions in the left-hand row. The left-hand expressions are evaluated and
        compared row-wise to each row of the subquery result. The result of <codeph>NOT IN</codeph>
        is "true" if only unequal subquery rows are found (including the special case where the
        subquery returns no rows). The result is "false" if any equal row is found. </p>
      <p> As usual, null values in the rows are combined per the normal rules of SQL Boolean
        expressions. Two rows are considered equal if all their corresponding members are non-null
        and equal; the rows are unequal if any corresponding members are non-null and unequal;
        otherwise the result of that row comparison is unknown (null). If all the per-row results
        are either unequal or null, with at least one null, then the result of <codeph>NOT
          IN</codeph> is null. </p>
    </section>
    <section>
      <title>ANY/SOME</title>
      <codeblock>
<i>expression</i> <i>operator</i> ANY (<i>subquery</i>)
<i>expression</i> <i>operator</i> SOME (<i>subquery</i>)
</codeblock>
      <p> The right-hand side is a parenthesized subquery, which must return exactly one column. The
        left-hand expression is evaluated and compared to each row of the subquery result using the
        given <i>operator</i>, which must yield a Boolean result. The result of <codeph>ANY</codeph>
        is "true" if any true result is obtained. The result is "false" if no true result is found
        (including the special case where the subquery returns no rows). </p>
      <p>
        <codeph>SOME</codeph> is a synonym for <codeph>ANY</codeph>. <codeph>IN</codeph> is
        equivalent to <codeph>= ANY</codeph>. </p>
      <p> Note that if there are no successes and at least one right-hand row yields null for the
        operator's result, the result of the <codeph>ANY</codeph> construct will be null, not false.
        This is in accordance with SQL's normal rules for Boolean combinations of null values. </p>
      <p> As with <codeph>EXISTS</codeph>, it's unwise to assume that the subquery will be evaluated
        completely. </p>
      <codeblock>
<i>row_constructor</i> <i>operator</i> ANY (<i>subquery</i>)
<i>row_constructor</i> <i>operator</i> SOME (<i>subquery</i>)
</codeblock>
      <p> The left-hand side of this form of <codeph>ANY</codeph> is a row constructor, as described
        in <xref href="#sql-syntax/sql-syntax-row-constructors" scope="external"/>. The right-hand
        side is a parenthesized subquery, which must return exactly as many columns as there are
        expressions in the left-hand row. The left-hand expressions are evaluated and compared
        row-wise to each row of the subquery result, using the given <i>operator</i>. The result of
          <codeph>ANY</codeph> is "true" if the comparison returns true for any subquery row. The
        result is "false" if the comparison returns false for every subquery row (including the
        special case where the subquery returns no rows). The result is NULL if the comparison does
        not return true for any row, and it returns NULL for at least one row. </p>
      <p> See <xref href="comparisons.xml"/> for details about the meaning of a row-wise comparison.
      </p>
    </section>
    <section>
      <title>ALL</title>
      <codeblock>
<i>expression</i> <i>operator</i> ALL (<i>subquery</i>)
</codeblock>
      <p> The right-hand side is a parenthesized subquery, which must return exactly one column. The
        left-hand expression is evaluated and compared to each row of the subquery result using the
        given <i>operator</i>, which must yield a Boolean result. The result of <codeph>ALL</codeph>
        is "true" if all rows yield true (including the special case where the subquery returns no
        rows). The result is "false" if any false result is found. The result is NULL if the
        comparison does not return false for any row, and it returns NULL for at least one row. </p>
      <p>
        <codeph>NOT IN</codeph> is equivalent to <codeph>&lt;&gt; ALL</codeph>. </p>
      <p> As with <codeph>EXISTS</codeph>, it's unwise to assume that the subquery will be evaluated
        completely. </p>
      <codeblock>
<i>row_constructor</i> <i>operator</i> ALL (<i>subquery</i>)
</codeblock>
      <p> The left-hand side of this form of <codeph>ALL</codeph> is a row constructor, as described
        in <xref href="#sql-syntax-row-constructors" scope="external">Row Constructors</xref>. The
        right-hand side is a parenthesized subquery, which must return exactly as many columns as
        there are expressions in the left-hand row. The left-hand expressions are evaluated and
        compared row-wise to each row of the subquery result, using the given <i>operator</i>. The
        result of <codeph>ALL</codeph> is "true" if the comparison returns true for all subquery
        rows (including the special case where the subquery returns no rows). The result is "false"
        if the comparison returns false for any subquery row. The result is NULL if the comparison
        does not return false for any subquery row, and it returns NULL for at least one row. </p>
      <p> See <xref href="comparisons.xml#functions-comparisons"/> for details about the meaning of
        a row-wise comparison. </p>
    </section>
    <section>
      <title>Row-wise Comparison</title>
      <codeblock>
<i>row_constructor</i> <i>operator</i> (<i>subquery</i>)
</codeblock>
      <p> The left-hand side is a row constructor, as described in <xref
          href="#sql-syntax-row-constructors" scope="external"/>. The right-hand side is a
        parenthesized subquery, which must return exactly as many columns as there are expressions
        in the left-hand row. Furthermore, the subquery cannot return more than one row. (If it
        returns zero rows, the result is taken to be null.) The left-hand side is evaluated and
        compared row-wise to the single subquery result row. </p>
      <p> See <xref href="comparisons.xml#functions-comparisons"/> for details about the meaning of
        a row-wise comparison. </p>
    </section>
  </body>
</topic>
