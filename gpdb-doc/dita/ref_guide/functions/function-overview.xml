<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="functions">
  <title>About Functions and Operators</title>
  <shortdesc>Functions and operators have many uses in SQL statements, including filtering,
    aggregating, transforming, and formatting data. The topics in this section describe the
    functions that are available in Greenplum Database. </shortdesc>
  <body>
    <p>PostgreSQL provides a large number of functions and operators for the built-in data types.
      Greenplum Database supports all functions and operators as in PostgreSQL with the exception of
        <systemoutput>STABLE</systemoutput> and <systemoutput>VOLATILE</systemoutput> functions,
      which are subject to the restrictions noted. Greenplum Database includes additional functions
      that are useful in a distributed database and for analytic and data warehouse applications. </p>
    <p>Because of the distributed nature of the data, Greenplum Database restricts some functions to
      prevent inconsistent or unexpected results. Functions are classified as
        <codeph>IMMUTABLE</codeph>, <codeph>STABLE</codeph>, or <codeph>VOLATILE</codeph>. The
      following table describes these function classifications and how Greenplum Database supports
      them.</p>
    <table id="in201681">
      <title>Functions in Greenplum Database</title>
      <tgroup cols="4">
        <colspec colname="col1" colnum="1" colwidth="1*"/>
        <colspec colname="col2" colnum="2" colwidth="1*"/>
        <colspec colname="col3" colnum="3" colwidth="2*"/>
        <colspec colname="col4" colnum="4" colwidth="2*"/>
        <thead>
          <row>
            <entry colname="col1">Function Type</entry>
            <entry colname="col2">Greenplum Support</entry>
            <entry colname="col3">Description</entry>
            <entry colname="col4">Comments</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">IMMUTABLE</entry>
            <entry colname="col2">Yes</entry>
            <entry colname="col3">Relies only on information directly in its argument list. Given
              the same argument values, always returns the same result.</entry>
            <entry colname="col4"/>
          </row>
          <row>
            <entry colname="col1">STABLE</entry>
            <entry colname="col2">Yes, in most cases</entry>
            <entry colname="col3">Within a single table scan, returns the same result for same
              argument values, but results change across SQL statements.</entry>
            <entry colname="col4">Results depend on database lookups or parameter values.
                <codeph>current_timestamp</codeph> family of functions is <codeph>STABLE</codeph>;
              values do not change within an execution.</entry>
          </row>
          <row>
            <entry colname="col1">VOLATILE</entry>
            <entry colname="col2">Restricted</entry>
            <entry colname="col3">Function values can change within a single table scan. For
              example: <codeph>random()</codeph>, <codeph>currval()</codeph>,
                <codeph>timeofday()</codeph>.</entry>
            <entry colname="col4">Any function with side effects is volatile, even if its result is
              predictable. For example: <codeph>setval()</codeph>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>You can safely use <codeph>VOLATILE</codeph> and <codeph>STABLE</codeph> functions only in
      statements that are evaluated on and run from the master. Functions are
        <codeph>VOLATILE</codeph> at the segment level if they contain SQL commands or modify the
      database in any way. </p>
    <p>For example, the <codeph>setval()</codeph> function is not allowed to execute on distributed
      data in Greenplum Database because it can cause inconsistent data between segment instances.
      The following statements, which have no <codeph>FROM</codeph> clause, run on the master:</p>
    <p>
      <codeblock>SELECT setval('myseq', 201);
SELECT foo();</codeblock>
    </p>
    <p>If a statement has a <codeph>FROM</codeph> clause containing the name of a distributed table
        <i>and</i> the function in the <codeph>FROM</codeph> clause returns a set of rows, the
      statement can run on the segments:</p>
    <p>
      <codeblock>SELECT * from foo();</codeblock>
    </p>
    <p>Greenplum Database does not support functions that return table references
        (<codeph>rangeFuncs</codeph>) or functions that use the <codeph>refCursor</codeph>
      datatype.</p>
    <p>You can define your own functions and operators using the <apiname>CREATE FUNCTION</apiname>
      statement. The <cmdname>psql</cmdname> meta-commands <cmdname>\df</cmdname> and
        <cmdname>\do</cmdname> can be used to display a list of all actually available functions and
      operators, respectively. Functions you create are <codeph>VOLATILE</codeph> by default; you
      must specify that a user-defined function is <codeph>IMMUTABLE</codeph> or
        <codeph>STABLE</codeph> in the <codeph>CREATE FUNCTION</codeph> statement to allow it to run
      the segments. </p>
  </body>
</topic>
