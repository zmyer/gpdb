<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1"><title id="bw20941">CREATE OPERATOR</title><body><p id="sql_command_desc">Defines a new operator.</p><section id="section2"><title>Synopsis</title><codeblock id="sql_command_synopsis">CREATE OPERATOR <varname>name</varname> ( 
       PROCEDURE = <varname>funcname</varname>
       [, LEFTARG = <varname>lefttype</varname>] [, RIGHTARG = <varname>righttype</varname>]
       [, COMMUTATOR = <varname>com_op</varname>] [, NEGATOR = <varname>neg_op</varname>]
       [, RESTRICT = <varname>res_proc</varname>] [, JOIN = <varname>join_proc</varname>]
       [, HASHES] [, MERGES]
       [, SORT1 = <varname>left_sort_op</varname>] [, SORT2 = <varname>right_sort_op</varname>]
       [, LTCMP = <varname>less_than_op</varname>] [, GTCMP = <varname>greater_than_op</varname>] )</codeblock></section><section id="section3"><title>Description</title><p><codeph>CREATE OPERATOR</codeph> defines a new operator. The user who
defines an operator becomes its owner. </p><p>The operator name is a sequence of up to <codeph>NAMEDATALEN</codeph>-1
(63 by default) characters from the following list: <codeph>+ - * / &lt;
&gt; = ~ ! @ # % ^ &amp; | ` ?</codeph></p><p>There are a few restrictions on your choice of name: </p><ul><li id="bw144996"><codeph>--</codeph> and <codeph>/*</codeph> cannot appear anywhere in
an operator name, since they will be taken as the start of a comment.
</li><li id="bw144998">A multicharacter operator name cannot end in <codeph>+</codeph> or <codeph>-</codeph>,
unless the name also contains at least one of these characters: <codeph>~
! @ # % ^ &amp; | ` ?</codeph></li></ul><p>For example, <codeph>@-</codeph> is an allowed operator name, but <codeph>*-</codeph>
is not. This restriction allows Greenplum Database to parse SQL-compliant
commands without requiring spaces between tokens. </p><p>The operator <codeph>!=</codeph> is mapped to <codeph>&lt;&gt;</codeph>
on input, so these two names are always equivalent. </p><p>At least one of <codeph>LEFTARG</codeph> and <codeph>RIGHTARG</codeph>
must be defined. For binary operators, both must be defined. For right
unary operators, only <codeph>LEFTARG</codeph> should be defined, while
for left unary operators only <codeph>RIGHTARG</codeph> should be defined.
</p><p>The <varname>funcname</varname> procedure must have been previously defined using
<codeph>CREATE FUNCTION</codeph>, must be <codeph>IMMUTABLE</codeph>,
and must be defined to accept the correct number of arguments (either
one or two) of the indicated types. </p><p>The other clauses specify optional operator optimization clauses.
These clauses should be provided whenever appropriate to speed up queries
that use the operator. But if you provide them, you must be sure that
they are correct. Incorrect use of an optimization clause can result
in server process crashes, subtly wrong output, or other unexpected results.
You can always leave out an optimization clause if you are not sure about
it.</p></section><section id="section4"><title>Parameters</title><parml><plentry><pt><varname>name</varname></pt><pd>The (optionally schema-qualified) name of the operator to be defined.
Two operators in the same schema can have the same name if they operate
on different data types.</pd></plentry><plentry><pt><varname>funcname</varname></pt><pd>The function used to implement this operator (must be an <codeph>IMMUTABLE</codeph>
function).</pd></plentry><plentry><pt><varname>lefttype</varname></pt><pd>The data type of the operator's left operand, if any. This option
would be omitted for a left-unary operator. </pd></plentry><plentry><pt><varname>righttype</varname></pt><pd>The data type of the operator's right operand, if any. This option
would be omitted for a right-unary operator.</pd></plentry><plentry><pt><varname>com_op</varname></pt><pd>The optional <codeph>COMMUTATOR</codeph> clause names an operator
that is the commutator of the operator being defined. We say that operator
A is the commutator of operator B if (x A y) equals (y B x) for all possible
input values x, y. Notice that B is also the commutator of A. For example,
operators <codeph>&lt;</codeph> and <codeph>&gt;</codeph> for a particular
data type are usually each others commutators, and operator + is usually
commutative with itself. But operator <codeph>-</codeph> is usually not
commutative with anything. The left operand type of a commutable operator
is the same as the right operand type of its commutator, and vice versa.
So the name of the commutator operator is all that needs to be provided
in the <codeph>COMMUTATOR</codeph> clause. </pd></plentry><plentry><pt><varname>neg_op</varname></pt><pd>The optional <codeph>NEGATOR</codeph> clause names an operator that
is the negator of the operator being defined. We say that operator A
is the negator of operator B if both return Boolean results and (x A
y) equals NOT (x B y) for all possible inputs x, y. Notice that B is
also the negator of A. For example, <codeph>&lt;</codeph> and <codeph>&gt;=</codeph>
are a negator pair for most data types. An operator's negator must
have the same left and/or right operand types as the operator to be defined,
so only the operator name need be given in the <codeph>NEGATOR</codeph>
clause.</pd></plentry><plentry><pt><varname>res_proc</varname></pt><pd>The optional <codeph>RESTRICT</codeph> names a restriction selectivity
estimation function for the operator. Note that this is a function name,
not an operator name. <codeph>RESTRICT</codeph> clauses only make sense
for binary operators that return <codeph>boolean</codeph>. The idea behind
a restriction selectivity estimator is to guess what fraction of the
rows in a table will satisfy a <codeph>WHERE</codeph>-clause condition
of the form:</pd><pd><codeblock>column OP constant</codeblock></pd><pd>for the current operator and a particular constant value. This assists
the optimizer by giving it some idea of how many rows will be eliminated
by <codeph>WHERE</codeph> clauses that have this form. </pd><pd>You can usually just use one of the following system standard estimator functions for many of
                        your own operators: <p><codeph>eqsel</codeph> for =
                                </p><p><codeph>neqsel</codeph> for &lt;&gt;
                                </p><p><codeph>scalarltsel</codeph> for &lt; or &lt;=
                                </p><p><codeph>scalargtsel</codeph> for &gt; or &gt;= </p></pd></plentry><plentry><pt><varname>join_proc</varname></pt><pd>The optional <codeph>JOIN</codeph> clause names a join selectivity
estimation function for the operator. Note that this is a function name,
not an operator name. <codeph>JOIN</codeph> clauses only make sense for
binary operators that return <codeph>boolean</codeph>. The idea behind
a join selectivity estimator is to guess what fraction of the rows in
a pair of tables will satisfy a <codeph>WHERE</codeph>-clause condition
of the form</pd><pd><codeblock>table1.column1 OP table2.column2</codeblock></pd><pd>for the current operator. This helps the optimizer by letting it figure
out which of several possible join sequences is likely to take the least
work.</pd><pd>You can usually just use one of the following system standard join selectivity estimator
                        functions for many of your own operators:<p><codeph>eqjoinsel</codeph> for =
                                </p><p><codeph>neqjoinsel</codeph> for &lt;&gt;
                                </p><p><codeph>scalarltjoinsel</codeph> for &lt; or &lt;=
                                </p><p><codeph>scalargtjoinsel</codeph> for &gt; or &gt;=
                                </p><p><codeph>areajoinsel</codeph> for 2D area-based comparisons
                                </p><p><codeph>positionjoinsel</codeph> for 2D position-based
                            comparisons </p><p><codeph>contjoinsel</codeph> for 2D containment-based
                            comparisons </p></pd></plentry><plentry><pt>HASHES</pt><pd>The optional <codeph>HASHES</codeph> clause tells the system that
it is permissible to use the hash join method for a join based on this
operator. <codeph>HASHES</codeph> only makes sense for a binary operator
that returns <codeph>boolean</codeph>. The hash join operator can only
return true for pairs of left and right values that hash to the same
hash code. If two values get put in different hash buckets, the join
will never compare them at all, implicitly assuming that the result of
the join operator must be false. So it never makes sense to specify <codeph>HASHES</codeph>
for operators that do not represent equality. </pd><pd>To be marked <codeph>HASHES</codeph>, the join operator must appear
in a hash index operator class. Attempts to use the operator in hash
joins will fail at run time if no such operator class exists. The system
needs the operator class to find the data-type-specific hash function
for the operator's input data type. You must also supply a suitable
hash function before you can create the operator class. Care should be
exercised when preparing a hash function, because there are machine-dependent
ways in which it might fail to do the right thing.</pd></plentry><plentry><pt>MERGES</pt><pd>The <codeph>MERGES</codeph> clause, if present, tells the system
that it is permissible to use the merge-join method for a join based
on this operator. <codeph>MERGES</codeph> only makes sense for a binary
operator that returns <codeph>boolean</codeph>, and in practice the operator
must represent equality for some data type or pair of data types. </pd><pd>Merge join is based on the idea of sorting the left- and right-hand
tables into order and then scanning them in parallel. So, both data types
must be capable of being fully ordered, and the join operator must be
one that can only succeed for pairs of values that fall at the same place
in the sort order. In practice this means that the join operator must
behave like equality. It is possible to merge-join two distinct data
types so long as they are logically compatible. For example, the smallint-versus-integer
equality operator is merge-joinable. We only need sorting operators that
will bring both data types into a logically compatible sequence.</pd><pd>Execution of a merge join requires that the system be able to identify
four operators related to the merge-join equality operator: less-than
comparison for the left operand data type, less-than comparison for the
right operand data type, less-than comparison between the two data types,
and greater-than comparison between the two data types. It is possible
to specify these operators individually by name, as the <codeph>SORT1</codeph>,
<codeph>SORT2</codeph>, <codeph>LTCMP</codeph>, and <codeph>GTCMP</codeph>
options respectively. The system will fill in the default names if any
of these are omitted when <codeph>MERGES</codeph> is specified.</pd></plentry><plentry><pt><varname>left_sort_op</varname></pt><pd>If this operator can support a merge join, the less-than operator
that sorts the left-hand data type of this operator. <codeph>&lt;</codeph>
is the default if not specified.</pd></plentry><plentry><pt><varname>right_sort_op</varname></pt><pd>If this operator can support a merge join, the less-than operator
that sorts the right-hand data type of this operator. <codeph>&lt;</codeph>
is the default if not specified.</pd></plentry><plentry><pt><varname>less_than_op</varname></pt><pd>If this operator can support a merge join, the less-than operator
that compares the input data types of this operator. <codeph>&lt;</codeph>
is the default if not specified. </pd></plentry><plentry><pt><varname>greater_than_op</varname></pt><pd>If this operator can support a merge join, the greater-than operator that compares the input
                        data types of this operator. <codeph>&gt;</codeph> is the default if not
                            specified.<p>To give a schema-qualified operator name in optional
                            arguments, use the <codeph>OPERATOR()</codeph> syntax, for
                        example:</p><codeblock>COMMUTATOR = OPERATOR(myschema.===) ,</codeblock></pd></plentry></parml></section><section id="section5"><title>Notes</title><p>Any functions used to implement the operator must be defined as <codeph>IMMUTABLE</codeph>.</p></section><section id="section6"><title>Examples</title><p>Here is an example of creating an operator for adding two complex numbers,
assuming we have already created the definition of type <codeph>complex</codeph>.
First define the function that does the work, then define the operator:
</p><codeblock>CREATE FUNCTION complex_add(complex, complex)
    RETURNS complex
    AS 'filename', 'complex_add'
    LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR + (
    leftarg = complex,
    rightarg = complex,
    procedure = complex_add,
    commutator = +
);</codeblock><p>To use this operator in a query: </p><codeblock>SELECT (a + b) AS c FROM test_complex;</codeblock></section><section id="section7"><title>Compatibility</title><p><codeph>CREATE OPERATOR</codeph> is a Greenplum Database language extension.
The SQL standard does not provide for user-defined operators.</p></section><section id="section8"><title>See Also</title><p><codeph><xref href="CREATE_FUNCTION.xml#topic1" type="topic" format="dita"/></codeph>,
                        <codeph><xref href="./CREATE_TYPE.xml#topic1" type="topic" format="dita"
                    /></codeph>, <codeph><xref href="ALTER_OPERATOR.xml#topic1" type="topic"
                        format="dita"/></codeph>, <codeph><xref href="./DROP_OPERATOR.xml#topic1"
                        type="topic" format="dita"/></codeph></p></section></body></topic>
