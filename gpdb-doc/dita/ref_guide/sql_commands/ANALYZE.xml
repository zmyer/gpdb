<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
  <title id="bd20941">ANALYZE</title>
  <body>
    <p id="sql_command_desc">Collects statistics about a database.</p>
    <section id="section2">
      <title>Synopsis</title>
      <codeblock id="sql_command_synopsis">ANALYZE [VERBOSE] [ROOTPARTITION [ALL] ] 
   [<varname>table</varname> [ (<varname>column</varname> [, ...] ) ]]</codeblock>
    </section>
    <section id="section3">
      <title>Description</title>
      <p><codeph>ANALYZE</codeph> collects statistics about the contents of tables in the database,
        and stores the results in the system table <i>pg_statistic</i>. Subsequently, Greenplum
        Database uses these statistics to help determine the most efficient execution plans for
        queries.</p>
      <p>With no parameter, <codeph>ANALYZE</codeph> collects statistics for every table in the
        current database. You can specify a table name to collect statistics for a single table. You
        can specify a set of column names, in which case the statistics only for those columns are
        collected.</p>
      <p><codeph>ANALYZE</codeph> does not collect statistics on external tables. </p>
      <note type="important">If you intend to execute queries on partitioned tables with the Pivotal
        Query Optimizer enabled, you must collect statistics on the root partition of the
        partitioned table with the <codeph>ANALYZE ROOTPARTITION</codeph> command. For information
        about GPORCA, see "Querying Data" in the <cite>Greenplum Database
          Administrator Guide</cite>.</note>
      <note>You can also use the Greenplum Database utility <codeph>analyzedb</codeph> to update
        table statistics. The <codeph>analyzedb</codeph> utility can update statistics for multiple
        tables concurrently. The utility can also check table statistics and update statistics only
        if the statistics are not current or do not exist. For information about the utility, see
        the <cite>Greenplum Database Utility Guide</cite>.</note>
    </section>
    <section id="section4">
      <title>Parameters</title>
      <parml>
        <plentry>
          <pt>ROOTPARTITION [ALL]</pt>
          <pd>Collect statistics only on the root partition of partitioned tables. When you specify
              <codeph>ROOTPARTITION</codeph>, you must specify either <codeph>ALL</codeph> or the
            name of a partitioned table. </pd>
          <pd>If you specify <codeph>ALL</codeph> with <codeph>ROOTPARTITION</codeph>, Greenplum
            Database collects statistics for the root partition of all partitioned tables in the
            database. If there are no partitioned tables in the database, a message stating that
            there are no partitioned tables is returned. For tables that are not partitioned tables,
            statistics are not collected. </pd>
          <pd>If you specify a table name with <codeph>ROOTPARTITION</codeph> and the table is not a
            partitioned table, no statistics are collected for the table and a warning message is
            returned.</pd>
          <pd>The <codeph>ROOTPARTITION</codeph> clause is not valid with <codeph>VACUUM
              ANALYZE</codeph>. The command <codeph>VACUUM ANALYZE ROOTPARTITION</codeph> returns an
            error. </pd>
          <pd>The cost of refreshing the root level statistics is comparable to analyzing one leaf
            partition. </pd>
          <pd>For the partitioned table <i>sales_curr_yr</i>, this example command collects
            statistics only on the root partition of the partitioned table. <codeph>ANALYZE
              ROOTPARTITION sales_curr_yr; </codeph></pd>
          <pd>This example <codeph>ANALYZE</codeph> command collects statistics on the root
            partition of all the partitioned tables in the database.
            <codeblock>ANALYZE ROOTPARTITION ALL;</codeblock></pd>
        </plentry>
        <plentry>
          <pt>VERBOSE</pt>
          <pd>Enables display of progress messages. Enables display of progress messages. When
            specified, <codeph>ANALYZE</codeph> emits this information <ul id="ul_phq_1n2_jr">
              <li>The table that is being processed.</li>
              <li>The query that is executed to generate the sample table.</li>
              <li>The column for which statistics is being computed.</li>
              <li>The queries that are issued to collect the different statistics for a single
                column.</li>
              <li>The statistics that are generated.</li>
            </ul></pd>
        </plentry>
        <plentry>
          <pt>
            <varname>table</varname>
          </pt>
          <pd>The name (possibly schema-qualified) of a specific table to analyze. Defaults to all
            tables in the current database. </pd>
        </plentry>
        <plentry>
          <pt>
            <varname>column</varname>
          </pt>
          <pd>The name of a specific column to analyze. Defaults to all columns. </pd>
        </plentry>
      </parml>
    </section>
    <section id="section5">
      <title>Notes</title>
      <p>It is a good idea to run <codeph>ANALYZE</codeph> periodically, or just after making major
        changes in the contents of a table. Accurate statistics helps Greenplum Database choose the
        most appropriate query plan, and thereby improve the speed of query processing. A common
        strategy is to run <codeph><xref href="./VACUUM.xml#topic1" type="topic" format="dita"
          /></codeph> and <codeph>ANALYZE</codeph> once a day during a low-usage time of day.</p>
      <p><codeph>ANALYZE</codeph> requires <codeph>SHARE UPDATE EXCLUSIVE</codeph> lock on the
        target table. This lock conflicts with these locks: <codeph>SHARE UPDATE EXCLUSIVE</codeph>,
          <codeph>SHARE</codeph>, <codeph>SHARE ROW EXCLUSIVE</codeph>, <codeph>EXCLUSIVE</codeph>,
          <codeph>ACCESS EXCLUSIVE</codeph>.</p>
      <p>For a partitioned table, specifying which portion of the table to analyze, the root
        partition or subpartitions (leaf child tables) can be useful if the partitioned table has
        large number of partitions that have been analyzed and only a few leaf child tables have
        changed. </p>
      <ul>
        <li id="bd138200">When you run <codeph>ANALYZE</codeph> on the root partitioned table,
          statistics are collected for all the leaf child tables (the lowest-level tables in the
          hierarchy of child tables created by Greenplum Database for use by the partitioned
          table).</li>
        <li id="bd138204">When you run <codeph>ANALYZE</codeph> on a leaf child table, statistics
          are collected only for that leaf child table. When you run <codeph>ANALYZE</codeph> on a
          child table that is not a leaf child table, statistics are not collected. <p>For example,
            you can create a partitioned table with partitions for the years 2000 to 2010 and
            subpartitions for each month in each year. If you run <codeph>ANALYZE</codeph> on the
            child table for the year 2005 no statistics are collected. If you run
              <codeph>ANALYZE</codeph> on the leaf child table for March of 2005, statistics are
            collected only for that leaf child table.</p><note>When you create a partitioned table
            with the <codeph>CREATE TABLE</codeph> command, Greenplum Database creates the table
            that you specify (the root partition or parent table), and also creates a hierarchy of
            tables based on the partition hierarchy that you specified (the child tables).
            Partitioned tables, child tables and their inheritance level relationships are tracked
            in the system view <i>pg_partitions</i>.</note></li>
      </ul>
      <p>For a partitioned table that contains a leaf child partition that has been exchanged to use
        an external table, <codeph>ANALYZE</codeph> does not collect statistics for the external
        table partition:</p>
      <ul id="ol_x5n_2ff_ss">
        <li>If <codeph>ANALYZE [ROOTPARTITION]</codeph> is run, external table partitions are not
          analyzed and root table statistics do not include external table partition. </li>
        <li>If <codeph>ANALYZE</codeph> is run on an external table partition, the partition is not
          analyzed.</li>
        <li>If the <codeph>VERBOSE</codeph> clause is specified, an informational message is
          displayed: <codeph>skipping external table</codeph>.</li>
      </ul>
      <p>The Greenplum Database server configuration parameter <codeph><xref
            href="../config_params/guc_category-list.xml#optimizer_analyze_root_partition"
            >optimizer_analyze_root_partition</xref></codeph> affects when statistics are collected
        on the root partition of a partitioned table. If the parameter is enabled, statistics are
        also collected on the root partition when you run <codeph>ANALYZE</codeph> (without the
          <codeph>ROOTPARTITON</codeph> keyword) and specify the root partition.</p>
      <p>The statistics collected by <codeph>ANALYZE</codeph> usually include a list of some of the
        most common values in each column and a histogram showing the approximate data distribution
        in each column. One or both of these may be omitted if <codeph>ANALYZE</codeph> deems them
        uninteresting (for example, in a unique-key column, there are no common values) or if the
        column data type does not support the appropriate operators.</p>
      <p>For large tables, <codeph>ANALYZE</codeph> takes a random sample of the table contents,
        rather than examining every row. This allows even very large tables to be analyzed in a
        small amount of time. Note, however, that the statistics are only approximate, and will
        change slightly each time <codeph>ANALYZE</codeph> is run, even if the actual table contents
        did not change. This may result in small changes in the planner's estimated costs shown by
          <codeph>EXPLAIN</codeph>. In rare situations, this non-determinism will cause the query
        optimizer to choose a different query plan between runs of <codeph>ANALYZE</codeph>. To
        avoid this, raise the amount of statistics collected by <codeph>ANALYZE</codeph> by
        adjusting the <varname>default_statistics_target</varname> configuration parameter, or on a
        column-by-column basis by setting the per-column statistics target with <codeph>ALTER TABLE
          ... ALTER COLUMN ... SET STATISTICS</codeph> (see <codeph>ALTER TABLE</codeph>). The
        target value sets the maximum number of entries in the most-common-value list and the
        maximum number of bins in the histogram. The default target value is 10, but this can be
        adjusted up or down to trade off accuracy of planner estimates against the time taken for
          <codeph>ANALYZE</codeph> and the amount of space occupied in
        <codeph>pg_statistic</codeph>. In particular, setting the statistics target to zero disables
        collection of statistics for that column. It may be useful to do that for columns that are
        never used as part of the <codeph>WHERE</codeph>, <codeph>GROUP BY</codeph>, or
          <codeph>ORDER BY</codeph> clauses of queries, since the planner will have no use for
        statistics on such columns. </p>
      <p>The largest statistics target among the columns being analyzed determines the number of
        table rows sampled to prepare the statistics. Increasing the target causes a proportional
        increase in the time and space needed to do <codeph>ANALYZE</codeph>.</p>
      <p>When Greenplum Database performs an <codeph>ANALYZE</codeph> operation to collect
        statistics for a table and detects that all the sampled table data pages are empty (do not
        contain valid data), Greenplum Database displays a message that a <codeph>VACUUM
          FULL</codeph> operation should be performed. If the sampled pages are empty, the table
        statistics will be inaccurate. Pages become empty after a large number of changes to the
        table, for example deleting a large number of rows. A <codeph>VACUUM FULL</codeph> operation
        removes the empty pages and allows an <codeph>ANALYZE</codeph> operation to collect accurate
        statistics. </p>
      <p>If there are no statistics for the table, the server configuration parameter <codeph><xref
            href="../config_params/guc_category-list.xml#gp_enable_relsize_collection"/></codeph>
        controls whether the legacy query optimizer uses a default statistics file or estimates the
        size of a table using the <codeph>pg_relation_size</codeph> function. By default, the legacy
        optimizer uses the default statistics file to estimate the number of rows if statistics are
        not available.</p>
    </section>
    <section id="section6">
      <title>Examples</title>
      <p>Collect statistics for the table <codeph>mytable</codeph>:</p>
      <codeblock>ANALYZE mytable;</codeblock>
    </section>
    <section id="section7">
      <title>Compatibility</title>
      <p>There is no <codeph>ANALYZE</codeph> statement in the SQL standard. </p>
    </section>
    <section id="section8">
      <title>See Also</title>
      <p><codeph><xref href="ALTER_TABLE.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="./EXPLAIN.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="./VACUUM.xml#topic1" type="topic" format="dita"/></codeph>,
          <codeph>analyzedb</codeph> utility in the <cite>Greenplum Database Utility
        Guide</cite>.</p>
    </section>
  </body>
</topic>
