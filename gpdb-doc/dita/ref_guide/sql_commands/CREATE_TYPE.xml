<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1"><title id="ch20941">CREATE TYPE</title><body><p id="sql_command_desc">Defines a new data type.</p><section id="section2"><title>Synopsis</title><codeblock id="sql_command_synopsis">CREATE TYPE <varname>name</varname> AS ( <varname>attribute_name</varname> <varname>data_type</varname> [, ... ] )

CREATE TYPE <varname>name</varname> (
    INPUT = <varname>input_function</varname>,
    OUTPUT = <varname>output_function</varname>
    [, RECEIVE = <varname>receive_function</varname>]
    [, SEND = <varname>send_function</varname>]
    [, INTERNALLENGTH = {<varname>internallength</varname> | VARIABLE}]
    [, PASSEDBYVALUE]
    [, ALIGNMENT = <varname>alignment</varname>]
    [, STORAGE = <varname>storage</varname>]
    [, DEFAULT = <varname>default</varname>]
    [, ELEMENT = <varname>element</varname>]
    [, DELIMITER = <varname>delimiter</varname>] )

CREATE TYPE <varname>name</varname></codeblock></section><section id="section3"><title>Description</title><p><codeph>CREATE TYPE</codeph> registers a new data type for use in the
current database. The user who defines a type becomes its owner. </p><p>If a schema name is given then the type is created in the specified
schema. Otherwise it is created in the current schema. The type name
must be distinct from the name of any existing type or domain in the
same schema. The type name must also be distinct from the name of any
existing table in the same schema.</p><sectiondiv id="section4"><b>Composite Types</b><p>The first form of <codeph>CREATE TYPE</codeph> creates a composite type.
The composite type is specified by a list of attribute names and data
types. This is essentially the same as the row type of a table, but using
<codeph>CREATE TYPE</codeph> avoids the need to create an actual table
when all that is wanted is to define a type. A stand-alone composite
type is useful as the argument or return type of a function.</p></sectiondiv><sectiondiv id="section5"><b>Base Types</b><p>The second form of <codeph>CREATE TYPE</codeph>
                    creates a new base type (scalar type). The parameters may appear in any order,
                    not only that shown in the syntax, and most are optional. You must register two
                    or more functions (using <codeph>CREATE FUNCTION</codeph>) before defining the
                    type. The support functions <varname>input_function</varname> and <varname>output_function</varname> are
                    required, while the functions <varname>receive_function</varname>, <varname>send_function</varname> and
                        <varname>analyze_function</varname> are optional. Generally these functions have to be
                    coded in C or another low-level language. In Greenplum Database, any function
                    used to implement a data type must be defined as
                    <codeph>IMMUTABLE</codeph>.</p><p>The <varname>input_function</varname> converts the type's
                    external textual representation to the internal representation used by the
                    operators and functions defined for the type. <varname>output_function</varname> performs
                    the reverse transformation. The input function may be declared as taking one
                    argument of type <codeph>cstring</codeph>, or as taking three arguments of types
                        <codeph>cstring</codeph>, <codeph>oid</codeph>, <codeph>integer</codeph>.
                    The first argument is the input text as a C string, the second argument is the
                    type's own OID (except for array types, which instead receive their element
                    type's OID), and the third is the <codeph>typmod</codeph> of the destination
                    column, if known (<codeph>-1</codeph> will be passed if not). The input function
                    must return a value of the data type itself. Usually, an input function should
                    be declared <codeph>STRICT</codeph>; if it is not, it will be called with a
                        <codeph>NULL</codeph> first parameter when reading a <codeph>NULL</codeph>
                    input value. The function must still return <codeph>NULL</codeph> in this case,
                    unless it raises an error. (This case is mainly meant to support domain input
                    functions, which may need to reject <codeph>NULL</codeph> inputs.) The output
                    function must be declared as taking one argument of the new data type. The
                    output function must return type <codeph>cstring</codeph>. Output functions are
                    not invoked for <codeph>NULL</codeph> values. </p><p>The optional
                        <varname>receive_function</varname> converts the type's external binary representation
                    to the internal representation. If this function is not supplied, the type
                    cannot participate in binary input. The binary representation should be chosen
                    to be cheap to convert to internal form, while being reasonably portable. (For
                    example, the standard integer data types use network byte order as the external
                    binary representation, while the internal representation is in the machine's
                    native byte order.) The receive function should perform adequate checking to
                    ensure that the value is valid. The receive function may be declared as taking
                    one argument of type <codeph>internal</codeph>, or as taking three arguments of
                    types <codeph>internal</codeph>, <codeph>oid</codeph>, <codeph>integer</codeph>.
                    The first argument is a pointer to a <codeph>StringInfo</codeph> buffer holding
                    the received byte string; the optional arguments are the same as for the text
                    input function. The receive function must return a value of the data type
                    itself. Usually, a receive function should be declared <codeph>STRICT</codeph>;
                    if it is not, it will be called with a <codeph>NULL</codeph> first parameter
                    when reading a NULL input value. The function must still return
                        <codeph>NULL</codeph> in this case, unless it raises an error. (This case is
                    mainly meant to support domain receive functions, which may need to reject
                        <codeph>NULL</codeph> inputs.) Similarly, the optional <varname>send_function</varname>
                    converts from the internal representation to the external binary representation.
                    If this function is not supplied, the type cannot participate in binary output.
                    The send function must be declared as taking one argument of the new data type.
                    The send function must return type <codeph>bytea</codeph>. Send functions are
                    not invoked for <codeph>NULL</codeph> values. </p><p>You should at this point be
                    wondering how the input and output functions can be declared to have results or
                    arguments of the new type, when they have to be created before the new type can
                    be created. The answer is that the type should first be defined as a shell type,
                    which is a placeholder type that has no properties except a name and an owner.
                    This is done by issuing the command <codeph>CREATE TYPE <varname>name</varname></codeph>,
                    with no additional parameters. Then the I/O functions can be defined referencing
                    the shell type. Finally, <codeph>CREATE TYPE</codeph> with a full definition
                    replaces the shell entry with a complete, valid type definition, after which the
                    new type can be used normally. </p><p>While the details of the new type's
                    internal representation are only known to the I/O functions and other functions
                    you create to work with the type, there are several properties of the internal
                    representation that must be declared to Greenplum Database. Foremost of these is
                        <varname>internallength</varname>. Base data types can be fixed-length, in which case
                        <varname>internallength</varname> is a positive integer, or variable length, indicated
                    by setting <varname>internallength</varname> to <codeph>VARIABLE</codeph>. (Internally, this
                    is represented by setting <codeph>typlen</codeph> to <codeph>-1</codeph>.) The
                    internal representation of all variable-length types must start with a 4-byte
                    integer giving the total length of this value of the type.</p><p>The optional
                    flag <codeph>PASSEDBYVALUE</codeph> indicates that values of this data type are
                    passed by value, rather than by reference. You may not pass by value types whose
                    internal representation is larger than the size of the <codeph>Datum</codeph>
                    type (4 bytes on most machines, 8 bytes on a few). </p><p>The <varname>alignment</varname>
                    parameter specifies the storage alignment required for the data type. The
                    allowed values equate to alignment on 1, 2, 4, or 8 byte boundaries. Note that
                    variable-length types must have an alignment of at least 4, since they
                    necessarily contain an <codeph>int4</codeph> as their first component.
                    </p><p>The <varname>storage</varname> parameter allows selection of storage strategies for
                    variable-length data types. (Only <codeph>plain</codeph> is allowed for
                    fixed-length types.) <codeph>plain</codeph> specifies that data of the type will
                    always be stored in-line and not compressed. <codeph>extended</codeph> specifies
                    that the system will first try to compress a long data value, and will move the
                    value out of the main table row if it's still too long.
                        <codeph>external</codeph> allows the value to be moved out of the main
                    table, but the system will not try to compress it. <codeph>main</codeph> allows
                    compression, but discourages moving the value out of the main table. (Data items
                    with this storage strategy may still be moved out of the main table if there is
                    no other way to make a row fit, but they will be kept in the main table
                    preferentially over <codeph>extended</codeph> and <codeph>external</codeph>
                    items.) </p><p>A default value may be specified, in case a user wants columns of
                    the data type to default to something other than the null value. Specify the
                    default with the <codeph>DEFAULT</codeph> key word. (Such a default may be
                    overridden by an explicit <codeph>DEFAULT</codeph> clause attached to a
                    particular column.) </p><p>To indicate that a type is an array, specify the type
                    of the array elements using the <codeph>ELEMENT</codeph> key word. For example,
                    to define an array of 4-byte integers (int4), specify <codeph>ELEMENT =
                        int4</codeph>. More details about array types appear below. </p><p>To
                    indicate the delimiter to be used between values in the external representation
                    of arrays of this type, <codeph>delimiter</codeph> can be set to a specific
                    character. The default delimiter is the comma (,). Note that the delimiter is
                    associated with the array element type, not the array type
                itself.</p></sectiondiv><sectiondiv id="section6"><b>Array Types</b><p>Whenever a user-defined base data type is created, Greenplum Database
automatically creates an associated array type, whose name consists of
the base type's name prepended with an underscore. The parser understands
this naming convention, and translates requests for columns of type <codeph>foo[]</codeph>
into requests for type <codeph>_foo</codeph>. The implicitly-created
array type is variable length and uses the built-in input and output
functions <codeph>array_in</codeph> and <codeph>array_out</codeph>. </p><p>You might reasonably ask why there is an <codeph>ELEMENT</codeph>
option, if the system makes the correct array type automatically. The
only case where it's useful to use <codeph>ELEMENT</codeph> is when
you are making a fixed-length type that happens to be internally an array
of a number of identical things, and you want to allow these things to
be accessed directly by subscripting, in addition to whatever operations
you plan to provide for the type as a whole. For example, type <codeph>name</codeph>
allows its constituent <codeph>char</codeph> elements to be accessed
this way. A 2-D point type could allow its two component numbers to be
accessed like point[0] and point[1]. Note that this facility only works
for fixed-length types whose internal form is exactly a sequence of identical
fixed-length fields. A subscriptable variable-length type must have the
generalized internal representation used by <codeph>array_in</codeph>
and <codeph>array_out</codeph>. For historical reasons, subscripting
of fixed-length array types starts from zero, rather than from one as
for variable-length arrays.</p></sectiondiv></section><section id="section7"><title>Parameters</title><parml><plentry><pt><varname>name</varname></pt><pd>The name (optionally schema-qualified) of a type to be created. </pd></plentry><plentry><pt><varname>attribute_name</varname></pt><pd>The name of an attribute (column) for the composite type. </pd></plentry><plentry><pt><varname>data_type</varname></pt><pd>The name of an existing data type to become a column of the composite
type. </pd></plentry><plentry><pt><varname>input_function</varname></pt><pd>The name of a function that converts data from the type's external
textual form to its internal form. </pd></plentry><plentry><pt><varname>output_function</varname></pt><pd>The name of a function that converts data from the type's internal
form to its external textual form. </pd></plentry><plentry><pt><varname>receive_function</varname></pt><pd>The name of a function that converts data from the type's external
binary form to its internal form. </pd></plentry><plentry><pt><varname>send_function</varname></pt><pd>The name of a function that converts data from the type's internal
form to its external binary form. </pd></plentry><plentry><pt><varname>internallength</varname></pt><pd>A numeric constant that specifies the length in bytes of the new
type's internal representation. The default assumption is that it is
variable-length. </pd></plentry><plentry><pt><varname>alignment</varname></pt><pd>The storage alignment requirement of the data type. Must be one of
<codeph>char</codeph>, <codeph>int2</codeph>, <codeph>int4</codeph>,
or <codeph>double</codeph>. The default is <codeph>int4</codeph>. </pd></plentry><plentry><pt><varname>storage</varname></pt><pd>The storage strategy for the data type. Must be one of <codeph>plain</codeph>,
<codeph>external</codeph>, <codeph>extended</codeph>, or <codeph>main</codeph>.
The default is <codeph>plain</codeph>. </pd></plentry><plentry><pt><varname>default</varname></pt><pd>The default value for the data type. If this is omitted, the default
is null. </pd></plentry><plentry><pt><varname>element</varname></pt><pd>The type being created is an array; this specifies the type of the
array elements. </pd></plentry><plentry><pt><varname>delimiter</varname></pt><pd>The delimiter character to be used between values in arrays made
of this type.</pd></plentry></parml></section><section id="section8"><title>Notes</title><p>User-defined type names cannot begin with the underscore character (_)
and can only be 62 characters long (or in general <codeph>NAMEDATALEN
- 2</codeph>, rather than the <codeph>NAMEDATALEN - 1</codeph> characters
allowed for other names). Type names beginning with underscore are reserved
for internally-created array type names.</p><p>Because there are no restrictions on use of a data type once it's
been created, creating a base type is tantamount to granting public execute
permission on the functions mentioned in the type definition. (The creator
of the type is therefore required to own these functions.) This is usually
not an issue for the sorts of functions that are useful in a type definition.
But you might want to think twice before designing a type in a way that
would require 'secret' information to be used while converting it
to or from external form. </p><p>Before Greenplum Database version 2.4, the syntax <codeph>CREATE TYPE
</codeph> <varname>name</varname> did not exist. The way to create a new base type
was to create its input function first. In this approach, Greenplum Database
will first see the name of the new data type as the return type of the
input function. The shell type is implicitly created in this situation,
and then it can be referenced in the definitions of the remaining I/O
functions. This approach still works, but is deprecated and may be disallowed
in some future release. Also, to avoid accidentally cluttering the catalogs
with shell types as a result of simple typos in function definitions,
a shell type will only be made this way when the input function is written
in C.</p></section><section id="section9"><title>Examples</title><p>This example creates a composite type and uses it in a function definition:</p><codeblock>CREATE TYPE compfoo AS (f1 int, f2 text);

CREATE FUNCTION getfoo() RETURNS SETOF compfoo AS $$
    SELECT fooid, fooname FROM foo
$$ LANGUAGE SQL;</codeblock><p>This example creates the base data type <codeph>box</codeph> and then uses the type in a table
                definition:</p><codeblock>CREATE TYPE box;

CREATE FUNCTION my_box_in_function(cstring) RETURNS box AS 
... ;

CREATE FUNCTION my_box_out_function(box) RETURNS cstring AS 
... ;

CREATE TYPE box (
    INTERNALLENGTH = 16,
    INPUT = my_box_in_function,
    OUTPUT = my_box_out_function
);

CREATE TABLE myboxes (
    id integer,
    description box
);</codeblock><p>If the internal structure of <codeph>box</codeph> were an array of four <codeph>float4</codeph>
                elements, we might instead use:</p><codeblock>CREATE TYPE box (
    INTERNALLENGTH = 16,
    INPUT = my_box_in_function,
    OUTPUT = my_box_out_function,
    ELEMENT = float4
);</codeblock><p>which would allow a box value's component numbers to be accessed by
subscripting. Otherwise the type behaves the same as before.</p><p>This example creates a large object type and uses it in a table definition:</p><codeblock>CREATE TYPE bigobj (
    INPUT = lo_filein, OUTPUT = lo_fileout,
    INTERNALLENGTH = VARIABLE
);

CREATE TABLE big_objs (
    id integer,
    obj bigobj
);</codeblock></section><section id="section10"><title>Compatibility</title><p>This <codeph>CREATE TYPE</codeph> command is a Greenplum Database extension.
There is a <codeph>CREATE TYPE</codeph> statement in the SQL standard
that is rather different in detail. </p></section><section id="section11"><title>See Also</title><p><codeph><xref href="CREATE_FUNCTION.xml#topic1" type="topic" format="dita"/></codeph>,
                        <codeph><xref href="ALTER_TYPE.xml#topic1" type="topic" format="dita"
                    /></codeph>, <codeph><xref href="./DROP_TYPE.xml#topic1" type="topic"
                        format="dita"/></codeph>, <codeph><xref href="CREATE_DOMAIN.xml#topic1"
                        type="topic" format="dita"/></codeph></p></section></body></topic>