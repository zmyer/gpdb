<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1"><title id="bm20941">CREATE AGGREGATE</title><body><p id="sql_command_desc">Defines a new aggregate function.</p><section id="section2"><title>Synopsis</title><codeblock id="sql_command_synopsis">CREATE [ORDERED] AGGREGATE <varname>name</varname> (<varname>input_data_type</varname> [ , ... ]) 
      ( SFUNC = <varname>sfunc</varname>,
        STYPE = <varname>state_data_type</varname>
        [, PREFUNC = <varname>prefunc</varname>]
        [, FINALFUNC = <varname>ffunc</varname>]
        [, INITCOND = <varname>initial_condition</varname>]
        [, SORTOP = <varname>sort_operator</varname>] )</codeblock></section><section id="section3"><title>Description</title><p><codeph>CREATE AGGREGATE</codeph> defines a new
        aggregate function. Some basic and commonly-used aggregate functions such as
          <codeph>count</codeph>, <codeph>min</codeph>, <codeph>max</codeph>, <codeph>sum</codeph>,
          <codeph>avg</codeph> and so on are already provided in Greenplum Database. If one defines
        new types or needs an aggregate function not already provided, then <codeph>CREATE
          AGGREGATE</codeph> can be used to provide the desired features.</p><p>An aggregate
        function is identified by its name and input data types. Two aggregate functions in the same
        schema can have the same name if they operate on different input types. The name and input
        data types of an aggregate function must also be distinct from the name and input data types
        of every ordinary function in the same schema.</p><p>An aggregate function is made from one,
        two or three ordinary functions (all of which must be <codeph>IMMUTABLE</codeph> functions): </p><ul>
        <li id="bm141603">A state transition function <varname>sfunc</varname></li>
        <li id="bm141604">An optional preliminary segment-level calculation function
          <varname>prefunc</varname></li>
        <li id="bm141605">An optional final calculation function <varname>ffunc</varname></li>
      </ul><p>These functions are used as
        follows:</p><codeblock>sfunc( internal-state, next-data-values ) ---&gt; next-internal-state
prefunc( internal-state, internal-state ) ---&gt; next-internal-state
ffunc( internal-state ) ---&gt; aggregate-value</codeblock><p>You
        can specify <codeph>PREFUNC</codeph> as method for optimizing aggregate execution. By
        specifying <codeph>PREFUNC</codeph>, the aggregate can be executed in parallel on segments
        first and then on the master. When a two-level execution is performed,
          <codeph>SFUNC</codeph> is executed on the segments to generate partial aggregate results,
        and <codeph>PREFUNC</codeph> is executed on the master to aggregate the partial results from
        segments. If single-level aggregation is performed, all the rows are sent to the master and
          <codeph>sfunc</codeph> is applied to the rows.</p><p>Single-level aggregation and
        two-level aggregation are equivalent execution strategies. Either type of aggregation can be
        implemented in a query plan. When you implement the functions <codeph>prefunc</codeph> and
          <codeph>sfunc</codeph>, you must ensure that the invocation of <codeph>sfunc</codeph> on
        the segment instances followed by <codeph>prefunc</codeph> on the master produce the same
        result as single-level aggregation that sends all the rows to the master and then applies
        only the <codeph>sfunc</codeph> to the rows. </p><p>Greenplum Database creates a temporary
        variable of data type <varname>stype</varname> to hold the current internal state of the aggregate
        function. At each input row, the aggregate argument values are calculated and the state
        transition function is invoked with the current state value and the new argument values to
        calculate a new internal state value. After all the rows have been processed, the final
        function is invoked once to calculate the aggregate return value. If there is no final
        function then the ending state value is returned as-is.</p><p>An aggregate function can
        provide an optional initial condition, an initial value for the internal state value. This
        is specified and stored in the database as a value of type text, but it must be a valid
        external representation of a constant of the state value data type. If it is not supplied
        then the state value starts out <codeph>NULL</codeph>. </p><p>If the state transition
        function is declared <codeph>STRICT</codeph>, then it cannot be called with
          <codeph>NULL</codeph> inputs. With such a transition function, aggregate execution behaves
        as follows. Rows with any null input values are ignored (the function is not called and the
        previous state value is retained). If the initial state value is <codeph>NULL</codeph>, then
        at the first row with all non-null input values, the first argument value replaces the state
        value, and the transition function is invoked at subsequent rows with all non-null input
        values. This is useful for implementing aggregates like <codeph>max</codeph>. Note that this
        behavior is only available when <varname>state_data_type</varname> is the same as the first
          <varname>input_data_type</varname>. When these types are different, you must supply a non-null initial
        condition or use a nonstrict transition function.</p><p>If the state transition function is
        not declared <codeph>STRICT</codeph>, then it will be called unconditionally at each input
        row, and must deal with <codeph>NULL</codeph> inputs and <codeph>NULL</codeph> transition
        values for itself. This allows the aggregate author to have full control over the aggregate
        handling of <codeph>NULL</codeph> values.</p><p>If the final function is declared
          <codeph>STRICT</codeph>, then it will not be called when the ending state value is
          <codeph>NULL</codeph>; instead a <codeph>NULL</codeph> result will be returned
        automatically. (This is the normal behavior of <codeph>STRICT</codeph> functions.) In any
        case the final function has the option of returning a <codeph>NULL</codeph> value. For
        example, the final function for <codeph>avg</codeph> returns <codeph>NULL</codeph> when it
        sees there were zero input rows.</p><p>Single argument aggregate functions, such as min or
        max, can sometimes be optimized by looking into an index instead of scanning every input
        row. If this aggregate can be so optimized, indicate it by specifying a sort operator. The
        basic requirement is that the aggregate must yield the first element in the sort ordering
        induced by the operator; in other
        words:</p><codeblock>SELECT <varname>agg</varname>(<varname>col</varname>) FROM <varname>tab</varname>; </codeblock><p>must be
        equivalent
        to:</p><codeblock>SELECT <varname>col</varname> FROM <varname>tab</varname> ORDER BY <varname>col</varname> USING <varname>sortop</varname> LIMIT 1;</codeblock><p>Further
        assumptions are that the aggregate function ignores <codeph>NULL</codeph> inputs, and that
        it delivers a <codeph>NULL</codeph> result if and only if there were no non-null inputs.
        Ordinarily, a data type's <codeph>&lt;</codeph> operator is the proper sort operator for
          <codeph>MIN</codeph>, and <codeph>&gt;</codeph> is the proper sort operator for
          <codeph>MAX</codeph>. Note that the optimization will never actually take effect unless
        the specified operator is the "less than" or "greater than" strategy member of a B-tree
        index operator class.</p><sectiondiv id="section4"><b>Ordered Aggregates</b><p>If the optional qualification
            <codeph>ORDERED</codeph> appears, the created aggregate function is an <i>ordered
            aggregate</i>. In this case, the preliminary aggregation function,
            <codeph>prefunc</codeph> cannot be specified. </p><p>An ordered aggregate is called with
          the following
          syntax.</p><codeblock>name ( arg [ , ... ] [ORDER BY sortspec [ , ...]] )</codeblock><p>If
          the optional <codeph>ORDER BY</codeph> is omitted, a system-defined ordering is used. The
          transition function <codeph>sfunc</codeph> of an ordered aggregate function is called on
          its input arguments in the specified order and on a single segment. There is a new column
            <codeph>aggordered</codeph> in the <codeph><xref
              href="../system_catalogs/pg_aggregate.xml" type="topic" format="dita"/></codeph> table
          to indicate the aggregate function is defined as an ordered aggregate.</p></sectiondiv></section><section id="section5"><title>Parameters</title><parml><plentry><pt><varname>name</varname></pt><pd>The name (optionally schema-qualified) of the aggregate function
to create.</pd></plentry><plentry><pt><varname>input_data_type</varname></pt><pd>An input data type on which this aggregate function operates. To
create a zero-argument aggregate function, write * in place of the list
of input data types. An example of such an aggregate is count(*).</pd></plentry><plentry><pt><varname>sfunc</varname></pt><pd>The name of the state transition function to be called for each input
row. For an N-argument aggregate function, the <varname>sfunc</varname> must take
N+1 arguments, the first being of type <varname>state_data_type</varname> and the
rest matching the declared input data types of the aggregate. The function
must return a value of type <varname>state_data_type</varname>. This function takes
the current state value and the current input data values, and returns
the next state value.</pd></plentry><plentry><pt><varname>state_data_type</varname></pt><pd>The data type for the aggregate state value.</pd></plentry><plentry><pt><varname>prefunc</varname></pt><pd>The name of a preliminary aggregation function. This is a function
of two arguments, both of type <varname>state_data_type</varname>. It must return
a value of <varname>state_data_type</varname>. A preliminary function takes two transition
state values and returns a new transition state value representing the
combined aggregation. In Greenplum Database, if the result of the aggregate
function is computed in a segmented fashion, the preliminary aggregation
function is invoked on the individual internal states in order to combine
them into an ending internal state.</pd><pd>Note that this function is also called in hash aggregate mode within
a segment. Therefore, if you call this aggregate function without a preliminary
function, hash aggregate is never chosen. Since hash aggregate is efficient,
consider defining preliminary function whenever possible.</pd></plentry><plentry><pt><varname>ffunc</varname></pt><pd>The name of the final function called to compute the aggregate result after all input rows have
            been traversed. The function must take a single argument of type
              <codeph>state_data_type</codeph>. The return data type of the aggregate is defined as
            the return type of this function. If <codeph>ffunc</codeph> is not specified, then the
            ending state value is used as the aggregate result, and the return type is
              <varname>state_data_type</varname>. </pd></plentry><plentry><pt><varname>initial_condition</varname></pt><pd>The initial setting for the state value. This must be a string constant in the form accepted for
            the data type <varname>state_data_type</varname>. If not specified, the state value starts out
              <codeph>NULL</codeph>. </pd></plentry><plentry><pt><varname>sort_operator</varname></pt><pd>The associated sort operator for a MIN- or MAX-like aggregate function.
This is just an operator name (possibly schema-qualified). The operator
is assumed to have the same input data types as the aggregate function
(which must be a single-argument aggregate function). </pd></plentry></parml></section><section id="section6"><title>Notes</title><p>The ordinary functions used to define a new aggregate function must
be defined first. Note that in this release of Greenplum Database, it
is required that the <varname>sfunc</varname>, <varname>ffunc</varname>, and <varname>prefunc</varname> functions
used to create the aggregate are defined as <codeph>IMMUTABLE</codeph>.</p><p>If a user-defined aggregate is used in a window expression, a <codeph>prefunc</codeph>
function must be defined for the aggregate. </p><p>If the value of the Greenplum Database server configuration parameter
<codeph>gp_enable_multiphase_agg</codeph> is <codeph>off</codeph>, only
single-level aggregation is performed. </p><p>Any compiled code (shared library files) for custom functions must
be placed in the same location on every host in your Greenplum Database
array (master and all segments). This location must also be in the <codeph>LD_LIBRARY_PATH</codeph>
so that the server can locate the files.</p></section><section id="section7"><title>Example</title><p>The following simple example creates an aggregate function that computes
the sum of two columns. </p><p>Before creating the aggregate function, create two functions that
are used as the <codeph>SFUNC</codeph> and <codeph>PREFUNC</codeph> functions
of the aggregate function. </p><p>This function is specified as the <codeph>SFUNC</codeph> function
in the aggregate function.</p><codeblock>CREATE FUNCTION mysfunc_accum(numeric, numeric, numeric) 
  RETURNS numeric
   AS 'select $1 + $2 + $3'
   LANGUAGE SQL
   IMMUTABLE
   RETURNS NULL ON NULL INPUT;</codeblock><p>This function is specified as the <codeph>PREFUNC</codeph> function in
the aggregate function.</p><codeblock>CREATE FUNCTION mypre_accum(numeric, numeric )
  RETURNS numeric
   AS 'select $1 + $2'
   LANGUAGE SQL
   IMMUTABLE
   RETURNS NULL ON NULL INPUT;</codeblock><p>This <codeph>CREATE AGGREGATE</codeph> command creates the aggregate function
that adds two columns. </p><codeblock>CREATE AGGREGATE agg_prefunc(numeric, numeric) (
   SFUNC = mysfunc_accum,
   STYPE = numeric,
   PREFUNC = mypre_accum,
   INITCOND = 0 );</codeblock><p>The following commands create a table, adds some rows, and runs the aggregate
function.</p><codeblock>create table t1 (a int, b int) DISTRIBUTED BY (a);
insert into t1 values
   (10, 1),
   (20, 2),
   (30, 3);
select agg_prefunc(a, b) from t1;</codeblock><p>This <codeph>EXPLAIN</codeph> command shows two phase aggregation. </p><codeblock>explain select agg_prefunc(a, b) from t1;

QUERY PLAN
-------------------------------------------------------------------------- 
Aggregate (cost=1.10..1.11 rows=1 width=32)  
 -&gt; Gather Motion 2:1 (slice1; segments: 2) (cost=1.04..1.08 rows=1
      width=32)
     -&gt; Aggregate (cost=1.04..1.05 rows=1 width=32)
       -&gt; Seq Scan on t1 (cost=0.00..1.03 rows=2 width=8)
 (4 rows)</codeblock></section><section id="section8"><title>Compatibility</title><p><codeph>CREATE AGGREGATE</codeph> is a Greenplum Database language extension.
The SQL standard does not provide for user-defined aggregate functions.</p></section><section id="section9"><title>See Also</title><p><codeph><xref href="ALTER_AGGREGATE.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="./DROP_AGGREGATE.xml#topic1" type="topic" format="dita"/></codeph>,
            <codeph><xref href="./CREATE_FUNCTION.xml#topic1" type="topic" format="dita"
        /></codeph></p></section></body></topic>
