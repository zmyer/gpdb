<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ih135496">Summary of Built-in Functions</title>
  <abstract>Greenplum Database supports built-in functions and operators including analytic
    functions and window functions that can be used in window expressions. For information about
    using built-in Greenplum Database functions see, "Using Functions and Operators" in the
      <cite>Greenplum Database Administrator Guide</cite>.</abstract>
  <body>
    <p>
      <ul id="ul_tpq_zwq_kr">
        <li>
          <xref href="#topic27" format="dita"/>
        </li>
        <li>
          <xref format="dita" href="#topic29" type="topic"/>
        </li>
        <li>
          <xref format="dita" href="#topic30" type="topic"/>
        </li>
        <li>
          <xref format="dita" href="#topic31" type="topic"/>
        </li>
      </ul>
    </p>
  </body>
  <topic id="topic27" xml:lang="en">
    <title id="in201560">Greenplum Database Function Types</title>
    <body>
      <p>Greenplum Database evaluates functions and operators used in SQL expressions. Some
        functions and operators are only allowed to execute on the master since they could lead to
        inconsistencies in Greenplum Database segment instances. This table describes the Greenplum
        Database Function Types.</p>
      <table id="in201681">
        <title>Functions in Greenplum Database</title>
        <tgroup cols="4">
          <colspec colname="col1" colnum="1" colwidth="77*"/>
          <colspec colname="col2" colnum="2" colwidth="86*"/>
          <colspec colname="col3" colnum="3" colwidth="144*"/>
          <colspec colname="col4" colnum="4" colwidth="144*"/>
          <thead>
            <row>
              <entry colname="col1">Function Type</entry>
              <entry colname="col2">Greenplum Support</entry>
              <entry colname="col3">Description</entry>
              <entry colname="col4">Comments</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">IMMUTABLE</entry>
              <entry colname="col2">Yes</entry>
              <entry colname="col3">Relies only on information directly in its argument list. Given
                the same argument values, always returns the same result.</entry>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">STABLE</entry>
              <entry colname="col2">Yes, in most cases</entry>
              <entry colname="col3">Within a single table scan, returns the same result for same
                argument values, but results change across SQL statements.</entry>
              <entry colname="col4">Results depend on database lookups or parameter values.
                  <codeph>current_timestamp</codeph> family of functions is <codeph>STABLE</codeph>;
                values do not change within an execution.</entry>
            </row>
            <row>
              <entry colname="col1">VOLATILE</entry>
              <entry colname="col2">Restricted</entry>
              <entry colname="col3">Function values can change within a single table scan. For
                example: <codeph>random()</codeph>, <codeph>currval()</codeph>,
                  <codeph>timeofday()</codeph>.</entry>
              <entry colname="col4">Any function with side effects is volatile, even if its result
                is predictable. For example: <codeph>setval()</codeph>.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p>In Greenplum Database, data is divided up across segments â€” each segment is a distinct
        PostgreSQL database. To prevent inconsistent or unexpected results, do not execute functions
        classified as <codeph>VOLATILE</codeph> at the segment level if they contain SQL commands or
        modify the database in any way. For example, functions such as <codeph>setval()</codeph> are
        not allowed to execute on distributed data in Greenplum Database because they can cause
        inconsistent data between segment instances.</p>
      <p>To ensure data consistency, you can safely use <codeph>VOLATILE</codeph> and
          <codeph>STABLE</codeph> functions in statements that are evaluated on and run from the
        master. For example, the following statements run on the master (statements without a
          <codeph>FROM</codeph> clause):</p>
      <p>
        <codeblock>SELECT setval('myseq', 201);
SELECT foo();
</codeblock>
      </p>
      <p>If a statement has a <codeph>FROM</codeph> clause containing a distributed table <i>and</i>
        the function in the <codeph>FROM</codeph> clause returns a set of rows, the statement can
        run on the segments:</p>
      <p>
        <codeblock>SELECT * from foo();
</codeblock>
      </p>
      <p>Greenplum Database does not support functions that return a table reference
          (<codeph>rangeFuncs</codeph>) or functions that use the <codeph>refCursor</codeph>
        datatype.</p>
    </body>
  </topic>
  <topic id="topic29" xml:lang="en">
    <title id="in141007">Built-in Functions and Operators</title>
    <body>
      <p>The following table lists the categories of built-in functions and operators supported by
        PostgreSQL. All functions and operators are supported in Greenplum Database as in PostgreSQL
        with the exception of <codeph>STABLE</codeph> and <codeph>VOLATILE</codeph> functions, which
        are subject to the restrictions noted in <xref href="#topic27" format="dita"/>. See the
          <xref format="html" href="https://www.postgresql.org/docs/8.3/static/functions.html"
          scope="external">Functions and Operators</xref> section of the PostgreSQL documentation
        for more information about these built-in functions and operators.</p>
      <table id="in204913">
        <title>Built-in functions and operators</title>
        <tgroup cols="4">
          <colspec colname="col1" colnum="1" colwidth="129.02*"/>
          <colspec colname="col2" colnum="2" colwidth="108*"/>
          <colspec colname="col3" colnum="3" colwidth="144*"/>
          <colspec colname="col4" colnum="4" colwidth="86*"/>
          <thead>
            <row>
              <entry colname="col1">Operator/Function Category</entry>
              <entry colname="col2">VOLATILE Functions</entry>
              <entry colname="col3">STABLE Functions</entry>
              <entry colname="col4">Restrictions</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions.html#FUNCTIONS-LOGICAL"
                  scope="external">Logical Operators</xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-comparison.html"
                  scope="external">Comparison Operators</xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-math.html"
                  scope="external">
                  <ph>Mathematical Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2">random<p>setseed</p></entry>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-string.html"
                  scope="external">
                  <ph>String Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2">
                <i>All built-in conversion functions</i>
              </entry>
              <entry colname="col3">convert<p>pg_client_encoding</p></entry>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-binarystring.html"
                  scope="external">
                  <ph>Binary String Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-bitstring.html"
                  scope="external">
                  <ph>Bit String Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="http://www.postgresql.org/docs/8.3/static/functions-matching.html"
                  scope="external">
                  <ph>Pattern Matching</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-formatting.html"
                  scope="external">
                  <ph>Data Type Formatting Functions</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3">to_char<p>to_timestamp</p></entry>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-datetime.html"
                  scope="external">
                  <ph>Date/Time Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2">timeofday</entry>
              <entry colname="col3"
                  >age<p>current_date</p><p>current_time</p><p>current_timestamp</p><p>localtime</p><p>localtimestamp</p><p>now</p></entry>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-geometry.html"
                  scope="external">
                  <ph>Geometric Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-net.html"
                  scope="external">
                  <ph>Network Address Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-sequence.html"
                  scope="external">
                  <ph>Sequence Manipulation Functions</ph>
                </xref>
              </entry>
              <entry colname="col2">currval<p>lastval</p><p>nextval</p><p>setval</p></entry>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-conditional.html"
                  scope="external">
                  <ph>Conditional Expressions</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-array.html"
                  scope="external">
                  <ph>Array Functions and Operators</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3">
                <i>All array functions</i>
              </entry>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-aggregate.html"
                  scope="external">
                  <ph>Aggregate Functions</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-subquery.html"
                  scope="external">
                  <ph>Subquery Expressions</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-comparisons.html"
                  scope="external">
                  <ph>Row and Array Comparisons</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-srf.html"
                  scope="external">
                  <ph>Set Returning Functions</ph>
                </xref>
              </entry>
              <entry colname="col2">generate_series</entry>
              <entry colname="col3"/>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-info.html"
                  scope="external">
                  <ph>System Information Functions</ph>
                </xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3">
                <i>All session information functions</i>
                <p>
                  <i>All access privilege inquiry functions</i>
                </p>
                <p>
                  <i>All schema visibility inquiry functions</i>
                </p>
                <p>
                  <i>All system catalog information functions</i>
                </p>
                <p>
                  <i>All comment information functions</i>
                </p>
              </entry>
              <entry colname="col4"/>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/functions-admin.html"
                  scope="external">
                  <ph>System Administration Functions</ph>
                </xref>
              </entry>
              <entry colname="col2"
                  >set_config<p>pg_cancel_backend</p><p>pg_reload_conf</p><p>pg_rotate_logfile</p><p>pg_start_backup</p><p>pg_stop_backup</p><p>pg_size_pretty</p><p>pg_ls_dir</p><p>pg_read_file</p><p>pg_stat_file</p></entry>
              <entry colname="col3">current_setting<p><i>All database object size
                functions</i></p></entry>
              <entry colname="col4"><b>Note:</b> The function <codeph>pg_column_size</codeph>
                displays bytes required to store the value, perhaps with TOAST compression.</entry>
            </row>
            <row>
              <entry colname="col1">
                <xref format="html"
                  href="http://www.postgresql.org/docs/9.1/interactive/functions-xml.html"
                  scope="external">XML Functions</xref>
              </entry>
              <entry colname="col2"/>
              <entry colname="col3">xmlagg(xml)<p>xmlexists(text,
                  xml)</p><p>xml_is_well_formed(text)</p><p>xml_is_well_formed_document(text)</p><p>xml_is_well_formed_content(text)</p><p>xpath(text,
                  xml)</p><p>xpath(text, xml, text[])</p><p>xpath_exists(text,
                  xml)</p><p>xpath_exists(text, xml,
                  text[])</p><p>xml(text)</p><p>text(xml)</p><p>xmlcomment(xml)</p><p>xmlconcat2(xml,
                  xml)</p></entry>
              <entry colname="col4"/>
            </row>
          </tbody>
        </tgroup>
      </table>
    </body>
  </topic>
  <topic id="topic30" xml:lang="en">
    <title id="in179666">Window Functions</title>
    <body>
      <p>The following built-in window functions are Greenplum extensions to the PostgreSQL
        database. All window functions are <i>immutable</i>. For more information about window
        functions, see "Window Expressions" in the <cite>Greenplum Database Administrator
          Guide</cite>.</p>
      <table id="in164369">
        <title>Window functions</title>
        <tgroup cols="4">
          <colspec colname="col1" colnum="1" colwidth="87.46*"/>
          <colspec colname="col2" colnum="2" colwidth="59*"/>
          <colspec colname="col3" colnum="3" colwidth="180*"/>
          <colspec colname="col4" colnum="4" colwidth="121.77*"/>
          <thead>
            <row>
              <entry colname="col1">Function</entry>
              <entry colname="col2">Return Type</entry>
              <entry colname="col3">Full Syntax</entry>
              <entry colname="col4">Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <codeph>cume_dist()</codeph>
              </entry>
              <entry colname="col2">
                <codeph>double precision</codeph>
              </entry>
              <entry colname="col3">
                <codeph>CUME_DIST() OVER ( [PARTITION BY </codeph>
                <ph>expr</ph>
                <codeph>] ORDER BY </codeph>
                <ph>expr</ph>
                <codeph> )</codeph>
              </entry>
              <entry colname="col4">Calculates the cumulative distribution of a value in a group of
                values. Rows with equal values always evaluate to the same cumulative distribution
                value.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>dense_rank()</codeph>
              </entry>
              <entry colname="col2">
                <codeph>bigint</codeph>
              </entry>
              <entry colname="col3">
                <codeph>DENSE_RANK () OVER ( [PARTITION BY </codeph>
                <ph>expr</ph>
                <codeph>] ORDER BY </codeph>
                <ph>expr</ph>
                <codeph>)</codeph>
              </entry>
              <entry colname="col4">Computes the rank of a row in an ordered group of rows without
                skipping rank values. Rows with equal values are given the same rank value.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>first_value(<i>expr</i>)</codeph>
              </entry>
              <entry colname="col2">same as input <ph>expr</ph> type</entry>
              <entry colname="col3">
                <codeph>FIRST_VALUE(</codeph>
                <ph>expr</ph>
                <codeph>) OVER ( [PARTITION BY </codeph>
                <ph>expr</ph>
                <codeph>] ORDER BY </codeph>
                <ph>expr</ph>
                <codeph> [ROWS|RANGE </codeph>
                <ph>frame_expr</ph>
                <codeph>] )</codeph>
              </entry>
              <entry colname="col4">Returns the first value in an ordered set of values.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>lag(<i>expr</i> [,<i>offset</i>] [,<i>default</i>])</codeph>
              </entry>
              <entry colname="col2">same as input <i>expr</i> type</entry>
              <entry colname="col3">
                <codeph>LAG(</codeph>
                <i>expr</i>
                <codeph> [,</codeph>
                <i>offset</i>
                <codeph>] [,</codeph>
                <i>default</i>
                <codeph>]) OVER ( [PARTITION BY </codeph>
                <i>expr</i>
                <codeph>] ORDER BY </codeph>
                <i>expr</i>
                <codeph> )</codeph>
              </entry>
              <entry colname="col4">Provides access to more than one row of the same table without
                doing a self join. Given a series of rows returned from a query and a position of
                the cursor, <codeph>LAG</codeph> provides access to a row at a given physical offset
                prior to that position. The default <codeph>offset</codeph> is 1. <i>default</i>
                sets the value that is returned if the offset goes beyond the scope of the window.
                If <i>default</i> is not specified, the default value is null.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>last_value<i>expr</i></codeph>
              </entry>
              <entry colname="col2">same as input <i>expr</i> type</entry>
              <entry colname="col3">
                <codeph>LAST_VALUE(<i>expr</i>) OVER ( [PARTITION BY <i>expr</i>] ORDER BY
                    <i>expr</i> [ROWS|RANGE <i>frame_expr</i>] )</codeph>
              </entry>
              <entry colname="col4">Returns the last value in an ordered set of values.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>
                  <codeph>lead(<i>expr</i> [,<i>offset</i>] [,<i>default</i>])</codeph>
                </codeph>
              </entry>
              <entry colname="col2">same as input <i>expr</i> type</entry>
              <entry colname="col3">
                <codeph>LEAD(<i>expr </i>[,<i>offset</i>] [,<i>expr</i><i>default</i>]) OVER (
                  [PARTITION BY <i>expr</i>] ORDER BY <i>expr</i> )</codeph>
              </entry>
              <entry colname="col4">Provides access to more than one row of the same table without
                doing a self join. Given a series of rows returned from a query and a position of
                the cursor, <codeph>lead</codeph> provides access to a row at a given physical
                offset after that position. If <i>offset</i> is not specified, the default offset is
                1. <i>default</i> sets the value that is returned if the offset goes beyond the
                scope of the window. If <i>default</i> is not specified, the default value is
                null.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>ntile(<i>expr</i>)</codeph>
              </entry>
              <entry colname="col2">bigint</entry>
              <entry colname="col3">
                <codeph>NTILE(<i>expr</i>) OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr</i>
                  )</codeph>
              </entry>
              <entry colname="col4">Divides an ordered data set into a number of buckets (as defined
                by <i>expr</i>) and assigns a bucket number to each row.</entry>
            </row>
            <row>
              <entry colname="col1"><codeph>percent_rank(</codeph>)</entry>
              <entry colname="col2">
                <codeph>double precision</codeph>
              </entry>
              <entry colname="col3">
                <codeph>PERCENT_RANK () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr
                  </i>)</codeph>
              </entry>
              <entry colname="col4">Calculates the rank of a hypothetical row <codeph>R</codeph>
                minus 1, divided by 1 less than the number of rows being evaluated (within a window
                partition).</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>rank()</codeph>
              </entry>
              <entry colname="col2">bigint</entry>
              <entry colname="col3">
                <codeph>RANK () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr </i>)</codeph>
              </entry>
              <entry colname="col4">Calculates the rank of a row in an ordered group of values. Rows
                with equal values for the ranking criteria receive the same rank. The number of tied
                rows are added to the rank number to calculate the next rank value. Ranks may not be
                consecutive numbers in this case.</entry>
            </row>
            <row>
              <entry colname="col1"><codeph>row_number(</codeph>)</entry>
              <entry colname="col2">
                <codeph>bigint</codeph>
              </entry>
              <entry colname="col3">
                <codeph>ROW_NUMBER () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr
                  </i>)</codeph>
              </entry>
              <entry colname="col4">Assigns a unique number to each row to which it is applied
                (either each row in a window partition or each row of the query).</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </body>
  </topic>
  <topic id="topic31" xml:lang="en">
    <title id="in184703">Advanced Analytic Functions</title>
    <body>
      <p>The following built-in advanced analytic functions are Greenplum extensions of the
        PostgreSQL database. Analytic functions are <i>immutable</i>.</p>
      <table id="in207312">
        <title>Advanced Analytic Functions</title>
        <tgroup cols="4">
          <colspec colname="col1" colnum="1" colwidth="1*"/>
          <colspec colname="col2" colnum="2" colwidth="1*"/>
          <colspec colname="col3" colnum="3" colwidth="1*"/>
          <colspec colname="col4" colnum="4" colwidth="1*"/>
          <thead>
            <row>
              <entry colname="col1">Function</entry>
              <entry colname="col2">Return Type</entry>
              <entry colname="col3">Full Syntax</entry>
              <entry colname="col4">Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <codeph>matrix_add(array[], array[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>smallint[], int[], bigint[], float[]</codeph>
              </entry>
              <entry colname="col3"><codeph>matrix_add( array[[1,1],[2,2]],
                  array[[3,4],[5,6]]</codeph>)</entry>
              <entry colname="col4">Adds two two-dimensional matrices. The matrices must be
                conformable.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>matrix_multiply( array[], array[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>smallint[]int[], bigint[], float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>matrix_multiply( array[[2,0,0],[0,2,0],[0,0,2]],
                  array[[3,0,3],[0,3,0],[0,0,3]] )</codeph>
              </entry>
              <entry colname="col4">Multiplies two, three- dimensional arrays. The matrices must be
                conformable.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>matrix_multiply( array[], <i>expr</i>)</codeph>
              </entry>
              <entry colname="col2">
                <codeph>int[], float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>matrix_multiply( array[[1,1,1], [2,2,2], [3,3,3]], 2)</codeph>
              </entry>
              <entry colname="col4">Multiplies a two-dimensional array and a scalar numeric
                value.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>matrix_transpose( array[])</codeph>
              </entry>
              <entry colname="col2">Same as input <codeph>array</codeph> type.</entry>
              <entry colname="col3">
                <codeph>matrix_transpose( array [[1,1,1],[2,2,2]])</codeph>
              </entry>
              <entry colname="col4">Transposes a two-dimensional array.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>pinv(array [])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>smallint[]int[], bigint[], float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>pinv(array[[2.5,0,0],[0,1,0],[0,0,.5]]) </codeph>
              </entry>
              <entry colname="col4">Calculates the Moore-Penrose pseudoinverse of a matrix.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>unnest (array[])</codeph>
              </entry>
              <entry colname="col2">set of <codeph>anyelement</codeph></entry>
              <entry colname="col3">
                <codeph>unnest( array['one', 'row', 'per', 'item'])</codeph>
              </entry>
              <entry colname="col4">Transforms a one dimensional array into rows. Returns a set of
                  <codeph>anyelement</codeph>, a polymorphic <xref format="html"
                  href="https://www.postgresql.org/docs/8.3/static/datatype-pseudo.html"
                  scope="external"><ph>pseudotype in PostgreSQL</ph></xref>.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table id="in2073121">
        <title>Advanced Aggregate Functions</title>
        <tgroup cols="4">
          <colspec colname="col1" colnum="1" colwidth="102.44*"/>
          <colspec colname="col2" colnum="2" colwidth="59*"/>
          <colspec colname="col3" colnum="3" colwidth="201.99*"/>
          <colspec colname="col4" colnum="4" colwidth="128*"/>
          <thead>
            <row>
              <entry colname="col1">Function</entry>
              <entry colname="col2">Return Type</entry>
              <entry colname="col3">Full Syntax</entry>
              <entry colname="col4">Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <codeph>MEDIAN (<i>expr</i>)</codeph>
              </entry>
              <entry colname="col2">
                <codeph>timestamp, timestampz, interval, float</codeph>
              </entry>
              <entry colname="col3">
                <codeph>MEDIAN (<i>expression</i>)</codeph>
                <p>
                  <i>Example:</i>
                </p>
                <codeblock>SELECT department_id, MEDIAN(salary) 
FROM employees 
GROUP BY department_id; </codeblock>
              </entry>
              <entry colname="col4">Can take a two-dimensional array as input. Treats such arrays as
                matrices.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>PERCENTILE_CONT (<i>expr</i>) WITHIN GROUP (ORDER BY <i>expr</i>
                  [DESC/ASC])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>timestamp, timestampz, interval, float</codeph>
              </entry>
              <entry colname="col3">
                <codeph>PERCENTILE_CONT(<i>percentage</i>) WITHIN GROUP (ORDER BY
                  <i>expression</i>)</codeph>
                <p>
                  <i>Example:</i>
                </p>
                <codeblock>SELECT department_id,
PERCENTILE_CONT (0.5) WITHIN GROUP (ORDER BY salary DESC)
"Median_cont"; 
FROM employees GROUP BY department_id;</codeblock>
              </entry>
              <entry colname="col4">Performs an inverse distirbution function that assumes a
                continuous distribution model. It takes a percentile value and a sort specification
                and returns the same datatype as the numeric datatype of the argument. This returned
                value is a computed result after performing linear interpolation. Null are ignored
                in this calculation.</entry>
            </row>
            <row>
              <entry colname="col1"><codeph>PERCENTILE_DISC (<i>expr</i>) WITHIN GROUP (ORDER BY
                    <i>expr</i> [DESC/ASC]</codeph>)</entry>
              <entry colname="col2">
                <codeph>timestamp, timestampz, interval, float</codeph>
              </entry>
              <entry colname="col3">
                <codeph>PERCENTILE_DISC(<i>percentage</i>) WITHIN GROUP (ORDER BY
                  <i>expression</i>)</codeph>
                <p>
                  <i>Example:</i>
                </p>
                <codeblock>SELECT department_id, 
PERCENTILE_DISC (0.5) WITHIN GROUP (ORDER BY salary DESC)
"Median_desc"; 
FROM employees GROUP BY department_id;</codeblock>
              </entry>
              <entry colname="col4">Performs an inverse distirbution function that assumes a
                discrete distribution model. It takes a percentile value and a sort specification.
                This returned value is an element from the set. Null are ignored in this
                calculation.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>sum(array[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>smallint[]int[], bigint[], float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>sum(array[[1,2],[3,4]])</codeph>
                <p>
                  <i>Example:</i>
                </p>
                <codeblock>CREATE TABLE mymatrix (myvalue int[]);
INSERT INTO mymatrix VALUES (array[[1,2],[3,4]]);
INSERT INTO mymatrix VALUES (array[[0,1],[1,0]]);
SELECT sum(myvalue) FROM mymatrix;
 sum 
---------------
 {{1,3},{4,4}}</codeblock>
              </entry>
              <entry colname="col4">Performs matrix summation. Can take as input a two-dimensional
                array that is treated as a matrix.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>pivot_sum (label[], label, expr)</codeph>
              </entry>
              <entry colname="col2">
                <codeph>int[], bigint[], float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>pivot_sum( array['A1','A2'], attr, value)</codeph>
              </entry>
              <entry colname="col4">A pivot aggregation using sum to resolve duplicate
                entries.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>mregr_coef(expr, array[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>mregr_coef(y, array[1, x1, x2])</codeph>
              </entry>
              <entry colname="col4">The four <codeph>mregr_* </codeph>aggregates perform linear
                regressions using the ordinary-least-squares method. <codeph>mregr_coef</codeph>
                calculates the regression coefficients. The size of the return array for
                  <codeph>mregr_coef</codeph> is the same as the size of the input array of
                independent variables, since the return array contains the coefficient for each
                independent variable.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>mregr_r2 (<i>expr</i>, array[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>float</codeph>
              </entry>
              <entry colname="col3">
                <codeph>mregr_r2(y, array[1, x1, x2])</codeph>
              </entry>
              <entry colname="col4">The four <codeph>mregr_* </codeph>aggregates perform linear
                regressions using the ordinary-least-squares method. <codeph>mregr_r2</codeph>
                calculates the r-squared error value for the regression.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>mregr_pvalues(<i>expr</i>, array[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>mregr_pvalues(y, array[1, x1, x2])</codeph>
              </entry>
              <entry colname="col4">The four <codeph>mregr_* </codeph>aggregates perform linear
                regressions using the ordinary-least-squares method. <codeph>mregr_pvalues</codeph>
                calculates the p-values for the regression.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>mregr_tstats(<i>expr</i>, array[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>float[]</codeph>
              </entry>
              <entry colname="col3">
                <codeph>mregr_tstats(y, array[1, x1, x2])</codeph>
              </entry>
              <entry colname="col4">The four <codeph>mregr_* </codeph>aggregates perform linear
                regressions using the ordinary-least-squares method. <codeph>mregr_tstats</codeph>
                calculates the t-statistics for the regression.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>nb_classify(text[], bigint, bigint[], bigint[])</codeph>
              </entry>
              <entry colname="col2">
                <codeph>text</codeph>
              </entry>
              <entry colname="col3">
                <codeph>nb_classify(classes, attr_count, class_count, class_total)</codeph>
              </entry>
              <entry colname="col4">Classify rows using a Naive Bayes Classifier. This aggregate
                uses a baseline of training data to predict the classification of new rows and
                returns the class with the largest likelihood of appearing in the new rows.</entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>nb_probabilities(text[], bigint, bigint[], bigint[])</codeph>
              </entry>
              <entry colname="col2">text</entry>
              <entry colname="col3">
                <codeph>nb_probabilities(classes, attr_count, class_count, class_total)</codeph>
              </entry>
              <entry colname="col4">Determine probability for each class using a Naive Bayes
                Classifier. This aggregate uses a baseline of training data to predict the
                classification of new rows and returns the probabilities that each class will appear
                in new rows.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </body>
  </topic>
</topic>
