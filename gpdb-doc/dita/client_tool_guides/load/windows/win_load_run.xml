<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en"><title id="nx138244">Running Greenplum Loader</title><body><p>This section contains information for defining a load job and running the Greenplum loader
      program (<codeph><xref href="./gploadpy.xml#topic1" type="topic" format="dita"/></codeph>). </p><ul><li id="nx151030"><xref href="#topic2" type="topic" format="dita"/></li><li id="nx151038"><xref href="#topic3" type="topic" format="dita"/></li><li id="nx151042"><xref href="#topic4" type="topic" format="dita"/></li><li id="nx151046"><xref href="#topic12" type="topic" format="dita"/></li><li id="nx151051"><xref href="#topic13" type="topic" format="dita"/></li><li id="nx151056"><xref href="#topic14" type="topic" format="dita"/></li><li id="nx151061"><xref href="#topic15" type="topic" format="dita"/></li></ul></body><topic id="topic2" xml:lang="en"><title id="nx150076">Before You Begin</title><body><p>Before you can run Greenplum loader:</p><ol><li id="nx150081">Make sure you have installed and configured Python and the Greenplum
loader programs. See <xref href="win_load_install.xml#topic1" type="topic" format="dita"/>.</li><li id="nx150629">Make sure that you have network access to and from all hosts in your
Greenplum Database array (master and segments), and to and from the hosts
where the data to be loaded resides (if not on the local machine).</li><li id="nx150630">Make sure that the ports you declare in your load control file are unblocked
by your Windows firewall.</li><li id="nx150089">Make sure your Greenplum Database system is up and running and that
you know all of the connection information (host name, port, role name,
database name, etc.).</li><li id="nx150090">Create your database, schema, and table structures in Greenplum Database
prior to loading data.</li><li id="nx150103">Prepare your data so that it is in a format acceptable by Greenplum
loader. See <xref href="#topic4" type="topic" format="dita"/>.</li><li id="nx150107">Write your control file. The control file specifies the source data,
load rules, and target table for loading the data. See <xref href="#topic3" type="topic" format="dita"/>.</li></ol></body></topic><topic id="topic3" xml:lang="en"><title id="nx150113">Creating the Load Control File</title><body><p>Before you can run Greenplum loader (<codeph>gpload.py</codeph>), you must create a text file
        that contains the load specification information. This file must be in valid <xref
          href="http://yaml.org/spec/1.1/" scope="external" format="html">YAML 1.1</xref> document
        format and use the Greenplum schema for defining the various steps of a load operation. See
          <xref href="./gploadpy.xml" type="topic" format="dita"/> for details on the correct
        control file format and schema.</p><p>Here is an example of a load control file:</p><codeblock>---
VERSION: 1.0.0.1
DATABASE: ops
USER: gpadmin
HOST: mdw-1
PORT: 5432
GPLOAD:
   INPUT:
    - SOURCE:
         LOCAL_HOSTNAME:
           - etl1-1
           - etl1-2
           - etl1-3
           - etl1-4
         PORT: 8081
         FILE: 
           - /var/load/data/*
    - COLUMNS:
           - name: text
           - amount: float4
           - category: text
           - desc: text
           - date: date
    - FORMAT: text
    - DELIMITER: '|'
    - ERROR_LIMIT: 25
    - ERROR_TABLE: payables.err_expenses
   OUTPUT:
    - TABLE: payables.expenses
    - MODE: INSERT
   SQL:
   - BEFORE: "INSERT INTO audit VALUES('start', current_timestamp)"
   - AFTER: "INSERT INTO audit VALUES('end', current_timestamp)"
</codeblock></body></topic><topic id="topic4" xml:lang="en"><title id="nx150134">Formatting the Input Data</title><body><p>When you use Greenplum loader, you need to specify how your data is
formatted. Data can be in either delimited text (<codeph>TEXT</codeph>)
or comma separated values (<codeph>CSV</codeph>) format. External data
must be formatted correctly in order to be read by Greenplum Database.
This section explains the format of data files expected by Greenplum
Database.</p><ul><li id="nx151761"><xref href="#topic5" type="topic" format="dita"/></li><li id="nx151765"><xref href="#topic6" type="topic" format="dita"/></li><li id="nx151769"><xref href="#topic7" type="topic" format="dita"/></li><li id="nx151773"><xref href="#topic8" type="topic" format="dita"/></li><li id="nx151777"><xref href="#topic11" type="topic" format="dita"/></li></ul></body><topic id="topic5" xml:lang="en"><title id="nx151779">Formatting Rows</title><body><p>Greenplum Database expects rows of data to be separated by the <codeph>LF</codeph>
character (Line feed, <codeph>0x0A</codeph>), <codeph>CR</codeph> (Carriage
return, <codeph>0x0D</codeph>), or <codeph>CR</codeph> followed by <codeph>LF</codeph>
(<codeph>CR+LF</codeph>, <codeph>0x0D 0x0A</codeph>). <codeph>LF</codeph>
is the standard newline representation on UNIX or UNIX-like operating
systems. Other operating systems (such as Windows or Mac OS 9) may use
<codeph>CR</codeph> individually, or <codeph>CR+LF</codeph>. All of these
representations of a newline are supported by Greenplum Database as a
row delimiter.</p></body></topic><topic id="topic6" xml:lang="en"><title id="nx151788">Formatting Columns</title><body><p>The default column or field delimiter is the horizontal <codeph>TAB</codeph>
character (<codeph>0x09</codeph>) for text files and the comma character
(<codeph>0x2C</codeph>) for CSV files. However, it is possible to declare
another single character delimiter using the <codeph>DELIMITER</codeph>
attribute in the load configuration file. The delimiter character must
only appear between any two data value fields. Do not place a delimiter
at the beginning or end of a row. For example, if using the pipe character
( | ) as your delimiter:</p><codeblock>data value 1 | data value 2 | data value 3</codeblock></body></topic><topic id="topic7" xml:lang="en"><title id="nx151801">Representing NULL Values</title><body><p><codeph>NULL</codeph> is the value used to represent an unknown piece
of data in a column or field. Within your data files you can designate
a string to represent null values. The default string is <codeph>\N</codeph>
(backslash-N) in <codeph>TEXT</codeph> mode, or an empty value with no
quotations in <codeph>CSV</codeph> mode. You can also declare a different
string using the <codeph>NULL</codeph> attribute in the load configuration
file. For example, you might prefer an empty string for cases where you
do not want to distinguish nulls from empty strings. When using the Greenplum
Database loading tools, any data item that matches the designated null
string will be considered a null value.</p></body></topic><topic id="topic8" xml:lang="en"><title id="nx151816">Escaping</title><body><p>The data file has two reserved characters that have special meaning
to Greenplum Database:</p><ul><li id="nx151821">The designated delimiter character, which is used to separate columns
or fields in the data file. </li><li id="nx151822">The newline character used to designate a new row in the data file.</li></ul><p>If your data contains either of these characters, you must escape the character so Greenplum
          treats it as data and not as a field separator or new row. By default, the escape
          character is a backslash (<codeph>\</codeph>) for text-formatted files and a double quote
            (<codeph>"</codeph>) for csv-formatted files.</p></body><topic id="topic9" xml:lang="en"><title>Escaping in Text Formatted Files</title><body><p>By default, the escape character is a backslash (<codeph>\</codeph>) for text-formatted files. If
            you want to use a different escape character, use the <codeph>ESCAPE</codeph> attribute
            in the load configuration file. In cases where your selected escape character is present
            in your data, you can use it to escape itself. </p><p>For example, suppose you have a table with three columns and you want
to load the following three fields:</p><ul><li id="nx151839"><codeph>backslash = \</codeph></li><li id="nx151840"><codeph>vertical bar = |</codeph></li><li id="nx151841"><codeph>exclamation point = !</codeph></li></ul><p>Your designated delimiter character is pipe (<codeph>|</codeph>), and your designated escape
            character is backslash (<codeph>\</codeph>). The formatted row in your data file would
            look like this:</p><codeblock>backslash = <b>\</b>\ | vertical bar = <b>\</b>| | exclamation point = !</codeblock><p>Notice how the backslash character that is part of the data is escaped
with another backslash character, and the pipe character that is part
of the data is escaped with a backslash character.</p><p>The escape character can also be used to escape octal and hexidecimal
sequences. When used in this way, the escaped value will get converted
to the equivalent character when loaded into Greenplum Database. For
example, to load the ampersand character (<codeph>&amp;</codeph>), you
could use the escape character to escape its equivalent hexidecimal (<codeph>\0x26</codeph>)
or octal (<codeph>\046</codeph>) representation.</p><p>If there is no need to escape the data in text-formatted files, you can disable escaping using
            the <codeph>ESCAPE</codeph> clause of the <codeph>COPY</codeph> and <codeph>CREATE
              EXTERNAL</codeph><codeph>TABLE</codeph> commands or the <codeph>ESCAPE</codeph>
            attribute of the load control file for <codeph><xref href="./gploadpy.xml#topic1"
                type="topic" format="dita"/></codeph> as follows:</p><codeblock>ESCAPE 'OFF'</codeblock><p>This is useful for input data that contains a lot of backslash characters
within the data itself (such as web log data). </p></body></topic><topic id="topic10" xml:lang="en"><title id="nx151862">Escaping in CSV Formatted Files</title><body><p>By default, the escape character is a double quote (<codeph>"</codeph>) for CSV-formatted files.
            If you want to use a different escape character, use the <codeph>ESCAPE</codeph> clause
            of <codeph>COPY</codeph> and <codeph>CREATE EXTERNAL</codeph><codeph>TABLE</codeph>
            commands or the <codeph>ESCAPE</codeph> attribute of the load control file for
                <codeph><xref href="./gploadpy.xml#topic1" type="topic" format="dita"/></codeph> to
            declare a different escape character. In cases where your selected escape character is
            present in your data, you can use it to escape itself.</p><p>For example, suppose you have a table with three columns and you want
to load the following three fields:</p><ul><li id="nx151874"><codeph>Free trip to A,B</codeph></li><li id="nx151875"><codeph>5.89</codeph></li><li id="nx151876"><codeph>Special rate "1.79"</codeph></li></ul><p>Your designated delimiter character is comma (<codeph>,</codeph>), and your designated escape
            character is double quote (<codeph>"</codeph>). The formatted row in your data file
            would look like this:</p><codeblock><b>"</b>Free trip to A,B<b>"</b> ,<b>"</b>5.89<b>"</b> ,<b>"</b>Special rate <b>""</b>1.79<b>"""</b></codeblock><p>Notice how that for the comma character that is part of the data, the
entire data value is enclosed in double quotes. Also notice how the double
quotes that are part of the data are also escaped with a double quote
even though the field value is enclosed in double quotes. </p><p>Embedding the entire field inside a set of double quotes also guarantees preservation of leading
            and trailing whitespace
            characters:<codeblock><b>"</b>Free trip to A,B <b>"</b> ,<b>"</b>5.89 <b>"</b> ,<b>"</b>Special rate <b>""</b>1.79<b>"" "</b></codeblock></p></body></topic></topic><topic id="topic11" xml:lang="en"><title id="nx151883">Character Encoding</title><body><p>A character encoding system consists of a code that pairs each character
from a given repertoire with something else, such as a sequence of numbers
or octets, in order to facilitate the transmission and storage of data.
The character set support in Greenplum Database allows you to store text
in a variety of character sets, including single-byte character sets
such as the ISO 8859 series and multiple-byte character sets such as
EUC (Extended UNIX Code), UTF-8, and Mule internal code. All supported
character sets can be used transparently by clients, but a few are not
supported for use within the server (that is, as a server-side encoding).</p><p>Data files must be in a character encoding recognized by Greenplum
Database. See the <i>Greenplum Database Reference Guide</i> for the supported
character sets. Data files that contain invalid or unsupported encoding
sequences will encounter errors when loading into Greenplum Database. </p><note type="note">On data files generated on a Microsoft Windows operating system, try running the
            <codeph>dos2unix</codeph> system command to remove any Windows-only characters prior to
          loading into Greenplum Database.</note></body></topic></topic><topic id="topic12" xml:lang="en"><title id="nx151963">Running Greenplum Loader</title><body><p>Greenplum loader is invoked by running the <codeph>gpload.py</codeph> program from a Windows
        command-line session. For complete command syntax and options, see <codeph><xref
            href="./gploadpy.xml#topic1" type="topic" format="dita"/></codeph>.</p></body></topic><topic id="topic13" xml:lang="en"><title id="nx150372">Greenplum Loader Log Files</title><body><p>By default, <codeph>gpload.py</codeph> creates a directory called <codeph>gpAdminLogs</codeph> in
        the same location from where you execute the program and writes its log files there.
        Alternatively, you can use the <codeph>-l</codeph> option when executing
          <codeph>gpload.py</codeph> to direct the log output to a different location. See <xref
          href="./gploadpy.xml" type="topic" format="dita"/> for the format of these log files.</p></body></topic><topic id="topic14" xml:lang="en"><title id="nx150400">Updating Database Statistics After Data Loads</title><body><p>After loading data, always run the <codeph>ANALYZE</codeph> SQL command to update the database
        statistics used by the query planner. <codeph>ANALYZE</codeph> collects statistics about the
        contents of tables in the database, and stores the results in the system table
          <codeph>pg_statistic</codeph>. The query planner uses these statistics to help determine
        the most efficient execution plans for queries. For example, to collect statistics on a
        newly loaded table, run the following on the Greenplum master host:</p><codeblock>psql <varname>dbname</varname> -c 'ANALYZE <varname>mytable</varname>;'</codeblock></body></topic><topic id="topic15" xml:lang="en"><title id="nx150406">Vacumming the Database After Load Errors</title><body><p>The Greenplum loader will stop a load operation if it encounters an
error. When this happens, the target table may already have received
earlier rows in the load operation. Although these rows will not be visible
or accessible, they still occupy disk space. This may amount to a considerable
amount of wasted disk space if the failure happened well into a large
load operation. You may wish to invoke the <codeph>VACUUM</codeph> command
to recover the wasted space. For example, run the following command on
the master host after a load error:</p><codeblock>vacummdb <varname>dbname</varname> [<varname>table_name</varname>]</codeblock><p><codeph>VACUUM</codeph> reclaims storage occupied by deleted tuples. In
normal operation, tuples that are deleted or obsoleted by an update are
not physically removed from their table; they remain present until a
<codeph>VACUUM</codeph> is done. Therefore it's recommended to do <codeph>VACUUM</codeph>
periodically, especially on frequently-updated tables.</p></body></topic></topic>