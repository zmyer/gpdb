<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_vrn_nrg_yq">
  <title>Configuring IPsec for Greenplum Database
  </title>
  <shortdesc>This topic describes how to set up and configure Internet Protocol Security (IPsec) for
    a Greenplum Database cluster. </shortdesc>
  <body>
    <ul id="ul_rsn_sgc_wr">
      <li id="li_bq1_tgc_wr">
        <xref href="#topic_rb4_pgc_wr" format="dita"/>
      </li>
      <li>
        <xref href="#topic_o42_hg4_yq" format="dita"/>
      </li>
      <li>
        <xref href="#topic_k4k_1dh_yq" format="dita"/>
      </li>
    </ul>
  </body>
  <topic id="topic_rb4_pgc_wr">
    <title id="title_kql_tgc_wr">IPsec Overview</title>
    <body id="body_apq_x3c_wr">
      <p>Internet Protocol Security (IPsec) is a suite of protocols that authenticate and encrypt
        communications at the IP network level (OSI layer 3). Using IPsec can help to prevent
        network attacks, such as packet sniffing, altering network packets, identity spoofing, and
        man-in-the-middle attacks in the Greenplum Database system.</p>
      <p>When IPsec is enabled for Greenplum Database, a virtual private network
        (VPN), or tunnel, is established between every pair of hosts in the cluster and every packet
        exchanged between them is encrypted and sent through the tunnel. If you have <i>n</i> hosts
        in the cluster, <i>n</i>(<i>n</i>-1)/2 VPNs are needed to connect each host to every other
        host. You may choose to add other hosts on the network, for example ETL servers, to the
        IPsec configuration. </p>
      <p>Encrypting IP traffic has a cost in network performance. To ensure suitable network
        bandwidth is available after IPsec configuration, use the Greenplum Database
        <codeph>gpcheckperf</codeph> utility. See the Greenplum Database Utility Guide
        for help with <codeph>gpcheckperf</codeph>. If network bandwidth is insufficient for
        performance and database workloads you may need to tune the configuration or use a higher
        bandwidth network medium.</p>
      <p>This section describes how to set up and configure IPsec for a Greenplum cluster on Red Hat
        or CentOS hosts using Openswan, a popular IPsec implementation for Linux. Openswan provides
        user tools to enable IPsec on Linux. It uses the Internet Key Exchange (IKE) protocol and
        X.509 certificates to handshake and exchange session keys, and uses the netlink API to
        interface with the IPsec support built into the Linux kernel.</p>
      <p>The IKE protocol allows two peers to negotiate the authentication and encryption algorithms
        the tunnels will use. The negotiation occurs in two phases. During phase 1, the peers
        perform a Diffie-Hellman key exchange to establish a secure, encrypted channel. Phase 1 must
        successfully complete before phase 2 begins. </p>
      <p>During phase 2, the peers negotiate the authentication and encryption algorithms to be used
        with the IPsec tunnels. The result of the phase 2 negotiation is a <i>security
          association</i> (SA). It contains the source, the destination, and an instruction. The
        Linux kernel uses the SA to set up the connection. </p>
      <p>The peers can authenticate each other using one of the following methods:<ul
          id="ul_bsy_nbl_5r">
          <li>RSA public key encryption. Each host has a public and private key. Public keys are
            distributed to all hosts in the cluster so that any host can authenticate any other
            host. </li>
          <li>Pre-shared keys. This method is easiest to configure, but is not as secure as using
            RSA public key encryption. </li>
          <li>X.509 certificates. A certificate is issued for each host by a certificate authority
            (CA). The host is authenticated based on trust conferred by the CA. This is most often
            used when many hosts connect to a central gateway. </li>
        </ul></p>
      <p>RSA public key encryption is the preferred method. </p>
      <p>There are two connection modes for a connection: tunnel or transport. In tunnel mode, the
        entire IP packet is encrypted, including the IP headers. In transport mode, the headers are
        exposed. The tunnel mode is preferred for greater security.</p>
      <p>The following resources are recommended for additional information about IPsec and
          Openswan:<ul id="ul_qd4_pgc_wr">
          <li><xref href="http://en.wikipedia.org/wiki/Internet_Key_Exchange" format="html"
              scope="external">Internet Key Exchange</xref> (IKE) - Wikipedia article that describes
            the IKE protocol used to set up a security association.</li>
          <li><xref href="http://en.wikipedia.org/wiki/Security_association" format="html"
              scope="external">Security Association</xref> - Wikipedia article that describes the
            attributes and purpose of a security association. </li>
          <li><xref href="http://en.wikipedia.org/wiki/AES_instruction_set" format="html"
              scope="external">AES instruction set</xref> - Wikipedia article that provides an
            overview of the Intel Advanced Encryption Standard (AES) instruction set and lists the
            CPU families that support it. </li>
          <li><xref href="http://linux.die.net/man/5/ipsec.conf" format="html" scope="external"
              >ipsec.conf(5)</xref> - man page for the <filepath>ipsec.conf</filepath> configuration
            file.</li>
          <li><xref href="http://linux.die.net/man/8/setkeyhost-to-host" format="html"
              scope="external">setkey(8)</xref> - man page for the <codeph>setkey</codeph> utility
            used to manage the Security Association Database (SAD) and Security Policy Database
            (SPD) in the Linux kernel. </li>
          <li><xref
              href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/openswan.html"
              format="html" scope="external">Openswan</xref> - Red Hat Openswan package overview;
            applies to CentOS also. </li>
          <li><xref
              href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/Host-To-Host_VPN_Using_Openswan.html"
              format="html" scope="external">Host-to-Host VPN Using Openswan</xref> - Red Hat guide
            for creating a host-to-host VPN using Openswan; can also be used with CentOS. </li>
        </ul>
      </p>
    </body>
  </topic>
  <topic id="topic_o42_hg4_yq">
    <title>Installing Openswan</title>
    <body id="body_rsx_jcj_wr">
      <p>Openswan may be installed using the package manager on your system, by downloading an
        installable package from the Openswan Web site, or by downloading and compiling source
        code.</p>
      <p id="p_amc_4cj_wr">Use Openswan version 2.6.43 or later. If your
        package manager has an earlier version, you can download an RPM of the latest Openswan
        release from the Openswan Web site. You can also download Openswan source code from the
        Openswan Web site. </p>
      <p>The following instructions assume you are installing Openswan on hosts running 64-bit Red
        Hat 6.x or CentOS 6.x.</p>
      <p>First, determine if Openswan is already installed and if so, which
        version:<codeblock>$ sudo yum info installed openswan</codeblock></p>
      <p>If the recommended version is already installed, continue with <xref
          href="#topic_o42_hg4_yq/section_kpp_mcj_wr" format="dita"/>.</p>
      <p>If an older version is installed, uninstall it before
        continuing:<codeblock>$ sudo yum remove openswan</codeblock></p>
      <section>
        <title>Installing Openswan with an RPM </title>
        <p>Enter the following command to see which version of Openswan is available in the package
          repository: <codeblock>$ sudo yum list available openswan</codeblock></p>
        <p>If the recommended version is available, install it on each host in the
          cluster:<codeblock>$ sudo yum install -y openswan</codeblock></p>
        <p>If the recommended version is not in the repository, you can download it from the
          Openswan Web site at <xref href="https://download.openswan.org" format="html"
            scope="external"/>. Browse to the <codeph>/rhel6/x86_64</codeph> directory to find the
          RPM. </p>
        <p>Install the downloaded RPM with a command like the
          following:<codeblock>$ sudo rpm -i openswanX-<varname>version</varname>.x86_64.rpm</codeblock></p>
      </section>
      <section id="section_lwv_4cj_wr">
        <title>Installing Openswan from Source</title>
        <p>If you cannot install Openswan with an RPM you can download the source, compile it, and
          install it. </p>
        <ol id="ol_cqp_r1k_5r">
          <li>Download the Openswan source from the Openswan Web site at <xref
              href="https://download.openswan.org/openswan/" format="html" scope="external">Openswan
              Web site</xref>. </li>
          <li>Extract the archive and review the <filepath>README</filepath> file to ensure that the
            prerequisite packages are installed on your build machine. For
            example:<codeblock>sudo yum install gmp gmp-devel gawk flex bison \
    iproute2 iptables sed awk bash cut python</codeblock></li>
          <li>Build the Openswan tools by following the instructions in the
              <filepath>README</filepath> file. For
            example:<codeblock>$ make programs
$ sudo make install</codeblock></li>
        </ol>
      </section>
      <section id="section_kpp_mcj_wr">
        <title>Configuring and Verifying the Openswan Installation</title>
        <p>Follow the steps in this section to configure each host and verify the Openswan
          installation. </p>
        <ol id="ol_ghl_2cj_wr">
          <li>Edit <filepath>/etc/sysctl.conf</filepath> and modify or add the following
              variables:<codeblock>net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.ip_forward = 1</codeblock><p>Execute
                <codeph>sysctl -p</codeph> to reload the file.</p></li>
          <li>Restore the default SELinux security contexts for the IPsec directory by running the
            following command:<codeblock># restorecon -Rv /etc/ipsec.d</codeblock></li>
          <li>If a firewall is enabled, modify it to allow IPsec packets:<ul id="ul_gzl_vrj_wr">
              <li>UDP port 500 for the Internet Key Exchange (IKE) protocol</li>
              <li>UDP port 4500 for IKE NAT-Traversal</li>
              <li>Protocol 50 for Encapsulated Security Payload (ESP) IPsec packets</li>
              <li>
                <i>(not recommended)</i> Protocol 51 for Authenticated Header (AH) IPsec
                packets</li>
            </ul><p>Here is an example of IPsec rules for
              iptables:<codeblock>iptables -A INPUT -p udp --sport 500 --dport 500 -j ACCEPT
iptables -A OUTPUT -p udp --sport 500 --dport 500 -j ACCEPT
iptables -A INPUT -p udp --sport 4500 --dport 4500 -j ACCEPT
iptables -A OUTPUT -p udp --sport 4500 --dport 4500 -j ACCEPT
iptables -A INPUT -p 50 -j ACCEPT
iptables -A OUTPUT -p 50 -j ACCEPT</codeblock>
            </p></li>
          <li>Edit the <filepath>/etc/ipsec.conf</filepath> file and make the following changes:<ul
              id="ul_vqp_wj3_wr">
              <li>Change <codeph>protostack</codeph> from <codeph>auto</codeph> to
                  <codeph>netkey</codeph>:<codeblock>protostack=netkey</codeblock></li>
              <li>Uncomment or add the following
                line:<codeblock>include /etc/ipsec.d/*.conf</codeblock> This allows you to create
                and install a separate configuration file for each host-to-host tunnel. </li>
            </ul></li>
          <li>Start IPsec with the <codeph>service</codeph> command.
            <codeblock># service start ipsec</codeblock></li>
          <li>Run <codeph>ipsec verify</codeph> to check the IPsec installation. Python must be
            installed to run this command. <codeblock>$ sudo ipsec verify</codeblock><p>The output
              looks like the
              following:<codeblock>Checking if IPsec got installed and started correctly:

Version check and ipsec on-path                          [OK]
Openswan U2.6.43/K2.6.32-504.16.2.el6.x86_64 (netkey)
See `ipsec --copyright' for copyright information.
Checking for IPsec support in kernel                     [OK]
 NETKEY: Testing XFRM related proc values
         ICMP default/send_redirects                     [OK]
         ICMP default/accept_redirects                   [OK]
         XFRM larval drop                                [OK]
Hardware random device check                      	     [N/A]
Two or more interfaces found, checking IP forwarding     [OK]
Checking rp_filter                                	     [ENABLED]
 /proc/sys/net/ipv4/conf/all/rp_filter                   [ENABLED]
 /proc/sys/net/ipv4/conf/lo/rp_filter                    [ENABLED]
 /proc/sys/net/ipv4/conf/eth0/rp_filter                  [ENABLED]
 /proc/sys/net/ipv4/conf/pan0/rp_filter                  [ENABLED]
Checking that pluto is running                           [OK]
 Pluto listening for IKE on udp 500                      [OK]
 Pluto listening for IKE on tcp 500                      [NOT IMPLEMENTED]
 Pluto listening for IKE/NAT-T on udp 4500               [OK]
 Pluto listening for IKE/NAT-T on tcp 4500               [NOT IMPLEMENTED]
 Pluto listening for IKE on tcp 10000 (cisco)            [NOT IMPLEMENTED]
Checking NAT and MASQUERADEing                           [TEST INCOMPLETE]
Checking 'ip' command                                    [OK]
Checking 'iptables' command                              [OK]
</codeblock></p><note>The
              result for <codeph>Checking 'ip' command</codeph> may be <codeph>[IP XFRM
                BROKEN]</codeph>, depending on the version of iproute on your system. This  can be a
              misdiagnosis caused by a change in IP XFRM message output between iproute versions.
            </note></li>
          <li>Enable starting IPsec on boot with the following
            command:<codeblock># chkconfig ipsec on</codeblock></li>
        </ol>
      </section>
    </body>
  </topic>
  <topic id="topic_k4k_1dh_yq">
    <title>Configuring Openswan Connections </title>
    <body>
      <p>Set up an IPsec tunnel between each pair of hosts on the cluster by creating a connection.
        On each connection, one host is designated the "left" host and the other the "right" host.
        For example, if you have a master (mdw), a standby master (smdw), and three segment hosts
        (sdw1, sdw2, sdw3), you will need ten connections, as shown in the following table. <table
          frame="all" id="table_pqn_k4c_wr">
          <title>IPsec connections for a five-host cluster</title>
          <tgroup cols="3">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <colspec colname="c3" colnum="3" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>Connection Number</entry>
                <entry>Left host</entry>
                <entry>Right host</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>1</entry>
                <entry>mdw</entry>
                <entry>smdw</entry>
              </row>
              <row>
                <entry>2</entry>
                <entry>mdw</entry>
                <entry>sdw1</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>mdw</entry>
                <entry>sdw2</entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>mdw</entry>
                <entry>sdw3</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>smdw</entry>
                <entry>sdw1</entry>
              </row>
              <row>
                <entry>6</entry>
                <entry>smdw</entry>
                <entry>sdw2</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>smdw</entry>
                <entry>sdw3</entry>
              </row>
              <row>
                <entry>8</entry>
                <entry>sdw1</entry>
                <entry>sdw2</entry>
              </row>
              <row>
                <entry>9</entry>
                <entry>sdw1</entry>
                <entry>sdw3</entry>
              </row>
              <row>
                <entry>10</entry>
                <entry>sdw2</entry>
                <entry>sdw3</entry>
              </row>
            </tbody>
          </tgroup>
        </table></p>
      <p>Complete these tasks to configure connections:<ul id="ul_dvy_kjp_wr">
          <li><xref href="#topic_k4k_1dh_yq/section_v4w_gjp_wr" format="dita"/></li>
          <li><xref href="#topic_k4k_1dh_yq/section_yyj_4jp_wr" format="dita"/></li>
          <li><xref href="#topic_k4k_1dh_yq/section_wbr_hjp_wr" format="dita"/></li>
        </ul></p>
      <section id="section_v4w_gjp_wr">
        <title>Create Host Keys</title>
        <p>To enable RSA public key authentication for the tunnels, each host must have an RSA key
          pair. As the root user on each host, enter the following command to generate an
          authentication key.
          <codeblock># ipsec newhostkey --output /etc/ipsec.d/ipsec.secrets --bits 4096</codeblock></p>
        <p>The key is saved in the <filepath>/etc/ipsec.d/ipsec.secrets</filepath> file and its
          attributes are set to allow access to the root user only.</p>
        <p>To view a host's public key, use the <codeph>ipsec showhostkey</codeph> command with the
            <codeph>--left</codeph> or <codeph>--right</codeph> option. The command outputs the
          public key in a format suitable for pasting into the connection configuration file. In
          this example, the keys are shortened for readability:
          <codeblock># ipsec showhostkey --left
	# rsakey AQOW+RwpL
	leftrsasigkey=0sAQOW+RwpLg7CGoyywCnv+vnasGJI7...
# ipsec showhostkey --right
	# rsakey AQOW+RwpL
	rightrsasigkey=0sAQOW+RwpLg7CGoyywCnv+vnasGJI7... 
</codeblock></p>
        <p>You will need to use this command as you configure the tunnel between each host pair.</p>
      </section>
      <section id="section_yyj_4jp_wr">
        <title>Create a Connection Configuration File</title>
        <p>IPsec tunnels are configured by creating a <codeph>conn</codeph> section in the
            <codeph>/etc/ipsec.conf</codeph> file. Because we added the <codeph>include
            /etc/ipsec.d/*.conf</codeph> directive to <codeph>/etc/ipsec.conf</codeph>, we can
          create a <codeph>.conf</codeph> file for each connection.</p>
        <p>Follow these steps to configure a connection for each pair of hosts. <ol
            id="ol_cm2_clc_wr">
            <li>Log in to the host that will be on the "left" side of the tunnel. </li>
            <li>Create a new configuration file in the <codeph>/etc/ipsec.d</codeph> directory.
              Choose a name that includes both host names and has a <codeph>.conf</codeph>
              extension. The following configuration file, named <codeph>mdw-sdw1.conf</codeph>,
              configures the connection between the hosts mdw and
                sdw1:<codeblock>conn mdw-sdw1
    leftid=mdw 
    left=192.0.2.214
    leftrsasigkey=0sAQOW+RwpLg7CGoyywCnv+vnasGJI7... # shortened for readability
    rightid=sdw1 
    right=192.0.2.215
    rightrsasigkey=0sAQNfdDCoDte5bGaGLGkHTKa5GMRl... # shortened for readability
    type=tunnel
    authby=rsasig   
    ike=aes192-sha2;dh20
    phase2alg=aes_gcm_c-160-null    
    auto=start
</codeblock><p>See
                the <xref href="http://linux.die.net/man/5/ipsec.conf" format="html"
                  scope="external"><filepath>ipsec.conf</filepath></xref> man page for the complete
                list of available parameters and their default values. </p><p>The connection name in
                the example is <codeph>mdw-sdw1</codeph>. </p><p>For the
                  <codeph>leftrsasigkey</codeph> use the output from running <codeph>ipsec
                  showhostkey --left</codeph> on the "left" host. For
                  <codeph>rightrsasigkey</codeph> use the output from running <codeph>ipsec
                  showhostkey --right</codeph> on the "right" host.</p><p>Following are
                recommendations for configuring parameters for Greenplum Database
                IPsec connections to obtain the best security and performance:<parml>
                  <plentry>
                    <pt>type</pt>
                    <pd>Set to <codeph>tunnel</codeph>, the default mode.</pd>
                  </plentry>
                  <plentry>
                    <pt>authby</pt>
                    <pd>Set to <codeph>rsasig</codeph>. This is more secure than using pre-shared
                      keys (<codeph>psk</codeph>). </pd>
                  </plentry>
                  <plentry>
                    <pt>auto</pt>
                    <pd>Set to <codeph>start</codeph> so that the tunnel is brought up when IPsec
                      starts up. </pd>
                  </plentry>
                  <plentry>
                    <pt>ike</pt>
                    <pd>The <codeph>ike</codeph> parameter is used during phase 1 to authenticate
                      the peers and negotiate secure session keys for phase2. The parameter value is
                      an entry in the
                        format:<codeblock><codeph><varname>cipher-hash;modpgroup</varname>, <varname>cipher-hash;modpgroup</varname>, .... </codeph></codeblock><ul
                        id="ul_vvp_mhk_5r">
                        <li><codeph><varname>cipher</varname></codeph> is an encryption algorithm.
                          AES is more secure than 3DES, which is more secure than DES. AES has
                          length of 128, 192, or 256 bits. The more bits, the stronger the
                          encryption, but more time is required for computation. </li>
                        <li><codeph><varname>hash</varname></codeph> is the hash algorithm. SHA2 is
                          stronger than SHA1, which is stronger than MD5. SHA2 is recommended, but
                          if SHA2 is not supported on the device, use SHA1.  SHA2 is a family of
                          hash functions—SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224,
                          SHA-512/256—not all of which are supported by Openswan. To find out which
                          algorithms Openswan supports, run the following command after starting the
                            <codeph>ipsec</codeph>
                          service:<codeblock># ipsec auto -status
000 algorithm IKE hash: id=2, name=OAKLEY_SHA1, hashsize=20
000 algorithm IKE hash: id=4, name=OAKLEY_SHA2_256, hashsize=32
000 algorithm IKE hash: id=6, name=OAKLEY_SHA2_512, hashsize=64
000 algorithm ESP encrypt: id=2, name=ESP_DES, ivlen=8, keysizemin=64, keysizemax=64
000 algorithm ESP encrypt: id=3, name=ESP_3DES, ivlen=8, keysizemin=192, keysizemax=192
000 algorithm ESP encrypt: id=18, name=ESP_AES_GCM_A, ivlen=8, keysizemin=160,
      keysizemax=288000 algorithm ESP encrypt: id=19, name=ESP_AES_GCM_B, ivlen=12, keysizemin=160,
      keysizemax=288
000 algorithm ESP encrypt: id=20, name=ESP_AES_GCM_C, ivlen=16, keysizemin=160,
      keysizemax=288</codeblock>See
                            <xref href="http://en.wikipedia.org/wiki/SHA-2" format="html"
                            scope="external"/> for information about SHA2.</li>
                        <li><codeph><varname>modpgroup</varname></codeph> is the Diffie-Hellman
                          group. The peers negotiate a shared secret using the Diffie-Hellman
                          protocol. The Diffie-Hellman group is a set of standardized parameters the
                          peers agree to use as the basis for their calculations. The groups are
                          numbered, and higher numbered groups are more secure (and more
                          compute-intensive) than lower numbered groups. Avoid the lowest numbered
                          groups: 1 (<codeph>modp768</codeph>), 3 (<codeph>modp1024</codeph>), and 5
                            (<codeph>modp1576</codeph>), which are not considered secure. Choose a
                          higher level group, such as <codeph>dh14</codeph>, <codeph>dh15</codeph>,
                            <codeph>dh19</codeph>, <codeph>dh20</codeph>, <codeph>dh21</codeph>, or
                            <codeph>dh24</codeph>. </li>
                      </ul></pd>
                  </plentry>
                  <plentry>
                    <pt>phase2</pt>
                    <pd>Set to <codeph>esp</codeph>, the default, to encrypt data. The
                        <codeph>ah</codeph> setting creates a connection that authenticates, but
                      does not encrypt IP packets. </pd>
                  </plentry>
                  <plentry>
                    <pt>phase2alg</pt>
                    <pd>The <codeph>phase2alg</codeph> parameter specifies algorithms to use for
                      encrypting and authenticating data. The format and defaults are the same as
                      for the <codeph>ike</codeph> parameter. </pd>
                    <pd>The AES cipher and SHA hash algorithm are more secure. For effective use of
                      emerging 10-gigabit and 40-gigabit network devices, and to enable high speed
                      communication channels, the AES_GCM algorithm is currently the recommended
                      best option. To use AES_GCM, verify that the CPU supports the AES_NI
                      instruction set. See <xref
                        href="http://en.wikipedia.org/wiki/AES_instruction_set" format="html"
                        scope="external">AES instruction set</xref> for a list of CPUs that support
                      AES_NI.</pd>
                    <pd>To see if the CPU supports AES-NI, see if the <codeph>aes</codeph> flag is
                      set in
                      <filepath>/proc/cpuinfo</filepath>:<codeblock>grep aes /proc/cpuinfo</codeblock></pd>
                    <pd>To see if AES-N1 has been <i>enabled</i>, search
                        <codeph>/proc/crypto</codeph> for the
                      module:<codeblock>grep module /proc/crypto | sort -u</codeblock></pd>
                    <pd>To see if the <codeph>aesni_intel</codeph> kernel module is
                      loaded:<codeblock>/sbin/modinfo aesni_intel</codeblock></pd>
                    <pd>To specify the AES_GCM algorithm, use the following
                      syntax:<codeblock>phase2alg=aes_gcm_c-160-null</codeblock>Openswan requires
                      adding the salt size (32 bits) to the key size (128, 192, or 256 bits). In the
                      example above, "160" is calculated by adding a 128-bit key size to the 32 bit
                      salt size. The other valid values are 224 and 288. </pd>
                  </plentry>
                </parml></p></li>
            <li>Use <codeph>scp</codeph> to copy the configuration file to the "right" host. For
              example:<codeblock># scp /etc/ipsec.d/mdw-sdw1.conf sdw1:/etc/ipsec.d/</codeblock></li>
            <li>Ensure that IPsec is started by executing the following command on both the "left"
              and "right" hosts:<codeblock># ipsec service start</codeblock></li>
            <li>Load the tunnel on both left and right hosts with the following
              command:<codeblock># ipsec auto --add mdw-sdw</codeblock></li>
            <li>Bring up the tunnel on both left and right hosts with the following
              command:<codeblock># ipsec auto --up mdw-sdw</codeblock></li>
          </ol></p>
      </section>
      <section id="section_wbr_hjp_wr">
        <title>Test the IPsec Connection</title>
      </section>
      <p>To verify IPsec packets are flowing through a network interface, run the following
          <codeph>tcdump</codeph> command on one host and then ping that host from another host.
        <codeblock>tcdump -n -i <varname>interface_name</varname> host <varname>hostname</varname></codeblock></p>
      <p>For example, run the <codeph>tcpdump</codeph> command on sdw1 and then, on mdw,
          <codeph>ping
        sdw2</codeph>:<codeblock># tcpdump -n -i eth0 host mdw
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
08:22:10.186743 IP 192.0.2.214 > 192.0.2.215: ESP(spi=0xe56f19ea,seq=0x1), length 132
08:22:10.186808 IP 192.0.2.214 > 192.0.2.215: ICMP echo request, id 30987, seq 1, length 64
08:22:10.186863 IP 192.0.2.215 > 192.0.2.214: ESP(spi=0x4e55824c,seq=0x1), length 132
08:22:11.189663 IP 192.0.2.214 > 192.0.2.215: ESP(spi=0xe56f19ea,seq=0x2), length 132
08:22:11.189707 IP 192.0.2.214 > 192.0.2.215: ICMP echo request, id 30987, seq 2, length 64
</codeblock></p>
      <p>The ESP packets verify that the IP packets are encrypted and encapsulated. </p>
      <p>When you have connections set up between all of the hosts in the cluster and Greenplum
        Database is running, you can run the <codeph>tcpdump</codeph> command on segment hosts to
        observe database activity in the IPsec tunnels. </p>
    </body>
  </topic>
</topic>
