<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic77">
   <title>Write a Transform</title>
   <body>
      <p>The transform specifies what to extract from the data.You can use any authoring
                    environment and language appropriate for your project. For XML transformations
                    Pivotal suggests choosing a technology such as XSLT, Joost (STX), Java, Python,
                    or Perl, based on the goals and scope of the project.</p>
      <p>In the price example, the next step is to transform the XML data into a simple
                    two-column delimited format.</p>
      <p>
         <codeblock>708421|19.99
708466|59.25
711121|24.99
</codeblock>
      </p>
      <p>The following STX transform, called <i>input_transform.stx</i>, completes the
                    data transformation.</p>
      <codeblock>&lt;?xml version="1.0"?&gt;
&lt;stx:transform version="1.0"
   xmlns:stx="http://stx.sourceforge.net/2002/ns"
   pass-through="none"&gt;
  &lt;!-- declare variables --&gt;
  &lt;stx:variable name="itemnumber"/&gt;
  &lt;stx:variable name="price"/&gt;
  &lt;!-- match and output prices as columns delimited by | --&gt;
  &lt;stx:template match="/prices/pricerecord"&gt;
    &lt;stx:process-children/&gt;
    &lt;stx:value-of select="$itemnumber"/&gt;    
&lt;stx:text&gt;|&lt;/stx:text&gt;
    &lt;stx:value-of select="$price"/&gt;      &lt;stx:text&gt;
&lt;/stx:text&gt;
  &lt;/stx:template&gt;
  &lt;stx:template match="itemnumber"&gt;
    &lt;stx:assign name="itemnumber" select="."/&gt;
  &lt;/stx:template&gt;
  &lt;stx:template match="price"&gt;
    &lt;stx:assign name="price" select="."/&gt;
  &lt;/stx:template&gt;
&lt;/stx:transform&gt;
</codeblock>
      <p>This STX transform declares two temporary variables, <codeph>itemnumber</codeph>
                    and <codeph>price</codeph>, and the following rules. </p>
      <ol>
         <li id="du186530">When an element that satisfies the XPath expression
                            <codeph>/prices/pricerecord</codeph> is found, examine the child
                        elements and generate output that contains the value of the
                            <codeph>itemnumber</codeph> variable, a <codeph>|</codeph> character,
                        the value of the price variable, and a newline.</li>
         <li id="du186531">When an <codeph>&lt;itemnumber&gt;</codeph> element is found,
                        store the content of that element in the variable
                            <codeph>itemnumber</codeph>.</li>
         <li id="du186677">When a &lt;price&gt; element is found, store the content of
                        that element in the variable <codeph>price</codeph>.</li>
      </ol>
   </body>
</topic>