Copyright (C) 2004-2015 Pivotal Software, Inc. All rights reserved.

This program and the accompanying materials are made available under
the terms of the under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

================================================================================
TINC (a.k.a. "TINC Is Not Cdbfast") ============================================
================================================================================

	TINC is a new attempt at Greenplum's core testing infrastructure. From it's
name, it should be clear that TINC is designed with the pitfalls of its
predecessor in mind. The most important of these requirements is a philosophy
of rigid design at the core of the project. CDBFast lacked this quality, and
it's one that we'll strongly adhere to under TINC.

----------------------------------------
Guidelines to run the tests
----------------------------------------
* Source greenplum_path.sh before sourcing tinc_env.sh

* Run `make <test target>`
  E.g. make storage_queryfinish_and_transactionmanagement
  You can find targets in the top level Makefile $TINCHOME/Makefile.

  -- OR --

  Run `python tinc.py discover <test/directory/path>`
  E.g. python tinc.py discover tincrepo/mpp/gpdb/tests/storage/basic/lock

  -- OR --

  Run `python tinc.py <test.path>`
  E.g. python tinc.py mpp.gpdb.tests.storage.basic.lock.test_locks

  Check `python tinc.py --help` for more details on running tests from tinc.py.

* Log files are created in a "log" directory which detail the steps executed as
  part of the test run. This is a helpful resource to utilize on test failure
  investigation.


----------------------------------------
Rules ----------------------------------
----------------------------------------

	Rule #1: Read PEP8! <http://www.python.org/dev/peps/pep-0008/>

	Rule #2: See Rule #1.

The above usually covers most concerns. Here are a few extra ones we feel
strongly about:

* Always source greenplum_path.sh, then tinc_env.sh (in that order.)
* Use unittest asserts, rather than python's "assert" keyword, when possible.
  This will result in more descriptive output during AssertionErrors.
* Alphabetize imports. (It's reasonable to break this for grouping. As with
  all of these rules, readability is the key.)
* Add docstrings.
* No numbering in test case name.
