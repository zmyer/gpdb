-- start_ignore
SET optimizer=off;
SET
-- end_ignore
-- @product_version gpdb: [4.3.2-4.3.98]
CREATE TABLE my_tt_agg_small (
    symbol character(16),
    event_ts bigint,
    trade_price numeric,
    trade_volume bigint
) DISTRIBUTED BY (symbol);
CREATE TABLE
CREATE TABLE my_tq_agg_small (
    ets bigint,
    sym character varying(16),
    bid_price numeric,
    ask_price numeric,
    end_ts bigint
) DISTRIBUTED BY (ets);
CREATE TABLE
COPY my_tt_agg_small (symbol, event_ts, trade_price, trade_volume) FROM stdin;
COPY my_tq_agg_small (ets, sym, bid_price, ask_price, end_ts) FROM stdin;
CREATE INDEX my_tq_agg_small_ets_end_ts_ix ON my_tq_agg_small USING btree (ets, end_ts);
CREATE INDEX
analyze my_tq_agg_small;
ANALYZE
analyze my_tt_agg_small;
ANALYZE
-- force_explain
EXPLAIN 
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=7250.73..7251.76 rows=412 width=16)
   Merge Key: fivemin
   ->  Sort  (cost=7250.73..7251.76 rows=206 width=16)
         Sort Key: partial_aggregation.unnamed_attr_1
         ->  HashAggregate  (cost=7227.69..7232.84 rows=206 width=16)
               Group By: "?column1?"
               ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=7210.18..7221.51 rows=206 width=16)
                     Hash Key: unnamed_attr_1
                     ->  HashAggregate  (cost=7210.18..7213.27 rows=206 width=16)
                           Group By: tt.event_ts / 100000 / 5 * 5
                           ->  Hash Join  (cost=29.30..6983.21 rows=22697 width=8)
                                 Hash Cond: tq.sym::bpchar = tt.symbol
                                 Join Filter: tt.event_ts >= tq.ets AND tt.event_ts < tq.end_ts
                                 ->  Seq Scan on my_tq_agg_small tq  (cost=0.00..26.27 rows=1014 width=20)
                                 ->  Hash  (cost=18.80..18.80 rows=420 width=25)
                                       ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..18.80 rows=420 width=25)
                                             ->  Seq Scan on my_tt_agg_small tt  (cost=0.00..6.20 rows=210 width=25)
 Settings:  optimizer=off
(18 rows)

  
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
   fivemin    | count 
--------------+-------
 201011261015 |     2
 201011261045 |     1
 201011261110 |     1
 201011261125 |     1
 201011261240 |     1
 201011261245 |     1
 201011261315 |     2
 201011261320 |     3
(8 rows)

  
set enable_hashjoin=off;
SET
set enable_seqscan=off;
SET
set enable_mergejoin=off;
SET
set enable_nestloop=on;
SET
set enable_indexscan=on;
SET
-- force_explain
EXPLAIN 
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=13721.17..13722.20 rows=412 width=16)
   Merge Key: fivemin
   ->  Sort  (cost=13721.17..13722.20 rows=206 width=16)
         Sort Key: partial_aggregation.unnamed_attr_1
         ->  HashAggregate  (cost=13698.13..13703.28 rows=206 width=16)
               Group By: "?column1?"
               ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=13680.62..13691.95 rows=206 width=16)
                     Hash Key: unnamed_attr_1
                     ->  HashAggregate  (cost=13680.62..13683.71 rows=206 width=16)
                           Group By: tt.event_ts / 100000 / 5 * 5
                           ->  Nested Loop  (cost=0.00..13453.65 rows=22697 width=8)
                                 Join Filter: tq.sym::bpchar = tt.symbol
                                 ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..18.80 rows=420 width=25)
                                       ->  Seq Scan on my_tt_agg_small tt  (cost=0.00..6.20 rows=210 width=25)
                                 ->  Index Scan using my_tq_agg_small_ets_end_ts_ix on my_tq_agg_small tq  (cost=0.00..11.65 rows=113 width=20)
                                       Index Cond: tt.event_ts >= tq.ets AND tt.event_ts < tq.end_ts
 Settings:  enable_hashjoin=off; enable_indexscan=on; enable_mergejoin=off; enable_nestloop=on; enable_seqscan=off; optimizer=off
(17 rows)

SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
   fivemin    | count 
--------------+-------
 201011261015 |     2
 201011261045 |     1
 201011261110 |     1
 201011261125 |     1
 201011261240 |     1
 201011261245 |     1
 201011261315 |     2
 201011261320 |     3
(8 rows)

  
DROP INDEX my_tq_agg_small_ets_end_ts_ix;
DROP INDEX
DROP TABLE my_tq_agg_small;
DROP TABLE
DROP TABLE my_tt_agg_small;
DROP TABLE
