-- start_ignore
SET optimizer=on;
SET
SET optimizer_log=on;
SET
-- end_ignore
-- @product_version gpdb: [4.3.2-4.3.98]
--
-- DISTRIBUTED TRANSACTIONS
--
--SET debug_print_full_dtm=true;
--
-- start_matchsubs
--
-- # create a match/subs expression
--
-- m/(ERROR|WARNING|CONTEXT|NOTICE):.*The previous session was reset because its gang was disconnected/
-- s/session id \=\s*\d+/session id \= DUMMY/gm
--
-- end_matchsubs
--
--
-- We want to have an error between the point where all segments are prepared and our decision 
-- to write the Distributed Commit record.
--
CREATE TABLE distxact1_1 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
BEGIN;
BEGIN
INSERT INTO distxact1_1 VALUES (1);
INSERT 0 1
INSERT INTO distxact1_1 VALUES (2);
INSERT 0 1
INSERT INTO distxact1_1 VALUES (3);
INSERT 0 1
INSERT INTO distxact1_1 VALUES (4);
INSERT 0 1
INSERT INTO distxact1_1 VALUES (5);
INSERT 0 1
INSERT INTO distxact1_1 VALUES (6);
INSERT 0 1
INSERT INTO distxact1_1 VALUES (7);
INSERT 0 1
INSERT INTO distxact1_1 VALUES (8);
INSERT 0 1
SET debug_abort_after_distributed_prepared = true;
SET
COMMIT;
psql:/path/sql_file:1: ERROR:  Raise an error as directed by Debug_abort_after_distributed_prepared
RESET debug_abort_after_distributed_prepared;
RESET
SELECT * FROM distxact1_1;
psql:/path/sql_file:1: WARNING:  One or more columns in the following table(s) do not have statistics. (see log for column name(s))
psql:/path/sql_file:1: WARNING:  Please analyze table(s): distxact1_1
 a 
---
(0 rows)

DROP TABLE distxact1_1;
DROP TABLE
--
-- We want to have an error during the prepare which will cause a Abort-Some-Prepared broadcast 
-- to cleanup.
--
CREATE TABLE distxact1_2 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
BEGIN;
BEGIN
INSERT INTO distxact1_2 VALUES (21);
INSERT 0 1
INSERT INTO distxact1_2 VALUES (22);
INSERT 0 1
INSERT INTO distxact1_2 VALUES (23);
INSERT 0 1
INSERT INTO distxact1_2 VALUES (24);
INSERT 0 1
INSERT INTO distxact1_2 VALUES (25);
INSERT 0 1
INSERT INTO distxact1_2 VALUES (26);
INSERT 0 1
INSERT INTO distxact1_2 VALUES (27);
INSERT 0 1
INSERT INTO distxact1_2 VALUES (28);
INSERT 0 1
SET debug_dtm_action = "fail_begin_command";
SET
SET debug_dtm_action_target = "protocol";
SET
SET debug_dtm_action_protocol = "prepare";
SET
COMMIT;
psql:/path/sql_file:1: ERROR:  The distributed transaction 'Prepare' broadcast failed to one or more segments for gid = 1485397982-0000000407. (cdbtm.c:689)
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
RESET debug_dtm_action_protocol;
RESET
SELECT * FROM distxact1_2;
psql:/path/sql_file:1: WARNING:  One or more columns in the following table(s) do not have statistics. (see log for column name(s))
psql:/path/sql_file:1: WARNING:  Please analyze table(s): distxact1_2
 a 
---
(0 rows)

DROP TABLE distxact1_2;
DROP TABLE
--
-- We want to have an error during the commit-prepared broadcast which will cause a
-- Retry-Commit-Prepared broadcast to cleanup.
--
CREATE TABLE distxact1_3 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
BEGIN;
BEGIN
INSERT INTO distxact1_3 VALUES (31);
INSERT 0 1
INSERT INTO distxact1_3 VALUES (32);
INSERT 0 1
INSERT INTO distxact1_3 VALUES (33);
INSERT 0 1
INSERT INTO distxact1_3 VALUES (34);
INSERT 0 1
INSERT INTO distxact1_3 VALUES (35);
INSERT 0 1
INSERT INTO distxact1_3 VALUES (36);
INSERT 0 1
INSERT INTO distxact1_3 VALUES (37);
INSERT 0 1
INSERT INTO distxact1_3 VALUES (38);
INSERT 0 1
SET debug_dtm_action = "fail_begin_command";
SET
SET debug_dtm_action_target = "protocol";
SET
SET debug_dtm_action_protocol = "commit_prepared";
SET
COMMIT;
psql:/path/sql_file:1: WARNING:  The distributed transaction 'Commit Prepared' broadcast failed to one or more segments for gid = 1426046326-0000016114.
psql:/path/sql_file:1: NOTICE:  Releasing segworker group to retry broadcast.
psql:/path/sql_file:1: NOTICE:  Retry of the distributed transaction 'Commit Prepared' broadcast succeeded to the segments for gid = 1426046326-0000016114.
COMMIT
SELECT * FROM distxact1_3;
 a  
----
 32
 34
 36
 38
 31
 33
 35
 37
(8 rows)

DROP TABLE distxact1_3;
DROP TABLE
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
RESET debug_dtm_action_protocol;
RESET
--
-- VARIANT of we want to have an error between the point where all segments are prepared and our decision 
-- to write the Distributed Commit record.  Cause problem during abort-prepared broadcast.  
--
CREATE TABLE distxact1_4 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
BEGIN;
BEGIN
INSERT INTO distxact1_4 VALUES (41);
INSERT 0 1
INSERT INTO distxact1_4 VALUES (42);
INSERT 0 1
INSERT INTO distxact1_4 VALUES (43);
INSERT 0 1
INSERT INTO distxact1_4 VALUES (44);
INSERT 0 1
INSERT INTO distxact1_4 VALUES (45);
INSERT 0 1
INSERT INTO distxact1_4 VALUES (46);
INSERT 0 1
INSERT INTO distxact1_4 VALUES (47);
INSERT 0 1
INSERT INTO distxact1_4 VALUES (48);
INSERT 0 1
SET debug_abort_after_distributed_prepared = true;
SET
SET debug_dtm_action = "fail_begin_command";
SET
SET debug_dtm_action_target = "protocol";
SET
SET debug_dtm_action_protocol = "abort_prepared";
SET
COMMIT;
psql:/path/sql_file:1: WARNING:  The distributed transaction 'Abort Prepared' broadcast failed to one or more segments for gid = 1426046326-0000016121.
psql:/path/sql_file:1: NOTICE:  Releasing segworker groups to retry broadcast.
psql:/path/sql_file:1: NOTICE:  Retry of the distributed transaction 'Abort Prepared' broadcast succeeded to the segments for gid = 1426046326-0000016121.
psql:/path/sql_file:1: ERROR:  Raise an error as directed by Debug_abort_after_distributed_prepared
SELECT * FROM distxact1_4;
psql:/path/sql_file:1: WARNING:  One or more columns in the following table(s) do not have statistics. (see log for column name(s))
psql:/path/sql_file:1: WARNING:  Please analyze table(s): distxact1_4
 a 
---
(0 rows)

DROP TABLE distxact1_4;
DROP TABLE
RESET debug_abort_after_distributed_prepared;
RESET
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
RESET debug_dtm_action_protocol;
RESET
--
-- Fail general commands
--
--
-- Invoke a failure during a CREATE TABLE command.  
--
--SET debug_print_full_dtm=true;
SET debug_dtm_action = "fail_begin_command";
SET
SET debug_dtm_action_target = "sql";
SET
SET debug_dtm_action_sql_command_tag = "MPPEXEC UTILITY";
SET
CREATE TABLE distxact2_1 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: ERROR:  Raise ERROR for debug_dtm_action = 2, commandTag = MPPEXEC UTILITY   (seg1 test2:15101 pid=61188) (cdbdisp.c:1528)
RESET debug_dtm_action_sql_command_tag;
RESET
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
SELECT * FROM distxact2_1;
psql:/path/sql_file:1: ERROR:  relation "distxact2_1" does not exist
LINE 1: SELECT * FROM distxact2_1;
                      ^
-- Should succeed
CREATE TABLE distxact2_1 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
DROP TABLE distxact2_1;
DROP TABLE
--
-- Invoke a failure during a CREATE TABLE command.  
-- Action_Target = 2 is SQL.
--
SET debug_dtm_action = "fail_end_command";
SET
SET debug_dtm_action_target = "sql";
SET
SET debug_dtm_action_sql_command_tag = "MPPEXEC UTILITY";
SET
CREATE TABLE distxact2_2 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: ERROR:  Raise ERROR for debug_dtm_action = 3, commandTag = MPPEXEC UTILITY   (seg1 test2:15101 pid=61188) (cdbdisp.c:1528)
RESET debug_dtm_action_sql_command_tag;
RESET
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
SELECT * FROM distxact2_2;
psql:/path/sql_file:1: ERROR:  relation "distxact2_2" does not exist
LINE 1: SELECT * FROM distxact2_2;
                      ^
-- Should succeed
CREATE TABLE distxact2_2 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
DROP TABLE distxact2_2;
DROP TABLE
--
-- xact.c DTM related dispatches
--
--
-- Invoke a failure during a SAVEPOINT command.  
--
--SET debug_print_full_dtm=true;
SET debug_dtm_action = "fail_begin_command";
SET
SET debug_dtm_action_target = "sql";
SET
SET debug_dtm_action_sql_command_tag = "SAVEPOINT";
SET
BEGIN;
BEGIN
CREATE TABLE distxact3_1 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
SAVEPOINT s;
psql:/path/sql_file:1: WARNING:  DTM error (gathered 2 results from cmd 'SAVEPOINT s')
psql:/path/sql_file:1: ERROR:  could not execute command on QE
DETAIL:  Raise ERROR for debug_dtm_action = 2, commandTag = SAVEPOINT   (seg1 test2:15101 pid=61188)
ROLLBACK;
ROLLBACK
RESET debug_dtm_action_sql_command_tag;
RESET
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
SELECT * FROM distxact3_1;
psql:/path/sql_file:1: ERROR:  relation "distxact3_1" does not exist
LINE 1: SELECT * FROM distxact3_1;
                      ^
-- Should succeed
CREATE TABLE distxact3_1 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
DROP TABLE distxact3_1;
DROP TABLE
--
-- Invoke a failure during a RELEASE SAVEPOINT command.  
--
--SET debug_print_full_dtm=true;
SET debug_dtm_action = "fail_begin_command";
SET
SET debug_dtm_action_target = "sql";
SET
SET debug_dtm_action_sql_command_tag = "RELEASE";
SET
BEGIN;
BEGIN
CREATE TABLE distxact3_2 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
SAVEPOINT s;
SAVEPOINT
INSERT INTO distxact3_2 VALUES (21);
INSERT 0 1
INSERT INTO distxact3_2 VALUES (22);
INSERT 0 1
INSERT INTO distxact3_2 VALUES (23);
INSERT 0 1
INSERT INTO distxact3_2 VALUES (24);
INSERT 0 1
INSERT INTO distxact3_2 VALUES (25);
INSERT 0 1
INSERT INTO distxact3_2 VALUES (26);
INSERT 0 1
INSERT INTO distxact3_2 VALUES (27);
INSERT 0 1
INSERT INTO distxact3_2 VALUES (28);
INSERT 0 1
RELEASE SAVEPOINT s;
psql:/path/sql_file:1: WARNING:  DTM error (gathered 2 results from cmd 'RELEASE SAVEPOINT s')
psql:/path/sql_file:1: ERROR:  could not execute command on QE
DETAIL:  Raise ERROR for debug_dtm_action = 2, commandTag = RELEASE   (seg1 test2:15101 pid=61188)
ROLLBACK;
ROLLBACK
RESET debug_dtm_action_sql_command_tag;
RESET
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
SELECT * FROM distxact3_2;
psql:/path/sql_file:1: ERROR:  relation "distxact3_2" does not exist
LINE 1: SELECT * FROM distxact3_2;
                      ^
-- Should succeed
CREATE TABLE distxact3_2 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
DROP TABLE distxact3_2;
DROP TABLE
--
-- Invoke a failure during a ROLLBACK TO SAVEPOINT command.  
--
--SET debug_print_full_dtm=true;
SET debug_dtm_action = "fail_begin_command";
SET
SET debug_dtm_action_target = "sql";
SET
SET debug_dtm_action_sql_command_tag = "ROLLBACK";
SET
BEGIN;
BEGIN
CREATE TABLE distxact3_3 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
SAVEPOINT s;
SAVEPOINT
INSERT INTO distxact3_3 VALUES (31);
INSERT 0 1
INSERT INTO distxact3_3 VALUES (32);
INSERT 0 1
INSERT INTO distxact3_3 VALUES (33);
INSERT 0 1
INSERT INTO distxact3_3 VALUES (34);
INSERT 0 1
INSERT INTO distxact3_3 VALUES (35);
INSERT 0 1
INSERT INTO distxact3_3 VALUES (36);
INSERT 0 1
INSERT INTO distxact3_3 VALUES (37);
INSERT 0 1
INSERT INTO distxact3_3 VALUES (38);
INSERT 0 1
ROLLBACK TO SAVEPOINT s;
psql:/path/sql_file:1: WARNING:  DTM error (gathered 2 results from cmd 'ROLLBACK TO SAVEPOINT s')
psql:/path/sql_file:1: ERROR:  could not execute command on QE
DETAIL:  Raise ERROR for debug_dtm_action = 2, commandTag = ROLLBACK   (seg1 test2:15101 pid=61188)
ROLLBACK;
ROLLBACK
RESET debug_dtm_action_sql_command_tag;
RESET
RESET debug_dtm_action;
RESET
RESET debug_dtm_action_target;
RESET
SELECT * FROM distxact3_3;
psql:/path/sql_file:1: ERROR:  relation "distxact3_3" does not exist
LINE 1: SELECT * FROM distxact3_3;
                      ^
-- Should succeed
CREATE TABLE distxact3_3 (a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
DROP TABLE distxact3_3;
DROP TABLE
RESET debug_print_full_dtm;
RESET
-- Test cursor/serializable interaction.
-- MPP-3227: pg_dump does this exact sequence.
-- for each table in a database.
drop table if exists dtmcurse_foo;
psql:/path/sql_file:1: NOTICE:  table "dtmcurse_foo" does not exist, skipping
DROP TABLE
drop table if exists dtmcurse_bar;
psql:/path/sql_file:1: NOTICE:  table "dtmcurse_bar" does not exist, skipping
DROP TABLE
create table dtmcurse_foo (a int, b int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into dtmcurse_foo values (1,2);
INSERT 0 1
insert into dtmcurse_foo values (2,2);
INSERT 0 1
create table dtmcurse_bar as select * from dtmcurse_foo distributed by (b);
SELECT 2
begin;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SET
DECLARE cursor1 CURSOR FOR SELECT * FROM ONLY dtmcurse_foo order by a;
DECLARE CURSOR
fetch 1 from cursor1;
 a | b 
---+---
 1 | 2
(1 row)

close cursor1;
CLOSE CURSOR
-- MPP-3227: second declare would hang waiting for snapshot,
-- should work just like the first.
DECLARE cursor1 CURSOR FOR SELECT * FROM ONLY dtmcurse_bar order by a;
DECLARE CURSOR
fetch 1 from cursor1;
 a | b 
---+---
 1 | 2
(1 row)

close cursor1;
CLOSE CURSOR
abort;
ROLLBACK
-- MPP-4504: cursor + InitPlan
begin;
BEGIN
declare c1 cursor for select * from dtmcurse_foo where a = (select min(a) from dtmcurse_foo);
DECLARE CURSOR
fetch 1 from c1;
 a | b 
---+---
 1 | 2
(1 row)

close c1;
CLOSE CURSOR
end;
COMMIT
drop table if exists dtmcurse_foo;
DROP TABLE
drop table if exists dtmcurse_bar;
DROP TABLE
