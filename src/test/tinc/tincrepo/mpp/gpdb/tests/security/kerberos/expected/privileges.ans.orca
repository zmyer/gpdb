-- start_ignore
SET optimizer=on;
SET
SET optimizer_log=on;
SET
-- end_ignore
-- @product_version gpdb: [4.3.2-4.3.98]
--
-- Test access privileges
--
-- Clean up in case a prior regression run failed
-- Suppress NOTICE messages when users/groups don't exist
SET client_min_messages TO 'error';
SET
-- start_ignore
DROP ROLE IF EXISTS regressgroup1;
DROP ROLE
DROP ROLE IF EXISTS regressgroup2;
DROP ROLE
DROP ROLE IF EXISTS regressuser1;
DROP ROLE
DROP ROLE IF EXISTS regressuser2;
DROP ROLE
DROP ROLE IF EXISTS regressuser3;
DROP ROLE
DROP ROLE IF EXISTS regressuser4;
DROP ROLE
-- end_ignore
RESET client_min_messages;
RESET
-- test proper begins here
CREATE USER regressuser1;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:32: NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE ROLE
CREATE USER regressuser2;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:33: NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE ROLE
CREATE USER regressuser3;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:34: NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE ROLE
CREATE USER regressuser4;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:35: NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE ROLE
CREATE USER regressuser4;	-- duplicate
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:36: NOTICE:  resource queue required -- using default resource queue "pg_default"
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:36: ERROR:  role "regressuser4" already exists
CREATE GROUP regressgroup1;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:38: NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE ROLE
CREATE GROUP regressgroup2 WITH USER regressuser1, regressuser2;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:39: NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE ROLE
ALTER GROUP regressgroup1 ADD USER regressuser4;
ALTER ROLE
ALTER GROUP regressgroup2 ADD USER regressuser2;	-- duplicate
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:43: NOTICE:  role "regressuser2" is already a member of role "regressgroup2"
ALTER ROLE
ALTER GROUP regressgroup2 DROP USER regressuser2;
ALTER ROLE
ALTER GROUP regressgroup2 ADD USER regressuser4;
ALTER ROLE
-- test owner privileges
SET SESSION AUTHORIZATION regressuser1;
SET
SELECT session_user, current_user;
 session_user | current_user 
--------------+--------------
 regressuser1 | regressuser1
(1 row)

CREATE TABLE atest1 ( a int, b text );
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:53: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

INSERT INTO atest1 VALUES (1, 'one');
INSERT 0 1
DELETE FROM atest1;
DELETE 1
UPDATE atest1 SET b = 'blech' WHERE a = 213;
UPDATE 0
LOCK atest1 IN ACCESS EXCLUSIVE MODE;
LOCK TABLE
REVOKE ALL ON atest1 FROM PUBLIC;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:60: NOTICE:  no privileges could be revoked from role PUBLIC on object atest1
REVOKE
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

GRANT ALL ON atest1 TO regressuser2;
GRANT
GRANT SELECT ON atest1 TO regressuser3, regressuser4;
GRANT
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

CREATE TABLE atest2 (col1 varchar(10), col2 boolean);
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:67: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'col1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
GRANT SELECT ON atest2 TO regressuser2;
GRANT
GRANT UPDATE ON atest2 TO regressuser3;
GRANT
GRANT INSERT ON atest2 TO regressuser4;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
SELECT session_user, current_user;
 session_user | current_user 
--------------+--------------
 regressuser2 | regressuser2
(1 row)

-- try various combinations of queries on atest1 and atest2
SELECT * FROM atest1 order by 1; -- ok
 a | b 
---+---
(0 rows)

SELECT * FROM atest2; -- ok
 col1 | col2 
------+------
(0 rows)

INSERT INTO atest1 VALUES (2, 'two'); -- ok
INSERT 0 1
INSERT INTO atest2 VALUES ('foo', true); -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:81: ERROR:  permission denied for relation atest2
INSERT INTO atest1 SELECT 1, b FROM atest1; -- ok
INSERT 0 1
UPDATE atest1 SET b = 'twotwo' WHERE a = 2; -- ok
UPDATE 1
UPDATE atest2 SET col2 = NOT col2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:84: ERROR:  permission denied for relation atest2
SELECT * FROM atest1 FOR UPDATE; -- ok
 a |   b    
---+--------
 1 | two
 2 | twotwo
(2 rows)

SELECT * FROM atest2 FOR UPDATE; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:86: ERROR:  permission denied for relation atest2
DELETE FROM atest2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:87: ERROR:  permission denied for relation atest2
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:88: ERROR:  permission denied for relation atest2
COPY atest2 FROM stdin; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:89: ERROR:  permission denied for relation atest2
GRANT ALL ON atest1 TO PUBLIC; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:90: WARNING:  no privileges were granted for "atest1"
GRANT
-- checks in subquery, both ok
SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
 a | b 
---+---
(0 rows)

SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
 col1 | col2 
------+------
(0 rows)

SET SESSION AUTHORIZATION regressuser3;
SET
SELECT session_user, current_user;
 session_user | current_user 
--------------+--------------
 regressuser3 | regressuser3
(1 row)

SELECT * FROM atest1 order by 1; -- ok
 a |   b    
---+--------
 1 | two
 2 | twotwo
(2 rows)

SELECT * FROM atest2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:101: ERROR:  permission denied for relation atest2
INSERT INTO atest1 VALUES (2, 'two'); -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:102: ERROR:  permission denied for relation atest1
INSERT INTO atest2 VALUES ('foo', true); -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:103: ERROR:  permission denied for relation atest2
INSERT INTO atest1 SELECT 1, b FROM atest1; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:104: ERROR:  permission denied for relation atest1
UPDATE atest1 SET b = 'twotwo' WHERE a = 2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:105: ERROR:  permission denied for relation atest1
UPDATE atest2 SET col2 = NULL; -- ok
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:106: ERROR:  permission denied for relation atest2
UPDATE atest2 SET col2 = NOT col2; -- fails; requires SELECT on atest2
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:107: ERROR:  permission denied for relation atest2
UPDATE atest2 SET col2 = true FROM atest1 WHERE atest1.a = 5; -- ok
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:108: ERROR:  permission denied for relation atest2
SELECT * FROM atest1 FOR UPDATE; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:109: ERROR:  permission denied for relation atest1
SELECT * FROM atest2 FOR UPDATE; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:110: ERROR:  permission denied for relation atest2
DELETE FROM atest2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:111: ERROR:  permission denied for relation atest2
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- ok
LOCK TABLE
COPY atest2 FROM stdin; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:113: ERROR:  permission denied for relation atest2
-- checks in subquery, both fail
SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:116: ERROR:  permission denied for relation atest2
SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:117: ERROR:  permission denied for relation atest2
SET SESSION AUTHORIZATION regressuser4;
SET
COPY atest2 FROM stdin; -- ok
SELECT * FROM atest1 order by 1; -- ok
 a |   b    
---+--------
 1 | two
 2 | twotwo
(2 rows)

-- groups
SET SESSION AUTHORIZATION regressuser3;
SET
CREATE TABLE atest3 (one int, two int, three int);
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:129: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'one' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
GRANT DELETE ON atest3 TO GROUP regressgroup2;
GRANT
SET SESSION AUTHORIZATION regressuser1;
SET
SELECT * FROM atest3; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:134: ERROR:  permission denied for relation atest3
DELETE FROM atest3; -- ok
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:135: ERROR:  permission denied for relation atest3
-- views
SET SESSION AUTHORIZATION regressuser3;
SET
CREATE VIEW atestv1 AS SELECT * FROM atest1; -- ok
CREATE VIEW
/* The next *should* fail, but it's not implemented that way yet. */
CREATE VIEW atestv2 AS SELECT * FROM atest2;
CREATE VIEW
CREATE VIEW atestv3 AS SELECT * FROM atest3; -- ok
CREATE VIEW
SELECT * FROM atestv1; -- ok
 a |   b    
---+--------
 1 | two
 2 | twotwo
(2 rows)

SELECT * FROM atestv2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:148: ERROR:  permission denied for relation atest2
GRANT SELECT ON atestv1, atestv3 TO regressuser4;
GRANT
GRANT SELECT ON atestv2 TO regressuser2;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT * FROM atestv1; -- ok
 a |   b    
---+--------
 1 | two
 2 | twotwo
(2 rows)

SELECT * FROM atestv2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:155: ERROR:  permission denied for relation atestv2
SELECT * FROM atestv3; -- ok
 one | two | three 
-----+-----+-------
(0 rows)

CREATE VIEW atestv4 AS SELECT * FROM atestv3; -- nested view
CREATE VIEW
SELECT * FROM atestv4; -- ok
 one | two | three 
-----+-----+-------
(0 rows)

GRANT SELECT ON atestv4 TO regressuser2;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
-- Two complex cases:
SELECT * FROM atestv3; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:166: ERROR:  permission denied for relation atestv3
SELECT * FROM atestv4; -- ok (even though regressuser2 cannot access underlying atestv3)
 one | two | three 
-----+-----+-------
(0 rows)

SELECT * FROM atest2; -- ok
 col1 | col2 
------+------
 bar  | t
(1 row)

SELECT * FROM atestv2; -- fail (even though regressuser2 can access underlying atest2)
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:170: ERROR:  permission denied for relation atest2
-- privileges on functions, languages
-- switch to superuser
\c -
You are now connected to database "gptest" as user "gpadmin/kerberos-test".
REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM PUBLIC;
REVOKE
GRANT USAGE ON LANGUAGE sql TO regressuser1; -- ok
GRANT
GRANT USAGE ON LANGUAGE c TO PUBLIC; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:180: ERROR:  language "c" is not trusted
HINT:  Only superusers may use untrusted languages.
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT USAGE ON LANGUAGE sql TO regressuser2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:183: WARNING:  no privileges were granted for "sql"
GRANT
CREATE FUNCTION testfunc1(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql;
CREATE FUNCTION
CREATE FUNCTION testfunc2(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
CREATE FUNCTION
REVOKE ALL ON FUNCTION testfunc1(int), testfunc2(int) FROM PUBLIC;
REVOKE
GRANT EXECUTE ON FUNCTION testfunc1(int), testfunc2(int) TO regressuser2;
GRANT
GRANT USAGE ON FUNCTION testfunc1(int) TO regressuser3; -- semantic error
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:189: ERROR:  invalid privilege type USAGE for function
GRANT ALL PRIVILEGES ON FUNCTION testfunc1(int) TO regressuser4;
GRANT
GRANT ALL PRIVILEGES ON FUNCTION testfunc_nosuch(int) TO regressuser4;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:191: ERROR:  function testfunc_nosuch(integer) does not exist
CREATE FUNCTION testfunc4(boolean) RETURNS text
  AS 'select col1 from atest2 where col2 = $1;'
  LANGUAGE sql SECURITY DEFINER;
CREATE FUNCTION
GRANT EXECUTE ON FUNCTION testfunc4(boolean) TO regressuser3;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
SELECT testfunc1(5), testfunc2(5); -- ok
 testfunc1 | testfunc2 
-----------+-----------
        10 |        15
(1 row)

CREATE FUNCTION testfunc3(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:200: ERROR:  permission denied for language sql
SET SESSION AUTHORIZATION regressuser3;
SET
SELECT testfunc1(5); -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:203: ERROR:  permission denied for function testfunc1
SELECT col1 FROM atest2 WHERE col2 = true; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:204: ERROR:  permission denied for relation atest2
SELECT testfunc4(true); -- ok
 testfunc4 
-----------
 bar
(1 row)

SET SESSION AUTHORIZATION regressuser4;
SET
SELECT testfunc1(5); -- ok
 testfunc1 
-----------
        10
(1 row)

DROP FUNCTION testfunc1(int); -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:210: ERROR:  must be owner of function testfunc1
\c -
You are now connected to database "gptest" as user "gpadmin/kerberos-test".
DROP FUNCTION testfunc1(int); -- ok
DROP FUNCTION
-- restore to sanity
GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC;
GRANT
-- has_table_privilege function
-- bad-input checks
select has_table_privilege(NULL,'pg_authid','select');
 has_table_privilege 
---------------------
 
(1 row)

select has_table_privilege('pg_shad','select');
 has_table_privilege 
---------------------
 
(1 row)

select has_table_privilege('nosuchuser','pg_authid','select');
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:224: ERROR:  role "nosuchuser" does not exist
select has_table_privilege('pg_authid','sel');
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:225: ERROR:  unrecognized privilege type: "sel"
select has_table_privilege(-999999,'pg_authid','update');
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:226: ERROR:  role with OID 4293967297 does not exist
select has_table_privilege(1,'select');
 has_table_privilege 
---------------------
 
(1 row)

-- superuser
\c -
You are now connected to database "gptest" as user "gpadmin/kerberos-test".
select has_table_privilege(current_user,'pg_authid','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'pg_authid','insert');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,'pg_authid','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,'pg_authid','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

-- 'rule' privilege no longer exists, but for backwards compatibility
-- has_table_privilege still recognizes the keyword and says FALSE
select has_table_privilege(current_user,t1.oid,'rule')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'pg_authid') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'pg_authid') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','update');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','delete');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

-- non-superuser
SET SESSION AUTHORIZATION regressuser3;
SET
select has_table_privilege(current_user,'pg_class','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'pg_class','insert');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'pg_class','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'pg_class','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'pg_class') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'pg_class') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','delete');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,'atest1','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'atest1','insert');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'atest1','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'atest1','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'atest1') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'atest1') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','delete');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

-- Grant options
SET SESSION AUTHORIZATION regressuser1;
SET
CREATE TABLE atest4 (a int);
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:322: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
GRANT SELECT ON atest4 TO regressuser2 WITH GRANT OPTION;
GRANT
GRANT UPDATE ON atest4 TO regressuser2;
GRANT
GRANT SELECT ON atest4 TO GROUP regressgroup1 WITH GRANT OPTION;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
GRANT SELECT ON atest4 TO regressuser3;
GRANT
GRANT UPDATE ON atest4 TO regressuser3; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:331: WARNING:  no privileges were granted for "atest4"
GRANT
SET SESSION AUTHORIZATION regressuser1;
SET
REVOKE SELECT ON atest4 FROM regressuser3; -- does nothing
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:335: NOTICE:  no privileges could be revoked from role regressuser3 on object atest4
REVOKE
SELECT has_table_privilege('regressuser3', 'atest4', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

REVOKE SELECT ON atest4 FROM regressuser2; -- fail
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:337: ERROR:  dependent privileges exist
HINT:  Use CASCADE to revoke them too.
REVOKE GRANT OPTION FOR SELECT ON atest4 FROM regressuser2 CASCADE; -- ok
REVOKE
SELECT has_table_privilege('regressuser2', 'atest4', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regressuser3', 'atest4', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regressuser1', 'atest4', 'SELECT WITH GRANT OPTION'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

-- clean up
-- Superuser
\c -
You are now connected to database "gptest" as user "gpadmin/kerberos-test".
DROP FUNCTION testfunc2(int);
DROP FUNCTION
DROP FUNCTION testfunc4(boolean);
DROP FUNCTION
DROP VIEW atestv1;
DROP VIEW
DROP VIEW atestv2;
DROP VIEW
-- this should cascade to drop atestv4
DROP VIEW atestv3 CASCADE;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:355: NOTICE:  drop cascades to rule _RETURN on view atestv4
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:355: NOTICE:  drop cascades to view atestv4
DROP VIEW
-- this should complain "does not exist"
DROP VIEW atestv4;
psql:/data/gpadmin/pulse2-agent/agents/agent1/work/GPDB-43_STABLE-TINC-kerberos_smoke/rhel6_kerberos_smoke/cdbunit/tinc/tincrepo/mpp/gpdb/tests/security/kerberos/output/privileges_orca.sql:357: ERROR:  view "atestv4" does not exist
DROP TABLE atest1;
DROP TABLE
DROP TABLE atest2;
DROP TABLE
DROP TABLE atest3;
DROP TABLE
DROP TABLE atest4;
DROP TABLE
DROP GROUP regressgroup1;
DROP ROLE
DROP GROUP regressgroup2;
DROP ROLE
REVOKE USAGE ON LANGUAGE sql FROM regressuser1;
REVOKE
DROP USER regressuser1;
DROP ROLE
DROP USER regressuser2;
DROP ROLE
DROP USER regressuser3;
DROP ROLE
DROP USER regressuser4;
DROP ROLE
