-- start_ignore
-- end_ignore
--@db_name heap_tables_db
-- heap table distributed by a single column
DROP TABLE IF EXISTS heap_table_1;
DROP TABLE
CREATE TABLE heap_table_1(
    a int,
    b int,
    c text,
    d timestamp
) distributed by (a);
CREATE TABLE
INSERT INTO heap_table_1
SELECT i, i * 10, i::text, '2013-09-01 00:01:02'
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- heap table distributed by multiple columns
DROP TABLE IF EXISTS heap_table_2;
DROP TABLE
CREATE TABLE heap_table_2(
    a int,
    b int,
    c text,
    d timestamp
) distributed by (a, b);
CREATE TABLE
INSERT INTO heap_table_2
SELECT i, i * 10, i::text, '2013-09-01 00:01:02'
FROM generate_series(1, 1000)i;
INSERT 0 1000
DROP TABLE IF EXISTS heap_table_3;
DROP TABLE
CREATE TABLE heap_table_3(
    a int,
    b int,
    c text,
    d timestamp
) distributed by (a, b, c);
CREATE TABLE
INSERT INTO heap_table_3
SELECT i, i * 10, i::text, '2013-09-01 00:01:02'
FROM generate_series(1, 1000)i;
INSERT 0 1000
DROP TABLE IF EXISTS heap_table_4;
DROP TABLE
CREATE TABLE heap_table_4(
    a int,
    b int,
    c text,
    d timestamp
) distributed by (a, d);
CREATE TABLE
INSERT INTO heap_table_4
SELECT i, i * 10, i::text, date '2013-09-01 00:01:02' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- heap table distributed randomly
DROP TABLE IF EXISTS heap_table_5;
DROP TABLE
CREATE TABLE heap_table_5(
    a int,
    b int,
    c text,
    d timestamp
) distributed randomly;
CREATE TABLE
INSERT INTO heap_table_5
SELECT i, i * 10, i::text, date '2013-09-01 00:01:02' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- drop column distribution key
DROP TABLE IF EXISTS heap_table_6;
DROP TABLE
CREATE TABLE heap_table_6(
    a int,
    b int,
    c text,
    d timestamp
) distributed by (a);
CREATE TABLE
INSERT INTO heap_table_6
SELECT i, i * 10, i::text, date '2013-09-01 00:01:02' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
ALTER table heap_table_6 drop column a;
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
ALTER TABLE
INSERT INTO heap_table_6
SELECT i * 10, i::text, date '2013-09-01 00:01:02' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- drop column some other column
DROP TABLE IF EXISTS heap_table_7;
DROP TABLE
CREATE TABLE heap_table_7(
    a int,
    b int,
    c text,
    d timestamp
) distributed by (a);
CREATE TABLE
INSERT INTO heap_table_7
SELECT i, i * 10, i::text, date '2013-09-01 00:01:02' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
ALTER table heap_table_7 drop column b;
ALTER TABLE
INSERT INTO heap_table_7
SELECT i, i::text, date '2013-09-01 00:01:02' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- PARTITION TABLES
DROP TABLE IF EXISTS heap_part_table_1;
DROP TABLE
CREATE TABLE heap_part_table_1(
    a text,
    b int,
    c text,
    d timestamp
)
distributed by (a)
PARTITION BY RANGE(b) (START (0) END (100) INCLUSIVE EVERY(20));
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_1_1_prt_1" for table "heap_part_table_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_1_1_prt_2" for table "heap_part_table_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_1_1_prt_3" for table "heap_part_table_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_1_1_prt_4" for table "heap_part_table_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_1_1_prt_5" for table "heap_part_table_1"
CREATE TABLE
INSERT INTO heap_part_table_1
SELECT i, (i * 10) % 100, i::text, '2013-09-01 03:04:05'
FROM generate_series(1, 1000)i;
INSERT 0 1000
DROP TABLE IF EXISTS heap_part_table_2;
DROP TABLE
CREATE TABLE heap_part_table_2(
    a text,
    b int,
    c text,
    d timestamp
)
distributed by (a, b)
PARTITION BY RANGE(b) (START (0) END (100) INCLUSIVE EVERY(20));
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_2_1_prt_1" for table "heap_part_table_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_2_1_prt_2" for table "heap_part_table_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_2_1_prt_3" for table "heap_part_table_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_2_1_prt_4" for table "heap_part_table_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_2_1_prt_5" for table "heap_part_table_2"
CREATE TABLE
INSERT INTO heap_part_table_2
SELECT i, (i * 10) % 100, i::text, '2013-09-01 03:04:05'
FROM generate_series(1, 1000)i;
INSERT 0 1000
DROP TABLE IF EXISTS heap_part_table_3;
DROP TABLE
CREATE TABLE heap_part_table_3(
    a text,
    b int,
    c text,
    d timestamp
)
distributed by (a, b, c)
PARTITION BY RANGE(b) (START (0) END (100) INCLUSIVE EVERY(20));
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_3_1_prt_1" for table "heap_part_table_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_3_1_prt_2" for table "heap_part_table_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_3_1_prt_3" for table "heap_part_table_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_3_1_prt_4" for table "heap_part_table_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_3_1_prt_5" for table "heap_part_table_3"
CREATE TABLE
INSERT INTO heap_part_table_2
SELECT i, (i * 10) % 100, i::text, '2013-09-01 03:04:05'
FROM generate_series(1, 1000)i;
INSERT 0 1000
DROP TABLE IF EXISTS heap_part_table_4;
DROP TABLE
CREATE TABLE heap_part_table_4(
    a text,
    b int,
    c text,
    d timestamp
)
distributed by (a, d)
PARTITION BY RANGE(b) (START (0) END (100) INCLUSIVE EVERY(20));
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_4_1_prt_1" for table "heap_part_table_4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_4_1_prt_2" for table "heap_part_table_4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_4_1_prt_3" for table "heap_part_table_4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_4_1_prt_4" for table "heap_part_table_4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_4_1_prt_5" for table "heap_part_table_4"
CREATE TABLE
INSERT INTO heap_part_table_4
SELECT i, (i * 10) % 100, i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- partition table distributed randomly
DROP TABLE IF EXISTS heap_part_table_5;
DROP TABLE
CREATE TABLE heap_part_table_5(
    a text,
    b int,
    c text,
    d timestamp
)
distributed randomly
PARTITION BY RANGE(b) (START (0) END (100) INCLUSIVE EVERY(20));
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_5_1_prt_1" for table "heap_part_table_5"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_5_1_prt_2" for table "heap_part_table_5"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_5_1_prt_3" for table "heap_part_table_5"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_5_1_prt_4" for table "heap_part_table_5"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_5_1_prt_5" for table "heap_part_table_5"
CREATE TABLE
INSERT INTO heap_part_table_5
SELECT i, (i * 10) % 100, i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- multi-level partitions
DROP TABLE IF EXISTS heap_part_table_6;
DROP TABLE
CREATE TABLE heap_part_table_6(
    a int,
    b int,
    c text,
    d timestamp
)
distributed randomly
PARTITION BY RANGE(b) 
subpartition by range(a) subpartition template (start (0) end (100) every (50), default subpartition other)
(
START (0) END (100) INCLUSIVE EVERY(20), default partition other
);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_other" for table "heap_part_table_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_2" for table "heap_part_table_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_3" for table "heap_part_table_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_4" for table "heap_part_table_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_5" for table "heap_part_table_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_6" for table "heap_part_table_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_other_2_prt_other" for table "heap_part_table_6_1_prt_other"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_other_2_prt_2" for table "heap_part_table_6_1_prt_other"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_other_2_prt_3" for table "heap_part_table_6_1_prt_other"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_2_2_prt_other" for table "heap_part_table_6_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_2_2_prt_2" for table "heap_part_table_6_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_2_2_prt_3" for table "heap_part_table_6_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_3_2_prt_other" for table "heap_part_table_6_1_prt_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_3_2_prt_2" for table "heap_part_table_6_1_prt_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_3_2_prt_3" for table "heap_part_table_6_1_prt_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_4_2_prt_other" for table "heap_part_table_6_1_prt_4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_4_2_prt_2" for table "heap_part_table_6_1_prt_4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_4_2_prt_3" for table "heap_part_table_6_1_prt_4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_5_2_prt_other" for table "heap_part_table_6_1_prt_5"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_5_2_prt_2" for table "heap_part_table_6_1_prt_5"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_5_2_prt_3" for table "heap_part_table_6_1_prt_5"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_6_2_prt_other" for table "heap_part_table_6_1_prt_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_6_2_prt_2" for table "heap_part_table_6_1_prt_6"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_6_1_prt_6_2_prt_3" for table "heap_part_table_6_1_prt_6"
CREATE TABLE
INSERT INTO heap_part_table_6
SELECT i, (i * 10), i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- mixed distribution policies
DROP TABLE IF EXISTS heap_part_table_7;
DROP TABLE
CREATE TABLE heap_part_table_7(
    a text,
    b int,
    c text,
    d timestamp
)
distributed by (a)
PARTITION BY RANGE(b) (
PARTITION p1 START (0) END (20) INCLUSIVE,
PARTITION p2 START (21) END (40) INCLUSIVE,
PARTITION p3 START (41) END (60) INCLUSIVE,
PARTITION p4 START (61) END (80) INCLUSIVE,
PARTITION p5 START (81) END (100) INCLUSIVE);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_7_1_prt_p1" for table "heap_part_table_7"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_7_1_prt_p2" for table "heap_part_table_7"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_7_1_prt_p3" for table "heap_part_table_7"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_7_1_prt_p4" for table "heap_part_table_7"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_7_1_prt_p5" for table "heap_part_table_7"
CREATE TABLE
INSERT INTO heap_part_table_7
SELECT i, (i * 10) % 100, i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
ALTER TABLE only heap_part_table_7_1_prt_p1 set distributed randomly;
ALTER TABLE
ALTER TABLE only heap_part_table_7_1_prt_p2 set distributed randomly;
ALTER TABLE
ALTER TABLE only heap_part_table_7_1_prt_p3 set distributed randomly;
ALTER TABLE
INSERT INTO heap_part_table_7
SELECT i, (i * 10) % 100, i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- drop distribution key column in partition table
DROP TABLE IF EXISTS heap_part_table_8;
DROP TABLE
CREATE TABLE heap_part_table_8(
    a int,
    b int,
    c text,
    d timestamp
)
distributed by (a)
PARTITION BY RANGE(b) 
(
START (0) END (100) INCLUSIVE EVERY(20), default partition other
);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_8_1_prt_other" for table "heap_part_table_8"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_8_1_prt_2" for table "heap_part_table_8"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_8_1_prt_3" for table "heap_part_table_8"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_8_1_prt_4" for table "heap_part_table_8"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_8_1_prt_5" for table "heap_part_table_8"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_8_1_prt_6" for table "heap_part_table_8"
CREATE TABLE
INSERT INTO heap_part_table_8
SELECT i, (i * 10), i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
ALTER TABLE heap_part_table_8 drop column a;
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
psql:/path/sql_file:1: NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
ALTER TABLE
INSERT INTO heap_part_table_8
SELECT (i * 10), i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
-- drop column in partition table
DROP TABLE IF EXISTS heap_part_table_9;
DROP TABLE
CREATE TABLE heap_part_table_9(
    a int,
    b int,
    c text,
    d timestamp
)
distributed by (a)
PARTITION BY RANGE(b) 
(
START (0) END (100) INCLUSIVE EVERY(20), default partition other
);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_9_1_prt_other" for table "heap_part_table_9"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_9_1_prt_2" for table "heap_part_table_9"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_9_1_prt_3" for table "heap_part_table_9"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_9_1_prt_4" for table "heap_part_table_9"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_9_1_prt_5" for table "heap_part_table_9"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "heap_part_table_9_1_prt_6" for table "heap_part_table_9"
CREATE TABLE
INSERT INTO heap_part_table_9
SELECT i, (i * 10), i::text, date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
ALTER TABLE heap_part_table_9 drop column c;
ALTER TABLE
INSERT INTO heap_part_table_9
SELECT i, (i * 10), date '2013-09-01 03:04:05' + i * '1 day'::interval
FROM generate_series(1, 1000)i;
INSERT 0 1000
DROP TABLE IF EXISTS users_rank_third_to_last;
DROP TABLE
CREATE TABLE users_rank_third_to_last (
    id    INT4,
    name  TEXT,
    age   INT4
);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO users_rank_third_to_last select i, 'name'||i, i%50+1 from generate_series(1,1000) i;
INSERT 0 1000
DROP TABLE IF EXISTS users_rank_second_to_last;
DROP TABLE
CREATE TABLE users_rank_second_to_last (
    id    SERIAL,
    name  TEXT,
    age   INT4
) DISTRIBUTED BY (age);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "users_rank_second_to_last_id_seq" for serial column "users_rank_second_to_last.id"
CREATE TABLE
INSERT INTO users_rank_second_to_last select i, 'name'||i, i%50+1 from generate_series(1,1000) i;
INSERT 0 1000
DROP TABLE IF EXISTS users_rank_very_last;
DROP TABLE
CREATE TABLE users_rank_very_last (
    id    SERIAL,
    name  TEXT,
    age   INT4
) DISTRIBUTED RANDOMLY;
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "users_rank_very_last_id_seq" for serial column "users_rank_very_last.id"
CREATE TABLE
INSERT INTO users_rank_very_last select i, 'name'||i, i%50+1 from generate_series(1,1000) i;
INSERT 0 1000
DROP TABLE IF EXISTS users_with_primary_key;
DROP TABLE
CREATE TABLE users_with_primary_key (
    id    SERIAL PRIMARY KEY,
    name  TEXT,
    age   INT4
);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "users_with_primary_key_id_seq" for serial column "users_with_primary_key.id"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "users_with_primary_key_pkey" for table "users_with_primary_key"
CREATE TABLE
INSERT INTO users_with_primary_key select i, 'name'||i, i%50+1 from generate_series(1,1000) i;
INSERT 0 1000
DROP TABLE IF EXISTS users_with_index;
DROP TABLE
CREATE TABLE users_with_index (
    id    SERIAL,
    name  TEXT,
   age   INT4
);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "users_with_index_id_seq" for serial column "users_with_index.id"
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO users_with_index select i, 'name'||i, i%50+1 from generate_series(1,1000) i;
INSERT 0 1000
CREATE UNIQUE INDEX users_idx ON users_with_index (id);
CREATE INDEX
--unalterable table test ref
drop type if exists custom_type cascade;
psql:/path/sql_file:1: NOTICE:  drop cascades to function custom_typeout(custom_type)
psql:/path/sql_file:1: NOTICE:  drop cascades to function custom_typein(cstring)
DROP TYPE
drop table if exists unalterable_table cascade;
DROP TABLE
create type custom_type;
CREATE TYPE
create or replace function custom_typein (cstring) returns custom_type as 'textin' language internal;
psql:/path/sql_file:1: NOTICE:  return type custom_type is only a shell
CREATE FUNCTION
create or replace function custom_typeout (custom_type) returns cstring as 'textout' language internal;
psql:/path/sql_file:1: NOTICE:  argument type custom_type is only a shell
CREATE FUNCTION
create type custom_type (input = custom_typein, output = custom_typeout, internallength = 42);
CREATE TYPE
create table unalterable_table (i int, j custom_type);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
alter table unalterable_table drop column j;
ALTER TABLE
alter table unalterable_table set with(reorganize = true) distributed randomly;
ALTER TABLE
-- MPP-24478: External table with error table configured
DROP EXTERNAL TABLE IF EXISTS exttab_with_error_table;
DROP EXTERNAL TABLE
CREATE EXTERNAL WEB TABLE exttab_with_error_table (i int, j text) 
EXECUTE 'python $GPHOME/bin/datagen.py 100 2' on all format 'text' (delimiter '|')
LOG ERRORS SEGMENT REJECT LIMIT 1000;
CREATE EXTERNAL TABLE
-- Might return different number of rows in different configurations
SELECT COUNT(*) > 0 FROM exttab_with_error_table;
psql:/path/sql_file:1: NOTICE:  Found 4 data formatting errors (4 or more input rows). Rejected related input data.
 ?column? 
----------
 t
(1 row)

