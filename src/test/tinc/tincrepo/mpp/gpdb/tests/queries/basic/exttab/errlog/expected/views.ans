-- start_ignore
-- end_ignore
DROP EXTERNAL TABLE IF EXISTS exttab_views_1 CASCADE;
psql:/path/sql_file:1: NOTICE:  drop cascades to rule _RETURN on view exttab_views_3
psql:/path/sql_file:1: NOTICE:  drop cascades to view exttab_views_3
DROP EXTERNAL TABLE
DROP EXTERNAL TABLE IF EXISTS exttab_views_2 CASCADE;
DROP EXTERNAL TABLE
-- Generate the file with very few errors
\! python @script@ 10 2 > @data_dir@/exttab_views_1.tbl
-- does not reach reject limit
CREATE EXTERNAL TABLE exttab_views_1( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_views_1.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 10;
CREATE EXTERNAL TABLE
-- Generate the file with lot of errors
\! python @script@ 200 50 > @data_dir@/exttab_views_2.tbl
-- reaches reject limit, use the same err table
CREATE EXTERNAL TABLE exttab_views_2( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_views_2.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 2;
CREATE EXTERNAL TABLE
-- Test: views reaching segment reject limit
DROP VIEW IF EXISTS exxttab_views_3;
psql:/path/sql_file:1: NOTICE:  view "exxttab_views_3" does not exist, skipping
DROP VIEW
CREATE VIEW exttab_views_3 as
SELECT sum(distinct e1.i) as sum_i, sum(distinct e2.i) as sum_j, e1.j as j FROM
(SELECT i, j FROM exttab_views_1 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_views_2 WHERE i < 10) e2
group by e1.j;
CREATE VIEW
SELECT gp_truncate_error_log('exttab_views_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_views_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- This should error out
SELECT * FROM exttab_views_3;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg1 slice2 @host@:40001 pid=6574)
DETAIL:  External table exttab_views_2, line 6 of gpfdist://@host@:@port@/exttab_views_2.tbl: "error_1"
-- Error table should be populated
SELECT count(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_views_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_views_2')
) FOO;
 ?column? 
----------
 t
(1 row)

-- INSERT INTO FROM a view
DROP TABLE IF EXISTS exttab_views_insert_1;
DROP TABLE
CREATE TABLE exttab_views_insert_1 (i int, j int, k text);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
SELECT gp_truncate_error_log('exttab_views_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_views_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- Should fail
INSERT INTO exttab_views_insert_1 SELECT * FROM exttab_views_3;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice2 @host@:40000 pid=6577)
DETAIL:  External table exttab_views_2, line 6 of gpfdist://@host@:@port@/exttab_views_2.tbl: "error_1"
-- should not have any rows
SELECT * FROM exttab_views_insert_1; 
 i | j | k 
---+---+---
(0 rows)

-- Error table should be populated
SELECT count(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_views_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_views_2')
) FOO;
 ?column? 
----------
 t
(1 row)

-- CTAS from a view with segment reject limit reached
DROP TABLE IF EXISTS exttab_views_ctas_1;
psql:/path/sql_file:1: NOTICE:  table "exttab_views_ctas_1" does not exist, skipping
DROP TABLE
SELECT gp_truncate_error_log('exttab_views_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_views_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- Should fail 
CREATE TABLE exttab_views_ctas_1 AS SELECT * FROM exttab_views_3 where j < 100;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'j' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice2 @host@:40000 pid=6572)
DETAIL:  External table exttab_views_2, line 6 of gpfdist://@host@:@port@/exttab_views_2.tbl: "error_1"
SELECT * FROM exttab_views_ctas_1;
psql:/path/sql_file:1: ERROR:  relation "exttab_views_ctas_1" does not exist
LINE 1: SELECT * FROM exttab_views_ctas_1;
                      ^
-- Error table should be populated
SELECT count(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_views_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_views_2')
) FOO;
 ?column? 
----------
 t
(1 row)

-- CTAS FROM view with segment reject limits reached
DROP TABLE IF EXISTS exttab_views_ctas_1;
psql:/path/sql_file:1: NOTICE:  table "exttab_views_ctas_1" does not exist, skipping
DROP TABLE
SELECT gp_truncate_error_log('exttab_views_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_views_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- Should fail here 
CREATE TABLE exttab_views_ctas_1 AS SELECT * FROM exttab_views_3;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'j' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice2 @host@:40000 pid=6567)
DETAIL:  External table exttab_views_2, line 6 of gpfdist://@host@:@port@/exttab_views_2.tbl: "error_1"
-- Relation should not exist
SELECT * FROM exttab_views_ctas_1;
psql:/path/sql_file:1: ERROR:  relation "exttab_views_ctas_1" does not exist
LINE 1: SELECT * FROM exttab_views_ctas_1;
                      ^
-- Error table should be populated
SELECT count(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_views_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_views_2')
) FOO;
 ?column? 
----------
 t
(1 row)

