-- start_ignore
-- end_ignore
-- Test 1: scans in union queries with seg reject limit reached
DROP EXTERNAL TABLE IF EXISTS exttab_union_1;
DROP EXTERNAL TABLE
DROP EXTERNAL TABLE IF EXISTS exttab_union_2;
DROP EXTERNAL TABLE
-- Generate the file with very few errors
\! python @script@ 10 2 > @data_dir@/exttab_union_1.tbl
-- does not reach reject limit
CREATE EXTERNAL TABLE exttab_union_1( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_union_1.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 10;
CREATE EXTERNAL TABLE
-- Generate the file with lot of errors
\! python @script@ 200 50 > @data_dir@/exttab_union_2.tbl
-- reaches reject limit
CREATE EXTERNAL TABLE exttab_union_2( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_union_2.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 2;
CREATE EXTERNAL TABLE
-- Test: Should error out as exttab_union_2 would reach it's reject limit
SELECT * FROM
(
SELECT * FROM exttab_union_1
UNION
SELECT * FROM exttab_union_2
UNION
SELECT * FROM exttab_union_1
UNION
SELECT * FROM exttab_union_2
UNION
SELECT * FROM exttab_union_1
UNION
SELECT * FROM exttab_union_2
UNION
SELECT * FROM exttab_union_1
UNION
SELECT * FROM exttab_union_2
) FOO
order by FOO.i;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg1 slice1 @host@:40001 pid=5451)
DETAIL:  External table exttab_union_2, line 6 of gpfdist://@host@:@port@/exttab_union_2.tbl: "error_1"
-- Error table count
select count(*) > 0 from
(
SELECT * FROM gp_read_error_log('exttab_union_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_union_2')
) FOO;
 ?column? 
----------
 t
(1 row)

-- Test: Insert into another table, with and without segment reject limits being reached
DROP TABLE IF EXISTS exttab_union_insert_1;
DROP TABLE
CREATE TABLE exttab_union_insert_1 (LIKE exttab_union_1);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
SELECT gp_truncate_error_log('exttab_union_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_union_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

insert into exttab_union_insert_1
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg1 slice2 @host@:40001 pid=5519)
DETAIL:  External table exttab_union_2, line 6 of gpfdist://@host@:@port@/exttab_union_2.tbl: "error_1"
-- should return 0 rows
SELECT * from exttab_union_insert_1;
 i | j 
---+---
(0 rows)

-- Error table count, should have more than 0 rows, the total number is non-deterministic
select count(*) > 0 from 
(
SELECT * FROM gp_read_error_log('exttab_union_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_union_2')
) FOO;
 ?column? 
----------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_union_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_union_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- should not error out as exttab_union_1 will not reach segment reject limit
insert into exttab_union_insert_1
SELECT e1.i, e2.j from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i
UNION
SELECT e1.i, e2.j from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i
UNION
SELECT e1.i, e2.j from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i;
INSERT 0 16
-- should return the right result
SELECT * from exttab_union_insert_1 order by i;
 i |    j     
---+----------
 0 | 0_number
 0 | 0_number
 1 | 1_number
 1 | 1_number
 4 | 4_number
 4 | 4_number
 5 | 5_number
 5 | 5_number
 6 | 6_number
 6 | 6_number
 7 | 7_number
 7 | 7_number
 8 | 8_number
 8 | 8_number
 9 | 9_number
 9 | 9_number
(16 rows)

-- Error table count
select count(*) > 0 FROM gp_read_error_log('exttab_union_1');
 ?column? 
----------
 t
(1 row)

-- Test: CTAS, should error out with segment limit reached
DROP TABLE IF EXISTS exttab_union_ctas_1;
psql:/path/sql_file:1: NOTICE:  table "exttab_union_ctas_1" does not exist, skipping
DROP TABLE
DROP TABLE IF EXISTS exttab_union_ctas_2;
DROP TABLE
SELECT gp_truncate_error_log('exttab_union_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_union_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

CREATE TABLE exttab_union_ctas_1 as
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_union_2 e1 INNER JOIN exttab_union_2 e2 ON e1.i = e2.i;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg1 slice1 @host@:40001 pid=5549)
DETAIL:  External table exttab_union_2, line 6 of gpfdist://@host@:@port@/exttab_union_2.tbl: "error_1"
-- should error out , table should not exist
SELECT * from exttab_union_ctas_1;
psql:/path/sql_file:1: ERROR:  relation "exttab_union_ctas_1" does not exist
LINE 1: SELECT * from exttab_union_ctas_1;
                      ^
-- Error table count, should have more than 0 rows, the total number is non-deterministic
select count(*) > 0 from gp_read_error_log('exttab_union_2');
 ?column? 
----------
 t
(1 row)

-- should not error out as exttab_union_1 will not reach segment reject limit
SELECT gp_truncate_error_log('exttab_union_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_union_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

create table exttab_union_ctas_2 as
SELECT e1.i, count(e2.j) from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i group by e1.i
UNION
SELECT e1.i, count(e2.j) from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i group by e1.i
UNION
SELECT e1.i, count(e2.j) from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i group by e1.i
UNION
SELECT e1.i, count(e2.j) from exttab_union_1 e1 INNER JOIN exttab_union_1 e2 ON e1.i = e2.i group by e1.i;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i, count' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT 8
-- Should contain results
SELECT * FROM exttab_union_ctas_2 order by i;
 i | count 
---+-------
 0 |     1
 1 |     1
 4 |     1
 5 |     1
 6 |     1
 7 |     1
 8 |     1
 9 |     1
(8 rows)

-- There should be error rows
SELECT count(*) > 0 FROM gp_read_error_log('exttab_union_1');
 ?column? 
----------
 t
(1 row)

