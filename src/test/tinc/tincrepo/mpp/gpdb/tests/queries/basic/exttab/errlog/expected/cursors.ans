-- start_ignore
-- end_ignore
DROP EXTERNAL TABLE IF EXISTS exttab_cursor_1;
DROP EXTERNAL TABLE
DROP EXTERNAL TABLE IF EXISTS exttab_cursor_2;
DROP EXTERNAL TABLE
DROP TABLE IF EXISTS exttab_cursor_err;
psql:/path/sql_file:1: NOTICE:  table "exttab_cursor_err" does not exist, skipping
DROP TABLE
-- Generate the file with very few errors
\! python @script@ 10 2 > @data_dir@/exttab_cursor_1.tbl
-- does not reach reject limit
CREATE EXTERNAL TABLE exttab_cursor_1( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_cursor_1.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 10;
CREATE EXTERNAL TABLE
-- Generate the file with lot of errors
\! python @script@ 200 50 > @data_dir@/exttab_cursor_2.tbl
-- reaches reject limit, use the same err table
CREATE EXTERNAL TABLE exttab_cursor_2( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_cursor_2.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 2;
CREATE EXTERNAL TABLE
-- Test: Define a cursor on an external table scan query with segment reject limit reached
BEGIN;
BEGIN
DECLARE exttab_cur1 no scroll cursor FOR
SELECT e1.i, e2.j from exttab_cursor_2 e1 INNER JOIN exttab_cursor_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_cursor_2 e1 INNER JOIN exttab_cursor_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_cursor_2 e1 INNER JOIN exttab_cursor_2 e2 ON e1.i = e2.i;
DECLARE CURSOR
COMMIT;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice3 @host@:40000 pid=10298)
DETAIL:  External table exttab_cursor_2, line 6 of gpfdist://@host@:@port@/exttab_cursor_2.tbl: "error_1"
-- This should have the errors populated already
SELECT count(*) > 0 FROM gp_read_error_log('exttab_cursor_2');
 ?column? 
----------
 t
(1 row)

-- Test: Fetch on external table scans with segment reject limit reached
SELECT gp_truncate_error_log('exttab_cursor_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_cursor_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

BEGIN;
BEGIN
DECLARE exttab_cur1 no scroll cursor FOR
SELECT e1.i, e2.j from exttab_cursor_2 e1 INNER JOIN exttab_cursor_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_cursor_2 e1 INNER JOIN exttab_cursor_2 e2 ON e1.i = e2.i
UNION ALL
SELECT e1.i, e2.j from exttab_cursor_2 e1 INNER JOIN exttab_cursor_2 e2 ON e1.i = e2.i;
DECLARE CURSOR
-- Should not fail as we would not have reached segment reject limit yet. MPP-23814. This fails currently though
FETCH exttab_cur1;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice3 @host@:40000 pid=10298)
DETAIL:  External table exttab_cursor_2, line 6 of gpfdist://@host@:@port@/exttab_cursor_2.tbl: "error_1"
COMMIT;
ROLLBACK
-- This should have errors populated already
SELECT count(*) > 0 FROM gp_read_error_log('exttab_cursor_2');
 ?column? 
----------
 t
(1 row)

-- Test: Fetch on external table scans without reaching segment reject limit
SELECT gp_truncate_error_log('exttab_cursor_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_cursor_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

BEGIN;
BEGIN
DECLARE exttab_cur1 no scroll cursor FOR
SELECT e1.i, e2.j from exttab_cursor_1 e1 INNER JOIN exttab_cursor_1 e2 ON e1.i = e2.i
UNION
SELECT e1.i, e2.j from exttab_cursor_1 e1 INNER JOIN exttab_cursor_1 e2 ON e1.i = e2.i;
DECLARE CURSOR
-- Should not fail
FETCH exttab_cur1;
 i |    j     
---+----------
 0 | 0_number
(1 row)

FETCH exttab_cur1;
 i |    j     
---+----------
 1 | 1_number
(1 row)

FETCH exttab_cur1;
 i |    j     
---+----------
 4 | 4_number
(1 row)

FETCH exttab_cur1;
 i |    j     
---+----------
 5 | 5_number
(1 row)

FETCH exttab_cur1;
 i |    j     
---+----------
 6 | 6_number
(1 row)

FETCH exttab_cur1;
 i |    j     
---+----------
 7 | 7_number
(1 row)

FETCH exttab_cur1;
 i |    j     
---+----------
 8 | 8_number
(1 row)

FETCH exttab_cur1;
 i |    j     
---+----------
 9 | 9_number
(1 row)

FETCH exttab_cur1;
 i | j 
---+---
(0 rows)

FETCH exttab_cur1;
 i | j 
---+---
(0 rows)

COMMIT;
COMMIT
-- This should have errors populated already
SELECT count(*) > 0 FROM gp_read_error_log('exttab_cursor_1');
 ?column? 
----------
 t
(1 row)

-- Test: Rollback transaction after populating error logs
SELECT gp_truncate_error_log('exttab_cursor_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_cursor_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

BEGIN;
BEGIN
-- This would have populated the error logs
DECLARE exttab_cur1 no scroll cursor FOR
SELECT e1.i, e2.j from exttab_cursor_1 e1 INNER JOIN exttab_cursor_1 e2 ON e1.i = e2.i
UNION
SELECT e1.i, e2.j from exttab_cursor_1 e1 INNER JOIN exttab_cursor_1 e2 ON e1.i = e2.i;
DECLARE CURSOR
CREATE TABLE exttab_cursor_foo(i int, j int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
ROLLBACK;
ROLLBACK
-- Error logs should be populated even if the transaction was rolled back.
SELECT count(*) > 0 FROM gp_read_error_log('exttab_cursor_1');
 ?column? 
----------
 t
(1 row)

