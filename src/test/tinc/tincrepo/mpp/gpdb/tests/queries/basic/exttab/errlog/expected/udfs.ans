-- start_ignore
SET optimizer=off;
SET
-- end_ignore
DROP EXTERNAL TABLE IF EXISTS exttab_udfs_1;
psql:/path/sql_file:1: NOTICE:  table "exttab_udfs_1" does not exist, skipping
DROP EXTERNAL TABLE
DROP EXTERNAL TABLE IF EXISTS exttab_udfs_2;
psql:/path/sql_file:1: NOTICE:  table "exttab_udfs_2" does not exist, skipping
DROP EXTERNAL TABLE
DROP TABLE IF EXISTS exttab_udfs_err;
psql:/path/sql_file:1: NOTICE:  table "exttab_udfs_err" does not exist, skipping
DROP TABLE
-- Generate the file with very few errors
\! python @script@ 10 2 > @data_dir@/exttab_udfs_1.tbl
-- does not reach reject limit
CREATE EXTERNAL TABLE exttab_udfs_1( i int, j text ) 
LOCATION ('gpfdist://localhost:8080/exttab_udfs_1.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 10;
CREATE EXTERNAL TABLE
-- Generate the file with lot of errors
\! python @script@ 200 50 > @data_dir@/exttab_udfs_2.tbl
-- reaches reject limit, use the same err table
CREATE EXTERNAL TABLE exttab_udfs_2( i int, j text ) 
LOCATION ('gpfdist://localhost:8080/exttab_udfs_2.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 2;
CREATE EXTERNAL TABLE
-- Test: UDFS with segment reject limit reached
CREATE OR REPLACE FUNCTION exttab_udfs_func1 ()
RETURNS boolean
AS $$
BEGIN

  EXECUTE 'SELECT sum(distinct e1.i) as sum_i, sum(distinct e2.i) as sum_j, e1.j as j FROM

	   (SELECT i, j FROM exttab_udfs_1 WHERE i < 5 ) e1,
	   (SELECT i, j FROM exttab_udfs_2 WHERE i < 10) e2

	   group by e1.j';
  RETURN 1;
END;
$$
LANGUAGE plpgsql volatile;
CREATE FUNCTION
SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- Should fail
SELECT * FROM exttab_udfs_func1();
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice3 mdw:35000 pid=12054)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "SELECT sum(distinct e1.i) as sum_i, sum(distinct e2.i) as sum_j, e1.j as j FROM

	   (SELECT i, j FROM exttab_udfs_1 WHERE i < 5 ) e1,
	   (SELECT i, j FROM exttab_udfs_2 WHERE i < 10) e2

	   group by e1.j"
PL/pgSQL function "exttab_udfs_func1" line 3 at execute statement
-- Should be populated
SELECT COUNT(*) > 0 FROM 
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

-- INSERT INTO from a udf
DROP TABLE IF EXISTS exttab_udfs_insert_1;
psql:/path/sql_file:1: NOTICE:  table "exttab_udfs_insert_1" does not exist, skipping
DROP TABLE
CREATE TABLE exttab_udfs_insert_1(a boolean);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- Should fail
INSERT INTO exttab_udfs_insert_1 SELECT * FROM exttab_udfs_func1();
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice1 mdw:35000 pid=12082)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "SELECT sum(distinct e1.i) as sum_i, sum(distinct e2.i) as sum_j, e1.j as j FROM

	   (SELECT i, j FROM exttab_udfs_1 WHERE i < 5 ) e1,
	   (SELECT i, j FROM exttab_udfs_2 WHERE i < 10) e2

	   group by e1.j"
PL/pgSQL function "exttab_udfs_func1" line 3 at execute statement
SELECT * FROM exttab_udfs_insert_1;
 a 
---
(0 rows)

-- Error table should be populated correctly
SELECT COUNT(*) > 0 FROM 
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

-- Test: UDFs with INSERT INTO with segment reject limit reached
DROP TABLE IF EXISTS exttab_udfs_insert_2;
psql:/path/sql_file:1: NOTICE:  table "exttab_udfs_insert_2" does not exist, skipping
DROP TABLE
CREATE TABLE exttab_udfs_insert_2 (LIKE exttab_udfs_1);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
CREATE OR REPLACE FUNCTION exttab_udfs_func2 ()
RETURNS boolean
AS $$
DECLARE
 r RECORD;
 cnt integer;
 result boolean;
BEGIN
  SELECT INTO result gp_truncate_error_log('exttab_udfs_1');
  SELECT INTO result gp_truncate_error_log('exttab_udfs_2');

  INSERT INTO exttab_udfs_insert_2
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i;
  
  cnt := 0;
  FOR r in SELECT * FROM gp_read_error_log('exttab_udfs_1') LOOP
      -- just looping through the error log
      cnt := cnt + 1;
  END LOOP;
  
  IF cnt <= 0 THEN
      RAISE EXCEPTION 'Error log should not be empty';
  END IF;

  SELECT count(*) INTO cnt FROM exttab_udfs_insert_2;
  -- should be 24
  IF cnt <> 24 THEN
      RAISE EXCEPTION 'Unexpected number of rows inserted';
  END IF;
  
  -- Now make insert into fail
  INSERT INTO exttab_udfs_insert_2
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i;
  
  -- Should not reach here
  cnt := 0;
  FOR r in SELECT * FROM gp_read_error_log('exttab_udfs_1') LOOP
      -- just looping through the error log
      cnt := cnt + 1;
  END LOOP;
  
  IF cnt <= 0 THEN
      RAISE EXCEPTION 'Error table should not be empty';
  END IF;
  
  RETURN 1;
END;
$$
LANGUAGE plpgsql volatile;
CREATE FUNCTION
SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- All this should fail, error logs should be populated even if the UDF gets aborted as we persist error rows written within aborted txs.
SELECT * FROM exttab_udfs_func2();
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12082)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM 
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT exttab_udfs_func2();
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12132)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM 
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

INSERT INTO exttab_udfs_insert_1 SELECT * FROM exttab_udfs_func2();
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12172)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM 
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

CREATE TABLE exttab_udfs_ctas_2 AS SELECT * FROM exttab_udfs_func2();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'exttab_udfs_func2' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12212)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "INSERT INTO exttab_udfs_insert_2 SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func2" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM 
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

-- No rows should be inserted into exttab_udfs_insert_2
SELECT * FROM exttab_udfs_insert_2;
 i | j 
---+---
(0 rows)

-- Test: UDFS with CTAS inside that will reach segment reject limits 
CREATE OR REPLACE FUNCTION exttab_udfs_func3 ()
RETURNS boolean
AS $$
DECLARE
 r RECORD;
 cnt integer;
 result boolean;
BEGIN
  SELECT INTO result gp_truncate_error_log('exttab_udfs_1');
  SELECT INTO result gp_truncate_error_log('exttab_udfs_2');

  CREATE TABLE exttab_udfs_ctas_2 AS
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i;
  
  cnt := 0;
  FOR r in SELECT * FROM gp_read_error_log('exttab_udfs_1') LOOP
      -- just looping through the error log
      cnt := cnt + 1;
  END LOOP;
  
  IF cnt <= 0 THEN
      RAISE EXCEPTION 'table should not be empty';
  END IF;

  SELECT count(*) INTO cnt FROM exttab_udfs_ctas_2;
  -- should be 24
  IF cnt <> 24 THEN
      RAISE EXCEPTION 'Unexpected number of rows inserted';
  END IF;
  
  -- Now make insert into fail
  CREATE TABLE exttab_udfs_ctas_3 AS
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i
  UNION ALL
  SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i;
  
  -- Should not reach here
  cnt := 0;
  FOR r in SELECT * FROM gp_read_error_log('exttab_udfs_2') LOOP
      -- just looping through the error log
      cnt := cnt + 1;
  END LOOP;
  
  IF cnt <= 0 THEN
      RAISE EXCEPTION 'Error table should not be empty';
  END IF;
  
  RETURN 1;
END;
$$
LANGUAGE plpgsql volatile;
CREATE FUNCTION
-- All this should fail, error logs should be populated even if the UDF gets aborted as we persist error rows written within aborted txs.
SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT * FROM exttab_udfs_func3();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12256)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT exttab_udfs_func3();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12303)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

INSERT INTO exttab_udfs_insert_1 SELECT * FROM exttab_udfs_func3();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12345)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_udfs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

CREATE TABLE exttab_udfs_ctas_4 AS SELECT * FROM exttab_udfs_func3();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'exttab_udfs_func3' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 12 data formatting errors (12 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_2 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 9 at SQL statement
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: NOTICE:  Found 6 data formatting errors (6 or more input rows). Rejected related input data.
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice4 mdw:35000 pid=12387)
DETAIL:  External table exttab_udfs_2, line 6 of gpfdist://localhost:8080/exttab_udfs_2.tbl: "error_1"
CONTEXT:  SQL statement "CREATE TABLE exttab_udfs_ctas_3 AS SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_1 e2 ON e1.i = e2.i UNION ALL SELECT e1.i, e2.j from exttab_udfs_1 e1 INNER JOIN exttab_udfs_2 e2 ON e1.i = e2.i"
PL/pgSQL function "exttab_udfs_func3" line 33 at SQL statement
SELECT COUNT(*) > 0 FROM
(
SELECT * FROM gp_read_error_log('exttab_udfs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_udfs_2')
) FOO;
 ?column? 
----------
 t
(1 row)

