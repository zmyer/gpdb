-- start_ignore
-- end_ignore
DROP EXTERNAL TABLE IF EXISTS exttab_txs_1;
DROP EXTERNAL TABLE
DROP EXTERNAL TABLE IF EXISTS exttab_txs_2;
DROP EXTERNAL TABLE
-- Generate the file with very few errors
\! python @script@ 15 3 > @data_dir@/exttab_txs_1.tbl
-- does not reach reject limit
CREATE EXTERNAL TABLE exttab_txs_1( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_txs_1.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 10;
CREATE EXTERNAL TABLE
-- Generate the file with lot of errors
\! python @script@ 300 70 > @data_dir@/exttab_txs_2.tbl
-- reaches reject limit, use the same err table
CREATE EXTERNAL TABLE exttab_txs_2( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_txs_2.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 2;
CREATE EXTERNAL TABLE
-- Truncate error logs within transactions
-- Populate error log before transaction
SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_1 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_1 WHERE i < 10) e2
WHERE e1.i = e2.i;
 i |    j     
---+----------
 0 | 0_number
 1 | 1_number
 2 | 2_number
(3 rows)

SELECT count(*) FROM
(
SELECT * FROM gp_read_error_log('exttab_txs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_txs_2')
) FOO;
 count 
-------
     6
(1 row)

BEGIN;
BEGIN
SELECT gp_truncate_error_log('exttab_txs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_txs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_1 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_1 WHERE i < 10) e2
WHERE e1.i = e2.i;
 i |    j     
---+----------
 0 | 0_number
 1 | 1_number
 2 | 2_number
(3 rows)

COMMIT;
COMMIT
SELECT count(*) FROM
(
SELECT * FROM gp_read_error_log('exttab_txs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_txs_2')
) FOO;
 count 
-------
     6
(1 row)

-- Test: TRUNCATE error logs within tx , abort transaction
-- Populate error log before transaction
SELECT gp_truncate_error_log('exttab_txs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_txs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_1 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_1 WHERE i < 10) e2
WHERE e1.i = e2.i;
 i |    j     
---+----------
 0 | 0_number
 1 | 1_number
 2 | 2_number
(3 rows)

SELECT count(*) FROM
(
SELECT * FROM gp_read_error_log('exttab_txs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_txs_2')
) FOO;
 count 
-------
     6
(1 row)

BEGIN;
BEGIN
SELECT gp_truncate_error_log('exttab_txs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_txs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_1 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_1 WHERE i < 10) e2
WHERE e1.i = e2.i;
 i |    j     
---+----------
 0 | 0_number
 1 | 1_number
 2 | 2_number
(3 rows)

SELECT count(*) FROM
(
SELECT * FROM gp_read_error_log('exttab_txs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_txs_2')
) FOO;
 count 
-------
     6
(1 row)

ABORT;
ROLLBACK
SELECT count(*) FROM
(
SELECT * FROM gp_read_error_log('exttab_txs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_txs_2')
) FOO;
 count 
-------
     6
(1 row)

-- Test: TRUNCATE error logs within txs , with segment reject limit reached
-- Populate error log before transaction
SELECT gp_truncate_error_log('exttab_txs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_txs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_1 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_1 WHERE i < 10) e2
WHERE e1.i = e2.i;
 i |    j     
---+----------
 0 | 0_number
 1 | 1_number
 2 | 2_number
(3 rows)

SELECT count(*) FROM
(
SELECT * FROM gp_read_error_log('exttab_txs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_txs_2')
) FOO;
 count 
-------
     6
(1 row)

BEGIN;
BEGIN
SELECT gp_truncate_error_log('exttab_txs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_txs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

-- This should abort the transaction
SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_1 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_2 WHERE i < 10) e2
WHERE e1.i = e2.i;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice2 @host@:40000 pid=19671)
DETAIL:  External table exttab_txs_2, line 10 of gpfdist://@host@:@port@/exttab_txs_2.tbl: "error_1"
COMMIT;
ROLLBACK
-- Additional error rows should have been inserted into the error logs even if the tx is aborted.
-- Truncate of error logs should not be rolled back even if the transaction is aborted. All operation on error logs are persisted. 
SELECT count(*) FROM
(
SELECT * FROM gp_read_error_log('exttab_txs_1')
UNION ALL
SELECT * FROM gp_read_error_log('exttab_txs_2')
) FOO;
 count 
-------
     4
(1 row)

-- Test: Creating external table with error log within txs with segment reject limits reached
SELECT gp_truncate_error_log('exttab_txs_1');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

SELECT gp_truncate_error_log('exttab_txs_2');
 gp_truncate_error_log 
-----------------------
 t
(1 row)

DROP EXTERNAL TABLE IF EXISTS exttab_txs_3;
DROP EXTERNAL TABLE
DROP EXTERNAL TABLE IF EXISTS exttab_txs_4;
DROP EXTERNAL TABLE
BEGIN;
BEGIN
-- create an external table that will reach segment reject limit
-- reaches reject limit
CREATE EXTERNAL TABLE exttab_txs_3( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_txs_2.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 2;
CREATE EXTERNAL TABLE
-- new error log, within segment reject limit
CREATE EXTERNAL TABLE exttab_txs_4( i int, j text ) 
LOCATION ('gpfdist://@host@:@port@/exttab_txs_1.tbl') FORMAT 'TEXT' (DELIMITER '|') 
LOG ERRORS SEGMENT REJECT LIMIT 10;
CREATE EXTERNAL TABLE
SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_4 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_4 WHERE i < 10) e2
WHERE e1.i = e2.i order by e1.i;
 i |    j     
---+----------
 0 | 0_number
 1 | 1_number
 2 | 2_number
(3 rows)

-- should be populated correctly
SELECT count(*) FROM gp_read_error_log('exttab_txs_4');
 count 
-------
     6
(1 row)

-- should error out and abort the transaction
SELECT e1.i, e2.j FROM
(SELECT i, j FROM exttab_txs_3 WHERE i < 5 ) e1,
(SELECT i, j FROM exttab_txs_4 WHERE i < 10) e2
WHERE e1.i = e2.i order by e1.i;
psql:/path/sql_file:1: ERROR:  Segment reject limit reached. Aborting operation. Last error was: missing data for column "j"  (seg0 slice1 @host@:40000 pid=19696)
DETAIL:  External table exttab_txs_3, line 10 of gpfdist://@host@:@port@/exttab_txs_2.tbl: "error_1"
COMMIT;
ROLLBACK
-- Error logs should not exist for these tables that would have been rolled back 
SELECT count(*) FROM gp_read_error_log('exttab_txs_3');
 count 
-------
     0
(1 row)

SELECT count(*) FROM gp_read_error_log('exttab_txs_4');
 count 
-------
     0
(1 row)

-- external tables created within aborted transactions should not exist
SELECT count(*) FROM exttab_txs_3;
psql:/path/sql_file:1: ERROR:  relation "exttab_txs_3" does not exist
LINE 1: SELECT count(*) FROM exttab_txs_3;
                             ^
SELECT count(*) FROM exttab_txs_4;
psql:/path/sql_file:1: ERROR:  relation "exttab_txs_4" does not exist
LINE 1: SELECT count(*) FROM exttab_txs_4;
                             ^
