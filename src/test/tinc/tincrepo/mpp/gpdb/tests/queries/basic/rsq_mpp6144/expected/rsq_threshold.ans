
-- start_ignore
DROP TABLE IF EXISTS xyz CASCADE;
DROP
DROP ROLE IF EXISTS xyzuser;
DROP
-- end_ignore
CREATE ROLE xyzuser;
CREATE
CREATE TABLE xyz (a int) distributed randomly;
CREATE
GRANT ALL PRIVILEGES on xyz to xyzuser with grant option;
GRANT
INSERT INTO xyz VALUES (1);
INSERT 1
INSERT INTO xyz VALUES (2);
INSERT 1
ALTER RESOURCE QUEUE pg_default ACTIVE THRESHOLD 2;
ALTER
1: SET ROLE xyzuser;
SET
2: SET ROLE xyzuser;
SET
1: BEGIN WORK;
BEGIN
1: SELECT relname FROM pg_class where relname = 'xyz';
relname
-------
xyz    
(1 row)
1: DECLARE c99 CURSOR FOR SELECT COUNT(*) FROM xyz;
DECLARE
1: FETCH c99;
count
-----
2    
(1 row)
1: ROLLBACK WORK;
ROLLBACK
4: SET ROLE xyzuser;
SET
1: BEGIN WORK;
BEGIN
1: declare c0 cursor for select count(*) from xyz;
DECLARE
1: fetch c0;
count
-----
2    
(1 row)
1: declare c1 cursor for select count(*) from xyz;
DECLARE
1: fetch c1;
count
-----
2    
(1 row)
2>: select count(*) from xyz;  <waiting ...>
3: ALTER RESOURCE QUEUE pg_default ACTIVE THRESHOLD 4;
ALTER
4: select count(*) from xyz;
count
-----
2    
(1 row)
2<:  <... completed>
count
-----
2    
(1 row)
3: ALTER RESOURCE QUEUE pg_default ACTIVE THRESHOLD 2;
ALTER
1: DECLARE c4 CURSOR FOR SELECT COUNT(*) FROM xyz;
ERROR:  deadlock detected, locking against self
3: SELECT COUNT(*) FROM xyz;
count
-----
2    
(1 row)
1: ROLLBACK WORK;
ROLLBACK
2: ROLLBACK WORK;
ROLLBACK
3: ROLLBACK WORK;
ROLLBACK
4: ROLLBACK WORK;
ROLLBACK
3: ALTER RESOURCE QUEUE pg_default ACTIVE THRESHOLD 20;
ALTER
3: DROP TABLE xyz;
DROP
3: DROP ROLE xyzuser;
DROP
3: COMMIT WORK;
COMMIT

