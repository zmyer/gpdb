-- start_ignore
SET optimizer=on;
SET
SET optimizer_log=on;
SET
-- end_ignore
-- ETF sub-query contains join table / view
-- Table t1, t2 are distributed by column a
-- Table t3, t5 are distributed by columns a and e
-- Table t4, t6 are distributed randomly
    DROP TABLE IF EXISTS t2;
DROP TABLE
    DROP TABLE IF EXISTS t5;
DROP TABLE
    DROP TABLE IF EXISTS t6;
DROP TABLE
    DROP TABLE IF EXISTS t4;
DROP TABLE
    DROP TABLE IF EXISTS t3;
DROP TABLE
    CREATE TABLE t3 (a int, b int, c int, d int, e text)
    DISTRIBUTED BY (a, e);
CREATE TABLE
    CREATE TABLE t2 (a int, b int, c int, d int, e text)
    DISTRIBUTED BY (a);
CREATE TABLE
    INSERT INTO t2 SELECT i, i/3, i%2, 100-i, 'text'||i
    FROM generate_series(1,100) i;
INSERT 0 100
    DROP TABLE IF EXISTS t4;
psql:/path/sql_file:1: NOTICE:  table "t4" does not exist, skipping
DROP TABLE
    CREATE TABLE t4 (a int, b int, c int, d int, e text)
    DISTRIBUTED RANDOMLY;
CREATE TABLE
    CREATE TABLE t5 (a int, b int, c int, d int, e text)
    DISTRIBUTED BY (a, e);
CREATE TABLE
    INSERT INTO t5 SELECT i, i/3, i%2, 100-i, 'text'||i
    FROM generate_series(1,100) i;
INSERT 0 100
    CREATE TABLE t6 (a int, b int, c int, d int, e text)
    DISTRIBUTED RANDOMLY;
CREATE TABLE
    INSERT INTO t6 SELECT i, i/3, i%2, 100-i, 'text'||i
    FROM generate_series(1,100) i;
INSERT 0 100
    -- Join t1 and t2 that are both distributed by single column a
    -- SCATTER BY the same single distribution key a
    -- of the source tables t1 and t2
    -- No redistribution should be involved
    SELECT find_operator('EXPLAIN SELECT * FROM transform( TABLE(select t1.a, t2.e from t1 join t2 on t1.a = t2.a scatter by t1.a) );','Redistribute Motion');
find_operator
---------------
 ['false']
(1 row)
    -- Join t3 and t5 that are both distributed by composite key columns a, e
    -- SCATTER BY the same composite key a, e
    -- of the source tables t3 and t5
    -- No redistribution should be involved
    SELECT find_operator('EXPLAIN SELECT * FROM transform( TABLE(select t3.a, t5.e from t3 join t5 on (t3.a = t5.a and t3.e = t5.e) scatter by t3.a, t3.e) );','Redistribute Motion');
find_operator
---------------
 ['false']
(1 row)
    -- Both source tables are DISTRIBUTED RANDOMLY
    -- Redistribution is needed
    SELECT find_operator('EXPLAIN SELECT * FROM transform( TABLE(select t4.a, t6.e from t4 join t6 on (t4.a = t6.a and t4.e = t6.e) scatter by t4.a, t6.e) );','Redistribute Motion');
find_operator
---------------
 ['true']
(1 row)
