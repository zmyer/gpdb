drop schema if exists rtest cascade;
psql:/path/sql_file:1: NOTICE:  schema "rtest" does not exist, skipping
DROP SCHEMA
create schema rtest;
CREATE SCHEMA
set search_path=rtest, public;
SET
drop language if exists 'plr' cascade;
psql:/path/sql_file:1: NOTICE:  drop cascades to function r_median(double precision[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function test_spi_tup(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function r_max(integer,integer)
psql:/path/sql_file:1: NOTICE:  drop cascades to function get_emps()
psql:/path/sql_file:1: NOTICE:  drop cascades to function overpaid(emp)
psql:/path/sql_file:1: NOTICE:  drop cascades to function sd(double precision[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function mpp16512test()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.restore_df(bytea)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_serialize(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.cursor_fetch_test_arg(integer)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.cursor_direction_test()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.cursor_fetch_test(integer,boolean)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.foonotice()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.modfoo()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.acceptfoo()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.rejectfoo()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.arr3d(integer[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.arr3d(integer[],integer,integer,integer)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_in_m_tup(integer[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_foo(joeconway.foo)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.r_max(integer,integer)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.r_test(double precision)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_spi_lastoid(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_spi_execp(text,text,text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_spi_prep(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.fetch_pgoid(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_spi_tup(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_spi_ta(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_spi_t(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.pg_quote_literal(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.pg_quote_ident(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_vtup1()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_mtup1()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dtup2()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dtup1()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_vint()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_vtup()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_mtup()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dtup()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dia1()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dta2()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dta1()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dta()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dia()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_mia()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_mta()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_via()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_vta()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_di()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_dt()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_mi()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_mt()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_vi()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.test_vt()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.r_gamma(double precision[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.r_median(double precision[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway."median"(double precision)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.sprintf(text,text,text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.mean(double precision[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.sd(double precision[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.print(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.reval(text[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.vec(double precision)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway."commandArgs"()
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.reval(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.echo(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.vec(double precision,double precision)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.vec(double precision[])
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.paste(text[],text[],text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.throw_notice(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.pg_test_install(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function joeconway.pg_test_module_load(text)
psql:/path/sql_file:1: NOTICE:  drop cascades to function r_version()
psql:/path/sql_file:1: NOTICE:  drop cascades to function load_r_typenames()
psql:/path/sql_file:1: NOTICE:  drop cascades to function r_typenames()
psql:/path/sql_file:1: NOTICE:  drop cascades to function gpdemo.mdl_score_demo(bytea,integer,text,text,text,double precision,integer,integer,integer,integer,integer,integer,integer)
psql:/path/sql_file:1: NOTICE:  drop cascades to function gpdemo.mdl_load_demo(bytea)
psql:/path/sql_file:1: NOTICE:  drop cascades to function gpdemo.mdl_save_demo()
DROP LANGUAGE
create language 'plr';
CREATE LANGUAGE
drop function if exists install_rcmd(text);
DROP FUNCTION
CREATE OR REPLACE FUNCTION install_rcmd (text)
RETURNS text
AS '$libdir/plr','install_rcmd'
LANGUAGE 'C' WITH (isstrict);
CREATE FUNCTION
create or replace function my_r_primes() returns integer as '
    	x <- 1:100
	y <- rep(T,100)
	for (i in 3:100) {
    	if (all(i%%(2:(i-1))!=0)){
        	y <- TRUE
        	} else {y <- FALSE
                	}
	}
	print(x[y])
	return(0)
' language 'plr';
CREATE FUNCTION
select my_r_primes();
 my_r_primes 
-------------
           0
(1 row)

select install_rcmd('craps <- function() {
        #returns TRUE if you win, FALSE otherwise
        initial.roll <- sum(sample(1:6,2,replace=T))
        if (initial.roll == 7 || initial.roll == 11) return(TRUE)
        while (TRUE) {
                current.roll <- sum(sample(1:6,2,replace=T))
                if (current.roll == 7 || current.roll == 11) {
                return(FALSE)
                } else if (current.roll == initial.roll) {
                return(TRUE)
                }
        }
        }');
 install_rcmd 
--------------
 OK
(1 row)

create or replace function my_r_gamewin() returns integer as '
	mean(replicate(10000, craps()))
	print(mean)
	return(0)
' language 'plr';
CREATE FUNCTION
select my_r_gamewin();
 my_r_gamewin 
--------------
            0
(1 row)

