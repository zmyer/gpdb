-- start_ignore
SET optimizer=off;
SET
-- end_ignore
-- ETF sub-query contains correlated sub-query
select avg(a)::int,'haha'::text from t1;
 avg | text 
-----+------
  51 | haha
(1 row)

SELECT * FROM transform( 
    TABLE( select avg(a)::int,'haha'::text from t1 ));
  a   | b  
------+----
 haha | 51
(1 row)

SELECT * FROM transform(
Table(select a,e from t1 t1 where d >
(select avg(a) from t1 t2 where t2.a=t1.a)
)) order by b;
   a    | b  
--------+----
 text1  |  1
 text2  |  2
 text3  |  3
 text4  |  4
 text5  |  5
 text6  |  6
 text7  |  7
 text8  |  8
 text9  |  9
 text10 | 10
 text11 | 11
 text12 | 12
 text13 | 13
 text14 | 14
 text15 | 15
 text16 | 16
 text17 | 17
 text18 | 18
 text19 | 19
 text20 | 20
 text21 | 21
 text22 | 22
 text23 | 23
 text24 | 24
 text25 | 25
 text26 | 26
 text27 | 27
 text28 | 28
 text29 | 29
 text30 | 30
 text31 | 31
 text32 | 32
 text33 | 33
 text34 | 34
 text35 | 35
 text36 | 36
 text37 | 37
 text38 | 38
 text39 | 39
 text40 | 40
 text41 | 41
 text42 | 42
 text43 | 43
 text44 | 44
 text45 | 45
 text46 | 46
 text47 | 47
 text48 | 48
 text49 | 49
(49 rows)

-- This query should fail with following error message:
select a,e from t1 t1 where a >
(SELECT b FROM transform(
TABLE( select avg(a)::int,'haha'::text from t1 t2 where t2.a=t1.d)
)) ;
psql:/path/sql_file:1: ERROR:  subquery in TABLE value expression may not refer to relation of another query level
LINE 3: TABLE( select avg(a)::int,'haha'::text from t1 t2 where t2.a...
        ^
-- ERROR:  subquery in TABLE value expression may not refer to relation of another query level
-- LINE 3: TABLE( select avg(a)::int,'haha'::text from t1 t2 where t2.a...
-- The following internal correlation sub-query works correctly:
SELECT * FROM transform(
Table(select a,e from t1 t1 where a >
(select avg(a) from t1 t2 where t2.a=t1.d)
)) order by b;
   a    | b  
--------+----
 text51 | 51
 text52 | 52
 text53 | 53
 text54 | 54
 text55 | 55
 text56 | 56
 text57 | 57
 text58 | 58
 text59 | 59
 text60 | 60
 text61 | 61
 text62 | 62
 text63 | 63
 text64 | 64
 text65 | 65
 text66 | 66
 text67 | 67
 text68 | 68
 text69 | 69
 text70 | 70
 text71 | 71
 text72 | 72
 text73 | 73
 text74 | 74
 text75 | 75
 text76 | 76
 text77 | 77
 text78 | 78
 text79 | 79
 text80 | 80
 text81 | 81
 text82 | 82
 text83 | 83
 text84 | 84
 text85 | 85
 text86 | 86
 text87 | 87
 text88 | 88
 text89 | 89
 text90 | 90
 text91 | 91
 text92 | 92
 text93 | 93
 text94 | 94
 text95 | 95
 text96 | 96
 text97 | 97
 text98 | 98
 text99 | 99
(49 rows)

select avg(a) from t1 
group by (select b from transform(TABLE(select a,e from t1 where a=10 )) );
 avg  
------
 50.5
(1 row)

SELECT min(b) FROM
transform( TABLE(select a,e from t1 where a <5) );
 min 
-----
   1
(1 row)

------------------------------
-- This query works correctly:
SELECT * FROM t1 WHERE a IN (
SELECT b FROM transform(
TABLE(select a,e from t1
order by a
scatter randomly))
) AND a < 10 order by d;
 a | b | c | d  |   e   
---+---+---+----+-------
 9 | 3 | 1 | 91 | text9
 8 | 2 | 0 | 92 | text8
 7 | 2 | 1 | 93 | text7
 6 | 2 | 0 | 94 | text6
 5 | 1 | 1 | 95 | text5
 4 | 1 | 0 | 96 | text4
 3 | 1 | 1 | 97 | text3
 2 | 0 | 0 | 98 | text2
 1 | 0 | 1 | 99 | text1
(9 rows)

-- The following query should also work.
-- The only different between this one the one above is this uses "NOT IN"
SELECT * FROM t1 WHERE a NOT IN (
SELECT b FROM transform(
TABLE(select a,e from t1
order by a
scatter randomly))
) AND a < 10 order by a;
 a | b | c | d | e 
---+---+---+---+---
(0 rows)

-------------------------------
-- For EXISTS and NOT EXISTS
SELECT * FROM t1 WHERE EXISTS (
SELECT 1 FROM transform(
TABLE(select a,e from t1
order by a
scatter randomly))
) AND a < 10 ORDER BY a;
 a | b | c | d  |   e   
---+---+---+----+-------
 1 | 0 | 1 | 99 | text1
 2 | 0 | 0 | 98 | text2
 3 | 1 | 1 | 97 | text3
 4 | 1 | 0 | 96 | text4
 5 | 1 | 1 | 95 | text5
 6 | 2 | 0 | 94 | text6
 7 | 2 | 1 | 93 | text7
 8 | 2 | 0 | 92 | text8
 9 | 3 | 1 | 91 | text9
(9 rows)

SELECT * FROM t1 WHERE NOT EXISTS (
SELECT 1 FROM transform(
TABLE(select a,e from t1
order by a
scatter randomly))
) AND a < 10 ORDER BY a;
 a | b | c | d | e 
---+---+---+---+---
(0 rows)

--------------------------------
-- ETF in ALL sub query expression
SELECT * FROM t1 WHERE a>ALL (
SELECT b FROM transform(
TABLE(select a,e from t1
where a>90 and a<98
order by a
scatter randomly))
) ORDER BY a;
  a  | b  | c | d |    e    
-----+----+---+---+---------
  98 | 32 | 0 | 2 | text98
  99 | 33 | 1 | 1 | text99
 100 | 33 | 0 | 0 | text100
(3 rows)

--------------------------------
-- Calling ETF from WITH clause (CTE)
WITH first_5 AS (
SELECT b,a FROM transform( TABLE(
select a,e from t1 where a <= 5
))
)
select * from first_5 order by b;
 b |   a   
---+-------
 1 | text1
 2 | text2
 3 | text3
 4 | text4
 5 | text5
(5 rows)

---------------------------------
-- Test ETF as argument
-- The following query should fail with error as shown:
SELECT * FROM ARRAY_APPEND(array['value0','value1'],
(select a from transform( TABLE(select * from intable))));
psql:/path/sql_file:1: ERROR:  more than one row returned by a subquery used as an expression
-- ERROR:  more than one row returned by a subquery used as an expression
-- The following query should succeed
SELECT * FROM ARRAY_APPEND(array['value0','value1'],
(select a from transform( TABLE(select * from intable where id=2))));
      array_append       
-------------------------
 {value0,value1,value_2}
(1 row)

