-- start_ignore
SET optimizer=off;
SET
-- end_ignore
    -- create describe (callback) function
    -- both input and output type must be internal
    CREATE OR REPLACE FUNCTION project_desc(internal)
    RETURNS internal
    AS '$libdir/tabfunc_gppc_demo', 'project_describe'
    LANGUAGE C;
CREATE FUNCTION
    -- create dynamic return type (drt) table function
    -- using the callback function
    -- the return type must be defined as set of record
    CREATE OR REPLACE FUNCTION project(anytable, integer)
    RETURNS setof record
    AS '$libdir/tabfunc_gppc_demo', 'project'
    LANGUAGE C
    WITH (describe = project_desc);
CREATE FUNCTION
-- Invalid projection position 
    SELECT * FROM project( TABLE( SELECT * FROM history ), NULL);
psql:/path/sql_file:1: ERROR:  the 2nd argument must be an integer (gppc.c:1351)
LINE 1: SELECT * FROM project( TABLE( SELECT * FROM history ), NULL)...
                      ^
    SELECT * FROM project( TABLE( SELECT * FROM history ), -1);
psql:/path/sql_file:1: ERROR:  invalid column position -1 (gppc.c:1351)
LINE 1: SELECT * FROM project( TABLE( SELECT * FROM history ), -1);
                      ^
    SELECT * FROM project( TABLE( SELECT * FROM history ), 0);
psql:/path/sql_file:1: ERROR:  invalid column position 0 (gppc.c:1351)
LINE 1: SELECT * FROM project( TABLE( SELECT * FROM history ), 0);
                      ^
    SELECT * FROM project( TABLE( SELECT * FROM history ), 25);
psql:/path/sql_file:1: ERROR:  invalid column position 25 (gppc.c:1351)
LINE 1: SELECT * FROM project( TABLE( SELECT * FROM history ), 25);
                      ^
    SELECT * FROM project( TABLE( SELECT time FROM history ), 2);
psql:/path/sql_file:1: ERROR:  invalid column position 2 (gppc.c:1351)
LINE 1: SELECT * FROM project( TABLE( SELECT time FROM history ), 2)...
                      ^
    SELECT * FROM project( TABLE( SELECT * FROM t1 ), (ARRAY[2,3])[1]);
psql:/path/sql_file:1: ERROR:  unable to resolve function argument (execQual.c:5469)
LINE 1: SELECT * FROM project( TABLE( SELECT * FROM t1 ), (ARRAY[2,3...
                      ^
-- The following queries should work
    SELECT * FROM project( TABLE( SELECT * FROM history ), 1+1) order by time;
        time         
---------------------
 2011-08-19 19:05:13
 2011-08-19 19:06:50
 2011-08-19 19:07:35
 2011-08-19 19:08:18
 2011-08-19 19:09:07
 2011-08-20 10:07:10
 2011-08-20 10:07:35
 2011-08-20 10:11:29
 2011-08-20 10:17:10
 2011-08-20 10:17:42
 2011-08-21 10:15:02
 2011-08-21 10:15:02
 2011-08-21 10:15:02
 2011-08-21 10:15:30
 2011-08-21 10:16:02
 2011-08-21 10:16:02
 2011-08-22 10:15:04
 2011-08-22 10:16:10
(18 rows)

    SELECT * FROM project( TABLE( SELECT * FROM t1 ),
      CASE 1 WHEN 2 THEN 1 ELSE GREATEST(1, COALESCE(1+1)) END) 
      order by b limit 10;
 b 
---
 0
 0
 1
 1
 1
 2
 2
 2
 3
 3
(10 rows)

    SELECT * FROM project( TABLE( SELECT * FROM t1 ),
      CASE WHEN 3 IS NOT NULL AND 1 IN (1, 2) THEN floor(NULLIF(2, 3))::int END)
      order by b limit 10;
 b 
---
 0
 0
 1
 1
 1
 2
 2
 2
 3
 3
(10 rows)

