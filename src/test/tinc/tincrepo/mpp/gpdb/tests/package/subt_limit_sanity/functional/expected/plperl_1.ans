create language plperl;
CREATE LANGUAGE
Drop function PLPERLinsert_correct();
ERROR:  function plperlinsert_correct() does not exist
CREATE or REPLACE function  PLPERLinsert_correct () RETURNS void as $$
        spi_exec_query('INSERT INTO  subt_plperl_t1 VALUES (1);');
        spi_exec_query('INSERT INTO  subt_plperl_t1 VALUES (2);');
        spi_exec_query('INSERT INTO  subt_plperl_t1 VALUES (4);');
	return;
$$ language PLPERL;
CREATE FUNCTION
drop function subt_plperl_fn1 (int,int);
ERROR:  function subt_plperl_fn1(integer, integer) does not exist
CREATE or replace function subt_plperl_fn1 (st int,en int) returns void as $$
DECLARE
i integer;
begin
  i=st;
  while i <= en LOOP
    perform PLPERLinsert_correct();
    i = i + 1;
  END LOOP;
end;
$$ LANGUAGE 'plpgsql';
CREATE FUNCTION
DROP table if exists subt_plperl_t1;
NOTICE:  table "subt_plperl_t1" does not exist, skipping
DROP TABLE
Create table subt_plperl_t1 ( i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
select subt_plperl_fn1(1,200);
 subt_plperl_fn1 
-----------------
 
(1 row)

select count(*) from subt_plperl_t1;
 count 
-------
   600
(1 row)

