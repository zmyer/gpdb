-- start_ignore
SET optimizer=off;
SET
-- end_ignore
--ENABLE & DISABLE TRIGGER
          CREATE TABLE mdt_price_change (
          apn CHARACTER(15) NOT NULL,
          effective TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          price NUMERIC(9,2),
          UNIQUE (apn, effective)
          );
psql:/path/sql_file:1: NOTICE:  CREATE TABLE / UNIQUE will create implicit index "mdt_price_change_apn_key" for table "mdt_price_change"
CREATE TABLE
          CREATE TABLE mdt_stock(
          mdt_stock_apn CHARACTER(15) NOT NULL,
          mdt_stock_effective TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          mdt_stock_price NUMERIC(9,2)
          )DISTRIBUTED RANDOMLY;
CREATE TABLE
          CREATE TABLE mdt_stock1(
          mdt_stock_apn CHARACTER(15) NOT NULL,
          mdt_stock_effective TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          mdt_stock_price NUMERIC(9,2)
          )DISTRIBUTED RANDOMLY;
CREATE TABLE
          --trigger function to insert records as required:
          CREATE OR REPLACE FUNCTION mdt_insert_mdt_price_change() RETURNS trigger AS '
          DECLARE
          changed boolean;
          BEGIN
          IF tg_op = ''DELETE'' THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (old.barcode, CURRENT_TIMESTAMP, NULL);
          RETURN old;
          END IF;
          IF tg_op = ''INSERT'' THEN
          changed := TRUE;
          ELSE
          changed := new.price IS NULL != old.price IS NULL OR new.price != old.price;
          END IF;
          IF changed THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (new.barcode, CURRENT_TIMESTAMP, new.price);
          END IF;
          RETURN new;
          END
          ' LANGUAGE plpgsql;
CREATE FUNCTION
          --create a trigger on the table you wish to monitor:
          CREATE TRIGGER mdt_insert_mdt_price_change AFTER INSERT OR DELETE OR UPDATE ON mdt_stock
          FOR EACH ROW EXECUTE PROCEDURE mdt_insert_mdt_price_change();
CREATE TRIGGER
          CREATE TRIGGER mdt_insert_mdt_price_change1 AFTER INSERT OR DELETE OR UPDATE ON mdt_stock1
          FOR EACH ROW EXECUTE PROCEDURE mdt_insert_mdt_price_change();
CREATE TRIGGER
          ALTER TABLE mdt_stock DISABLE TRIGGER mdt_insert_mdt_price_change;
ALTER TABLE
          ALTER TABLE mdt_stock1 ENABLE TRIGGER mdt_insert_mdt_price_change1;
ALTER TABLE
select classname  , schemaname , objname  , usestatus , usename , actionname , subtype from pg_stat_operations  where statime > ( select statime from pg_stat_operations where objname ='my_first_table' and actionname ='CREATE') and objname  not in ('pg_stat_operations','pg_stat_partition_operations') order by statime;
  classname  | schemaname |         objname          | usestatus | usename  | actionname |     subtype     
-------------+------------+--------------------------+-----------+----------+------------+-----------------
 pg_authid   |            | mdt_user                 | CURRENT   | gpadmin  | CREATE     | ROLE
 pg_database |            | mdt_db                   | CURRENT   | mdt_user | CREATE     | DATABASE
 pg_class    | public     | mdt_price_change         | CURRENT   | gpadmin  | CREATE     | TABLE
 pg_class    | public     | mdt_price_change_apn_key | CURRENT   | gpadmin  | CREATE     | INDEX
 pg_class    | public     | mdt_stock                | CURRENT   | gpadmin  | CREATE     | TABLE
 pg_class    | public     | mdt_stock1               | CURRENT   | gpadmin  | CREATE     | TABLE
 pg_class    | public     | mdt_stock                | CURRENT   | gpadmin  | ALTER      | DISABLE TRIGGER
 pg_class    | public     | mdt_stock1               | CURRENT   | gpadmin  | ALTER      | ENABLE TRIGGER
(8 rows)

drop table mdt_price_change;
DROP TABLE
drop table mdt_stock;
DROP TABLE
drop table mdt_stock1;
DROP TABLE
drop function mdt_insert_mdt_price_change();
DROP FUNCTION
select classname  , schemaname , objname  , usestatus , usename , actionname , subtype from pg_stat_operations  where statime > ( select statime from pg_stat_operations where objname ='my_first_table' and actionname ='CREATE') and objname  not in ('pg_stat_operations','pg_stat_partition_operations') order by statime;
  classname  | schemaname | objname  | usestatus | usename  | actionname | subtype  
-------------+------------+----------+-----------+----------+------------+----------
 pg_authid   |            | mdt_user | CURRENT   | gpadmin  | CREATE     | ROLE
 pg_database |            | mdt_db   | CURRENT   | mdt_user | CREATE     | DATABASE
(2 rows)

