-- start_ignore
SET optimizer=off;
SET
-- end_ignore
-- SPI test
DROP FUNCTION IF EXISTS spifunc1(text, int);
psql:/path/sql_file:1: NOTICE:  function spifunc1(text,pg_catalog.int4) does not exist, skipping
DROP FUNCTION
DROP FUNCTION IF EXISTS spifunc2(text, text);
psql:/path/sql_file:1: NOTICE:  function spifunc2(text,text) does not exist, skipping
DROP FUNCTION
DROP FUNCTION IF EXISTS spifunc3(text, int);
psql:/path/sql_file:1: NOTICE:  function spifunc3(text,pg_catalog.int4) does not exist, skipping
DROP FUNCTION
DROP FUNCTION IF EXISTS spifunc4(text, text);
psql:/path/sql_file:1: NOTICE:  function spifunc4(text,text) does not exist, skipping
DROP FUNCTION
DROP FUNCTION IF EXISTS spifunc5(text, int, int);
psql:/path/sql_file:1: NOTICE:  function spifunc5(text,pg_catalog.int4,pg_catalog.int4) does not exist, skipping
DROP FUNCTION
DROP FUNCTION IF EXISTS spifunc5a(text, int, int);
psql:/path/sql_file:1: NOTICE:  function spifunc5a(text,pg_catalog.int4,pg_catalog.int4) does not exist, skipping
DROP FUNCTION
DROP FUNCTION IF EXISTS spifunc6(text, int, int);
psql:/path/sql_file:1: NOTICE:  function spifunc6(text,pg_catalog.int4,pg_catalog.int4) does not exist, skipping
DROP FUNCTION
CREATE OR REPLACE FUNCTION spifunc1(text, int) RETURNS text AS '$libdir/gppc_test' LANGUAGE c STRICT;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION spifunc2(text, text) RETURNS text AS '$libdir/gppc_test' LANGUAGE c STRICT;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION spifunc3(text, int) RETURNS text AS '$libdir/gppc_test' LANGUAGE c STRICT;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION spifunc4(text, text) RETURNS text AS '$libdir/gppc_test' LANGUAGE c STRICT;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION spifunc5(text, int, int) RETURNS text AS '$libdir/gppc_test' LANGUAGE c STRICT;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION spifunc5a(text, int, int) RETURNS int AS '$libdir/gppc_test' LANGUAGE c STRICT;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION spifunc6(text, int, int) RETURNS text AS '$libdir/gppc_test' LANGUAGE c STRICT;
CREATE FUNCTION
SELECT spifunc1($$select i, i * 2 from generate_series(1, 10)i order by 1$$, 2);
 spifunc1 
----------
 20
(1 row)

SELECT spifunc2($$select i, i * 2 as val from generate_series(1, 10)i order by 1$$, 'val');
 spifunc2 
----------
 20
(1 row)

SELECT spifunc3($$select i, 'foo' || i as val from generate_series(1, 10)i order by 1$$, 2);
 spifunc3 
----------
 foo10
(1 row)

SELECT spifunc4($$select i, 'foo' || i as val from generate_series(1, 10)i order by 1$$, 'val');
 spifunc4 
----------
 foo10
(1 row)

-- multiple queries in one query string
SELECT spifunc1($$select i, i * 2 from generate_series(1, 10)i order by 1; select 1+1; select 1+2$$, 1);
 spifunc1 
----------
 3
(1 row)

-- access table
DROP TABLE IF EXISTS spi_test CASCADE;
psql:/path/sql_file:1: NOTICE:  table "spi_test" does not exist, skipping
DROP TABLE
CREATE TABLE spi_test (a int, b text);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO spi_test (SELECT a, 'foo'||a FROM generate_series(1, 10) a);
INSERT 0 10
SELECT spifunc1($$select * from spi_test order by a limit 5$$, 2);
 spifunc1 
----------
 foo5
(1 row)

-- access view
DROP VIEW IF EXISTS spi_view;
psql:/path/sql_file:1: NOTICE:  view "spi_view" does not exist, skipping
DROP VIEW
CREATE VIEW spi_view AS 
select * from spi_test order by a limit 5;
CREATE VIEW
SELECT spifunc1($$select * from spi_view$$, 2);
 spifunc1 
----------
 foo5
(1 row)

-- join table and view
SELECT spifunc1($$select * from spi_test, spi_view where spi_test.a = spi_view.a order by spi_test.a$$, 2);
 spifunc1 
----------
 foo5
(1 row)

-- using sub-query
SELECT spifunc1($$select * from spi_test where spi_test.a in (select a from spi_view) order by spi_test.a$$, 2);
 spifunc1 
----------
 foo5
(1 row)

-- recursive SPI function call
SELECT spifunc1($$select (
	SELECT spifunc1('select * from spi_test, spi_view where spi_test.a = spi_view.a order by spi_test.a', 2)a
)$$, 1);
 spifunc1 
----------
 foo5
(1 row)

-- DDL: create table
SELECT spifunc1($$create table spi_test2 (a int, b text)$$, 1);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "create table spi_test2 (a int, b text)"
 spifunc1 
----------
 
(1 row)

\d spi_test2
   Table "public.spi_test2"
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | 
 b      | text    | 
Distributed by: (a)

-- DDL: alter table
SELECT spifunc1($$alter table spi_test2 add column c int$$, 1);
 spifunc1 
----------
 
(1 row)

\d spi_test2
   Table "public.spi_test2"
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | 
 b      | text    | 
 c      | integer | 
Distributed by: (a)

-- DDL: drop table
SELECT spifunc1($$drop table spi_test2$$, 1);
 spifunc1 
----------
 
(1 row)

\dt spi_test2
No matching relations found.
-- When tcount = 0, no limit
SELECT spifunc5($$SELECT * FROM spi_test ORDER BY 1$$, 1, 0);
 spifunc5 
----------
 10
(1 row)

-- When tcount = 5, which is less than total 10 records
SELECT spifunc5($$SELECT * FROM spi_test ORDER BY 1$$, 1, 5);
 spifunc5 
----------
 5
(1 row)

-- When tcount = 20, which is greater than total 10 records
SELECT spifunc5($$SELECT * FROM spi_test ORDER BY 1$$, 1, 20);
 spifunc5 
----------
 10
(1 row)

-- When tcount = -1, returns null
SELECT spifunc5($$SELECT * FROM spi_test ORDER BY 1$$, 1, -1);
 spifunc5 
----------
 
(1 row)

-- insert a record with 400K bytes
---- insert into spi_test values(31, repeat('test',100000));
-- SPI GppcSPIGetValue makecopy = true for long text 400K bytes
---- SELECT spifunc1($$select * from spi_test order by a $$, 2);
-- SPI GppcSPIGetValue makecopy = false
SELECT spifunc5a($$SELECT * FROM spi_test ORDER BY 1$$, 2, 10);
 spifunc5a 
-----------
        41
(1 row)

SELECT spifunc5a($$SELECT * FROM spi_test ORDER BY 1$$, 2, 5);
 spifunc5a 
-----------
        20
(1 row)

SELECT spifunc5a($$SELECT * FROM spi_test ORDER BY 1$$, 2, 0);
 spifunc5a 
-----------
        41
(1 row)

-- SPI GppcSPIExec select into table
DROP TABLE IF EXISTS spi_test3;
psql:/path/sql_file:1: NOTICE:  table "spi_test3" does not exist, skipping
DROP TABLE
SELECT spifunc6($$select i, 'foo'||i into spi_test3 from generate_series(10,15) i$$,0,0);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "select i, 'foo'||i into spi_test3 from generate_series(10,15) i"
 spifunc6 
----------
 
(1 row)

SELECT * FROM spi_test3 ORDER BY 1;
 i  | ?column? 
----+----------
 10 | foo10
 11 | foo11
 12 | foo12
 13 | foo13
 14 | foo14
 15 | foo15
(6 rows)

-- SPI GppcSPIExec CTAS
DROP TABLE IF EXISTS spi_test4;
psql:/path/sql_file:1: NOTICE:  table "spi_test4" does not exist, skipping
DROP TABLE
SELECT spifunc6($$create table spi_test4 as select i, 'foo'||i from generate_series(1,10) i$$,0,0);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "create table spi_test4 as select i, 'foo'||i from generate_series(1,10) i"
 spifunc6 
----------
 
(1 row)

SELECT * FROM spi_test4 ORDER BY 1;
 i  | ?column? 
----+----------
  1 | foo1
  2 | foo2
  3 | foo3
  4 | foo4
  5 | foo5
  6 | foo6
  7 | foo7
  8 | foo8
  9 | foo9
 10 | foo10
(10 rows)

-- SPI truncate
SELECT spifunc1($$truncate spi_test$$, 1);
 spifunc1 
----------
 
(1 row)

-- After truncate
SELECT * FROM spi_test order by a;
 a | b 
---+---
(0 rows)

-- DML: insert
SELECT spifunc6($$insert into spi_test select i, 'foo'||i from generate_series(1, 5) i$$, 0, 0);
 spifunc6 
----------
 
(1 row)

SELECT spifunc6($$insert into spi_test values (6, 'foo6')$$, 0, 0);
 spifunc6 
----------
 
(1 row)

SELECT * from spi_test order by a;
 a |  b   
---+------
 1 | foo1
 2 | foo2
 3 | foo3
 4 | foo4
 5 | foo5
 6 | foo6
(6 rows)

-- DML: update
SELECT spifunc6($$update spi_test set b = 'boo' ||a$$, 0, 0);
 spifunc6 
----------
 
(1 row)

SELECT * from spi_test order by a;
 a |  b   
---+------
 1 | boo1
 2 | boo2
 3 | boo3
 4 | boo4
 5 | boo5
 6 | boo6
(6 rows)

-- DML: delete
SELECT spifunc6($$delete from spi_test where a > 5$$, 0, 0);
 spifunc6 
----------
 
(1 row)

SELECT * from spi_test order by a;
 a |  b   
---+------
 1 | boo1
 2 | boo2
 3 | boo3
 4 | boo4
 5 | boo5
(5 rows)

-- DML: insert using tcount=3, notice tcount takes no effect
SELECT spifunc6($$insert into spi_test select i, 'foo'||i from generate_series(6, 10) i$$, 3, 0);
 spifunc6 
----------
 
(1 row)

SELECT * from spi_test order by a;
 a  |   b   
----+-------
  1 | boo1
  2 | boo2
  3 | boo3
  4 | boo4
  5 | boo5
  6 | foo6
  7 | foo7
  8 | foo8
  9 | foo9
 10 | foo10
(10 rows)

-- DML: update using tcount=3, notice tcount takes no effect
SELECT spifunc6($$update spi_test set b = 'boo' ||a$$, 0, 0);
 spifunc6 
----------
 
(1 row)

SELECT * from spi_test order by a;
 a  |   b   
----+-------
  1 | boo1
  2 | boo2
  3 | boo3
  4 | boo4
  5 | boo5
  6 | boo6
  7 | boo7
  8 | boo8
  9 | boo9
 10 | boo10
(10 rows)

-- DML: delete using tcounti=3, notice tcount takes no effect
SELECT spifunc6($$delete from spi_test where a > 5$$, 3, 0);
 spifunc6 
----------
 
(1 row)

SELECT * from spi_test order by a;
 a |  b   
---+------
 1 | boo1
 2 | boo2
 3 | boo3
 4 | boo4
 5 | boo5
(5 rows)

-- DML: create, alter, and drop index
SELECT spifunc6($$CREATE INDEX spi_idx1 ON spi_test (a, b)$$, 0, 0);
 spifunc6 
----------
 
(1 row)

\d spi_idx1
    Index "public.spi_idx1"
 Column |  Type   | Definition 
--------+---------+------------
 a      | integer | a
 b      | text    | b
btree, for table "public.spi_test"

SELECT spifunc6($$ALTER INDEX spi_idx1 RENAME TO spi_idx2$$, 0, 0);
 spifunc6 
----------
 
(1 row)

\d spi_idx2
    Index "public.spi_idx2"
 Column |  Type   | Definition 
--------+---------+------------
 a      | integer | a
 b      | text    | b
btree, for table "public.spi_test"

SELECT spifunc6($$DROP INDEX spi_idx2$$, 0 , 0);
 spifunc6 
----------
 
(1 row)

\d spi_idx2
Did not find any relation named "spi_idx2".
-- Negative: connect again when already connected
SELECT spifunc6($$select i, i * 2 from generate_series(1, 10)i order by 1$$, 2, 1);
psql:/path/sql_file:1: ERROR:  connect error: already connected and cannot connect again. (gppc.c:1351)
-- Negative: try to execute without connection
SELECT spifunc6($$select i, i * 2 from generate_series(1, 10)i order by 1$$, 2, 2);
psql:/path/sql_file:1: ERROR:  query execution error: Connection has been closed unexpectedly. (gppc.c:1351)
-- Negative: close connection again when it has been closed already
SELECT spifunc6($$select i, i * 2 from generate_series(1, 10)i order by 1$$, 2, 3);
psql:/path/sql_file:1: ERROR:  connect error: connection has been closed and cannot be closed again. (gppc.c:1351)
