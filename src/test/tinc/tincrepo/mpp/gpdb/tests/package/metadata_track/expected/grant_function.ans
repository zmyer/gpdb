-- start_ignore
SET optimizer=off;
SET
-- end_ignore
create user mdt_user1 with superuser;
CREATE ROLE
create group mdt_group1 with superuser;
CREATE ROLE
          CREATE OR REPLACE FUNCTION mdt_insert_mdt_price_change1() RETURNS trigger AS '
          DECLARE
          changed boolean;
          BEGIN
          IF tg_op = ''DELETE'' THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (old.barcode, CURRENT_TIMESTAMP, NULL);
          RETURN old;
          END IF;
          IF tg_op = ''INSERT'' THEN
          changed := TRUE;
          ELSE
          changed := new.price IS NULL != old.price IS NULL OR new.price != old.price;
          END IF;
          IF changed THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (new.barcode, CURRENT_TIMESTAMP, new.price);
          END IF;
          RETURN new;
          END
          ' LANGUAGE plpgsql;
CREATE FUNCTION
grant execute on function mdt_insert_mdt_price_change1() to mdt_user1 with grant option;
GRANT
          CREATE OR REPLACE FUNCTION mdt_insert_mdt_price_change2() RETURNS trigger AS '
          DECLARE
          changed boolean;
          BEGIN
          IF tg_op = ''DELETE'' THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (old.barcode, CURRENT_TIMESTAMP, NULL);
          RETURN old;
          END IF;
          IF tg_op = ''INSERT'' THEN
          changed := TRUE;
          ELSE
          changed := new.price IS NULL != old.price IS NULL OR new.price != old.price;
          END IF;
          IF changed THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (new.barcode, CURRENT_TIMESTAMP, new.price);
          END IF;
          RETURN new;
          END
          ' LANGUAGE plpgsql;
CREATE FUNCTION
grant execute on function mdt_insert_mdt_price_change2() to group mdt_group1 with grant option;
GRANT
          CREATE OR REPLACE FUNCTION mdt_insert_mdt_price_change3() RETURNS trigger AS '
          DECLARE
          changed boolean;
          BEGIN
          IF tg_op = ''DELETE'' THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (old.barcode, CURRENT_TIMESTAMP, NULL);
          RETURN old;
          END IF;
          IF tg_op = ''INSERT'' THEN
          changed := TRUE;
          ELSE
          changed := new.price IS NULL != old.price IS NULL OR new.price != old.price;
          END IF;
          IF changed THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (new.barcode, CURRENT_TIMESTAMP, new.price);
          END IF;
          RETURN new;
          END
          ' LANGUAGE plpgsql;
CREATE FUNCTION
grant all on function mdt_insert_mdt_price_change3() to public;
GRANT
          CREATE OR REPLACE FUNCTION mdt_insert_mdt_price_change4() RETURNS trigger AS '
          DECLARE
          changed boolean;
          BEGIN
          IF tg_op = ''DELETE'' THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (old.barcode, CURRENT_TIMESTAMP, NULL);
          RETURN old;
          END IF;
          IF tg_op = ''INSERT'' THEN
          changed := TRUE;
          ELSE
          changed := new.price IS NULL != old.price IS NULL OR new.price != old.price;
          END IF;
          IF changed THEN
          INSERT INTO mdt_price_change(apn, effective, price)
          VALUES (new.barcode, CURRENT_TIMESTAMP, new.price);
          END IF;
          RETURN new;
          END
          ' LANGUAGE plpgsql;
CREATE FUNCTION
grant all privileges on function mdt_insert_mdt_price_change4() to public;
GRANT
select classname  , schemaname , objname  , usestatus , usename , actionname , subtype from pg_stat_operations  where statime > ( select statime from pg_stat_operations where objname ='my_first_table' and actionname ='CREATE') and objname  not in ('pg_stat_operations','pg_stat_partition_operations') order by statime;
  classname  | schemaname |  objname   | usestatus | usename  | actionname | subtype  
-------------+------------+------------+-----------+----------+------------+----------
 pg_authid   |            | mdt_user   | CURRENT   | gpadmin  | CREATE     | ROLE
 pg_database |            | mdt_db     | CURRENT   | mdt_user | CREATE     | DATABASE
 pg_authid   |            | mdt_user1  | CURRENT   | gpadmin  | CREATE     | ROLE
 pg_authid   |            | mdt_group1 | CURRENT   | gpadmin  | CREATE     | ROLE
(4 rows)

drop function mdt_insert_mdt_price_change1();
DROP FUNCTION
drop function mdt_insert_mdt_price_change2();
DROP FUNCTION
drop function mdt_insert_mdt_price_change3();
DROP FUNCTION
drop function mdt_insert_mdt_price_change4();
DROP FUNCTION
drop user mdt_user1;
DROP ROLE
drop group mdt_group1;
DROP ROLE
select classname  , schemaname , objname  , usestatus , usename , actionname , subtype from pg_stat_operations  where statime > ( select statime from pg_stat_operations where objname ='my_first_table' and actionname ='CREATE') and objname  not in ('pg_stat_operations','pg_stat_partition_operations') order by statime;
  classname  | schemaname | objname  | usestatus | usename  | actionname | subtype  
-------------+------------+----------+-----------+----------+------------+----------
 pg_authid   |            | mdt_user | CURRENT   | gpadmin  | CREATE     | ROLE
 pg_database |            | mdt_db   | CURRENT   | mdt_user | CREATE     | DATABASE
(2 rows)

