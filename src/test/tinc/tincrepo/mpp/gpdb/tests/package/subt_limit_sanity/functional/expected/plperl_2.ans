create language plperl;
ERROR:  language "plperl" already exists
Drop function PLPERLinsert_wrong();
ERROR:  function plperlinsert_wrong() does not exist
CREATE or REPLACE function  PLPERLinsert_wrong() RETURNS void as $$

	eval
        {
                spi_exec_query("INSERT INTO  errorhandlingtmptable VALUES ('fjdk');");
        };
        if ($@)
        {
                elog(NOTICE,"error occurs but ignore...\n");
                # hide exception
        }
	return;
$$ language PLPERL;
CREATE FUNCTION
drop function subt_plperl_fn2 (int,int);
ERROR:  function subt_plperl_fn2(integer, integer) does not exist
CREATE or replace function subt_plperl_fn2 (st int,en int) returns void as $$
DECLARE
i integer;
begin
  i=st;
  while i <= en LOOP
    perform PLPERLinsert_wrong();
    i = i + 1;
  END LOOP;
end;
$$ LANGUAGE 'plpgsql';
CREATE FUNCTION
DROP table if exists subt_plperl_t2;
NOTICE:  table "subt_plperl_t2" does not exist, skipping
DROP TABLE
Create table subt_plperl_t2( i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
select subt_plperl_fn1(1,200);
 subt_plperl_fn1 
-----------------
 
(1 row)

select count(*) from subt_plperl_t2;
 count 
-------
     0
(1 row)

