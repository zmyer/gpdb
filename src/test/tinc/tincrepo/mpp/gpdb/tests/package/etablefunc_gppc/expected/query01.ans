-- start_ignore
SET optimizer=off;
SET
-- end_ignore
    -- Create Enhanced Table Function (ETF) using input syntax: 
    -- CREATE FUNCTION tabfunc(t anytable) RETURNS ...
    -- MPP-16614, the SELECT query would fail
    DROP FUNCTION IF EXISTS transform(anytable);
psql:/path/sql_file:1: NOTICE:  function transform(anytable) does not exist, skipping
DROP FUNCTION
    CREATE OR REPLACE FUNCTION transform(a anytable)
    RETURNS SETOF outtable
    AS '$libdir/tabfunc_gppc_demo', 'mytransform'
    LANGUAGE C;
CREATE FUNCTION
    \df transform
                          List of functions
 Schema |   Name    | Result data type | Argument data types |  Type  
--------+-----------+------------------+---------------------+--------
 public | transform | SETOF outtable   | a anytable          | normal
(1 row)

    SELECT * FROM transform( 
        TABLE( SELECT * FROM randtable ORDER BY id, value SCATTER BY id) 
    ) order by b;
psql:/path/sql_file:1: ERROR:  invalid tuple returned from table function  (seg0 slice2 rh55-qavm61:40000 pid=31327)
DETAIL:  Returned tuple does not match output tuple descriptor.
    -- The 1st workaround of MPP-16614
    DROP FUNCTION IF EXISTS transform(anytable);
DROP FUNCTION
    CREATE OR REPLACE FUNCTION transform(a anytable)
    RETURNS SETOF RECORD
    AS '$libdir/tabfunc_gppc_demo', 'mytransform'
    LANGUAGE C;
CREATE FUNCTION
    SELECT * FROM transform( 
        TABLE( SELECT * FROM randtable ORDER BY id, value SCATTER BY id) 
    )  AS t (a text, b int) order by b;
    a     | b  
----------+----
 value_1  |  1
 value_2  |  2
 value_3  |  3
 value_4  |  4
 value_5  |  5
 value_6  |  6
 value_7  |  7
 value_8  |  8
 value_9  |  9
 value_10 | 10
(10 rows)

    -- The 2nd workaround of MPP-16614
    DROP FUNCTION IF EXISTS transform(anytable);
DROP FUNCTION
    CREATE OR REPLACE FUNCTION transform(a anytable)
    RETURNS TABLE (a text, b int)
    AS '$libdir/tabfunc_gppc_demo', 'mytransform'
    LANGUAGE C;
CREATE FUNCTION
    SELECT * FROM transform(
        TABLE( SELECT * FROM randtable ORDER BY id, value SCATTER BY id)
    ) order by b;
    a     | b  
----------+----
 value_1  |  1
 value_2  |  2
 value_3  |  3
 value_4  |  4
 value_5  |  5
 value_6  |  6
 value_7  |  7
 value_8  |  8
 value_9  |  9
 value_10 | 10
(10 rows)

    -- create describe (callback) function
    -- both input and output type must be internal
    CREATE OR REPLACE FUNCTION project_desc(internal)
    RETURNS internal
    AS '$libdir/tabfunc_gppc_demo', 'project_describe'
    LANGUAGE C;
CREATE FUNCTION
    -- create dynamic return type (drt) table function
    -- using the callback function
    -- the return type must be defined as set of record
    CREATE OR REPLACE FUNCTION project(anytable, integer) 
    RETURNS setof record
    AS '$libdir/tabfunc_gppc_demo', 'project' 
    LANGUAGE C
    WITH (describe = project_desc);
CREATE FUNCTION
    -- Check callback function project_desc is registerred in pg_proc_callback
    select * from pg_proc_callback 
    where profnoid='project'::regproc 
    and procallback='project_desc'::regproc;
 profnoid | procallback  | promethod 
----------+--------------+-----------
 project  | project_desc | d
(1 row)

