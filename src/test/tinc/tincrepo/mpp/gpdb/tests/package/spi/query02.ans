\echo -- Your distribution should be compiled with --with-perl.
-- Your distribution should be compiled with --with-perl.
drop language plperl cascade;
DROP LANGUAGE
create language plperl;
CREATE LANGUAGE
drop table if exists test cascade;
psql:/path/sql_file:1: NOTICE:  table "test" does not exist, skipping
DROP TABLE
create table test (i integer, v varchar);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
CREATE OR REPLACE FUNCTION valid_i() RETURNS trigger AS $$
    if (($_TD->{new}{i} >= 100) || ($_TD->{new}{i} <= 0)) {
        return "SKIP";    # skip INSERT/UPDATE command
    } elsif ($_TD->{new}{v} ne "immortal") {
        $_TD->{new}{v} .= "(modified by trigger)";
        return "MODIFY";  # modify row and execute INSERT/UPDATE command
    } else {
        return;           # execute INSERT/UPDATE command
    }
$$ LANGUAGE plperl;
CREATE FUNCTION
CREATE TRIGGER test_valid_id_trig
    BEFORE INSERT OR UPDATE ON test
    FOR EACH ROW EXECUTE PROCEDURE valid_i();
CREATE TRIGGER
insert into test values (1,'1'), (2,'2'), (3,'3');
INSERT 0 3
update test set v = '10' where v='1';
UPDATE 0
drop trigger test_valid_id_trig on test;
DROP TRIGGER
drop function valid_i();
DROP FUNCTION
drop language plperl;
DROP LANGUAGE
