-- start_ignore
-- end_ignore
-- create range partitioned Heap table
--start_ignore
 drop table if exists pt_heap_tab_rng cascade;
DROP TABLE
--end_ignore
 CREATE TABLE pt_heap_tab_rng (a int, b text, c int , d int, e numeric,success bool) with (appendonly=false)
 distributed by (a)
 partition by range(a)
 (
     start(1) end(20) every(5),
     default partition dft
 );
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_dft" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_2" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_3" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_4" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_5" for table "pt_heap_tab_rng"
CREATE TABLE
-- Create indexes on the table
--start_ignore
drop index if exists heap_rng_idx1 cascade;
psql:/path/sql_file:1: NOTICE:  index "heap_rng_idx1" does not exist, skipping
DROP INDEX
drop index if exists heap_rng_idx2 cascade;
psql:/path/sql_file:1: NOTICE:  index "heap_rng_idx2" does not exist, skipping
DROP INDEX
--end_ignore
 -- partial index
 create index heap_rng_idx1 on pt_heap_tab_rng(a) where c > 10;
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_dft"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_3"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_4"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_5"
CREATE INDEX
 -- expression index
 create index heap_rng_idx2 on pt_heap_tab_rng(upper(b));
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_dft"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_3"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_4"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_5"
CREATE INDEX
-- Drop partition
 Alter table pt_heap_tab_rng drop default partition; 
psql:/path/sql_file:1: NOTICE:  dropped partition "dft" for relation "pt_heap_tab_rng"
ALTER TABLE
-- ADD partitions
 alter table pt_heap_tab_rng add partition heap start(21) end(25) with (appendonly=false);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_heap" for table "pt_heap_tab_rng"
ALTER TABLE
 alter table pt_heap_tab_rng add partition ao start(25) end(30) with (appendonly=true);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_ao" for table "pt_heap_tab_rng"
ALTER TABLE
 alter table pt_heap_tab_rng add partition co start(31) end(35) with (appendonly=true,orientation=column);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_co" for table "pt_heap_tab_rng"
ALTER TABLE
 select oid::regclass, relkind, relstorage, reloptions from pg_class where oid in ( select  relfilenode from pg_class where   relname in  ( 'pt_heap_tab_rng_1_prt_heap', 'pt_heap_tab_rng_1_prt_ao','pt_heap_tab_rng_1_prt_co'));
            oid             | relkind | relstorage |              reloptions              
----------------------------+---------+------------+--------------------------------------
 pt_heap_tab_rng_1_prt_heap | r       | h          | {appendonly=false}
 pt_heap_tab_rng_1_prt_ao   | r       | a          | {appendonly=true}
 pt_heap_tab_rng_1_prt_co   | r       | c          | {appendonly=true,orientation=column}
(3 rows)

-- Split partition
 alter table pt_heap_tab_rng split partition heap at (23) into (partition heap1,partition heap2);
psql:/path/sql_file:1: NOTICE:  exchanged partition "heap" of relation "pt_heap_tab_rng" with relation "pg_temp_3278764"
psql:/path/sql_file:1: NOTICE:  dropped partition "heap" for relation "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_heap1" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_heap2" for table "pt_heap_tab_rng"
ALTER TABLE
 alter table pt_heap_tab_rng split partition ao at (27) into (partition ao1,partition ao2);
psql:/path/sql_file:1: NOTICE:  exchanged partition "ao" of relation "pt_heap_tab_rng" with relation "pg_temp_3278764"
psql:/path/sql_file:1: NOTICE:  dropped partition "ao" for relation "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_ao1" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_ao2" for table "pt_heap_tab_rng"
ALTER TABLE
 alter table pt_heap_tab_rng split partition co  at (33) into (partition co1,partition co2);
psql:/path/sql_file:1: NOTICE:  exchanged partition "co" of relation "pt_heap_tab_rng" with relation "pg_temp_3278764"
psql:/path/sql_file:1: NOTICE:  dropped partition "co" for relation "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_co1" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_co2" for table "pt_heap_tab_rng"
ALTER TABLE
 select oid::regclass, relkind, relstorage, reloptions from pg_class where oid in ( select  relfilenode from pg_class where   relname in ( 'pt_heap_tab_rng_1_prt_heap1' ,'pt_heap_tab_rng_1_prt_heap2' ,'pt_heap_tab_rng_1_prt_ao1', 'pt_heap_tab_rng_1_prt_ao2', 'pt_heap_tab_rng_1_prt_co1', 'pt_heap_tab_rng_1_prt_co2'));
             oid             | relkind | relstorage |              reloptions              
-----------------------------+---------+------------+--------------------------------------
 pt_heap_tab_rng_1_prt_heap1 | r       | h          | {appendonly=false}
 pt_heap_tab_rng_1_prt_heap2 | r       | h          | {appendonly=false}
 pt_heap_tab_rng_1_prt_ao1   | r       | a          | {appendonly=true}
 pt_heap_tab_rng_1_prt_ao2   | r       | a          | {appendonly=true}
 pt_heap_tab_rng_1_prt_co1   | r       | c          | {appendonly=true,orientation=column}
 pt_heap_tab_rng_1_prt_co2   | r       | c          | {appendonly=true,orientation=column}
(6 rows)

-- Exchange
 -- Create candidate table
--start_ignore
  drop table if exists heap_can;
DROP TABLE
  drop table if exists ao_can;
DROP TABLE
  drop table if exists co_can;
DROP TABLE
--end_ignore
  create table heap_can(like pt_heap_tab_rng);  
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
  create table ao_can(like pt_heap_tab_rng) with (appendonly=true);   
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
  create table co_can(like pt_heap_tab_rng)  with (appendonly=true,orientation=column);   
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
 alter table pt_heap_tab_rng add partition newco start(36) end(40) with (appendonly= true, orientation = column);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_newco" for table "pt_heap_tab_rng"
ALTER TABLE
 alter table pt_heap_tab_rng add partition newao start(40) end(45) with (appendonly= true);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_newao" for table "pt_heap_tab_rng"
ALTER TABLE
 -- Exchange
 alter table pt_heap_tab_rng exchange partition heap1 with table ao_can; -- HEAP <=> AO
ALTER TABLE
 alter table pt_heap_tab_rng exchange partition newao with table co_can; -- AO <=> CO
ALTER TABLE
 alter table pt_heap_tab_rng exchange partition newco with table heap_can; -- CO <=> HEAP
ALTER TABLE
 \d+ ao_can 
                 Table "public.ao_can"
 Column  |  Type   | Modifiers | Storage  | Description 
---------+---------+-----------+----------+-------------
 a       | integer |           | plain    | 
 b       | text    |           | extended | 
 c       | integer |           | plain    | 
 d       | integer |           | plain    | 
 e       | numeric |           | main     | 
 success | boolean |           | plain    | 
Indexes:
    "pt_heap_tab_rng_1_prt_heap1_a_key" btree (a) WHERE c > 10
    "pt_heap_tab_rng_1_prt_heap1_key" btree (upper(b))
Check constraints:
    "pt_heap_tab_rng_1_prt_heap1_check" CHECK (a >= 21 AND a < 23)
Has OIDs: no
Options: appendonly=false
Distributed by: (a)

 \d+ co_can
           Append-Only Table "public.co_can"
 Column  |  Type   | Modifiers | Storage  | Description 
---------+---------+-----------+----------+-------------
 a       | integer |           | plain    | 
 b       | text    |           | extended | 
 c       | integer |           | plain    | 
 d       | integer |           | plain    | 
 e       | numeric |           | main     | 
 success | boolean |           | plain    | 
Compression Type: None
Compression Level: 0
Block Size: 32768
Checksum: f
Indexes:
    "pt_heap_tab_rng_1_prt_newao_a_key" btree (a) WHERE c > 10
    "pt_heap_tab_rng_1_prt_newao_key" btree (upper(b))
Check constraints:
    "pt_heap_tab_rng_1_prt_newao_check" CHECK (a >= 40 AND a < 45)
Has OIDs: no
Options: appendonly=true
Distributed by: (a)

 \d+ heap_can
                                Append-Only Columnar Table "public.heap_can"
 Column  |  Type   | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
---------+---------+-----------+----------+------------------+-------------------+------------+-------------
 a       | integer |           | plain    | none             | 0                 | 32768      | 
 b       | text    |           | extended | none             | 0                 | 32768      | 
 c       | integer |           | plain    | none             | 0                 | 32768      | 
 d       | integer |           | plain    | none             | 0                 | 32768      | 
 e       | numeric |           | main     | none             | 0                 | 32768      | 
 success | boolean |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Indexes:
    "pt_heap_tab_rng_1_prt_newco_a_key" btree (a) WHERE c > 10
    "pt_heap_tab_rng_1_prt_newco_key" btree (upper(b))
Check constraints:
    "pt_heap_tab_rng_1_prt_newco_check" CHECK (a >= 36 AND a < 40)
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a)

-- Create more index indexes
--start_ignore
drop index if exists heap_rng_idx4 cascade;
psql:/path/sql_file:1: NOTICE:  index "heap_rng_idx4" does not exist, skipping
DROP INDEX
drop index if exists heap_rng_idx3 cascade;
psql:/path/sql_file:1: NOTICE:  index "heap_rng_idx3" does not exist, skipping
DROP INDEX
--end_ignore
 create index heap_rng_idx3 on pt_heap_tab_rng(c,d) where a = 40 OR a = 50; -- multicol indx
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_3"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_4"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_5"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_heap2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_ao1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_ao2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_co1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_co2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_heap1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_newao"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_newco"
CREATE INDEX
 CREATE INDEX heap_rng_idx4 ON pt_heap_tab_rng ((b || ' ' || e)); --Expression
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_3"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_4"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_5"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_heap2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_ao1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_ao2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_co1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_co2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_heap1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_newao"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_heap_tab_rng_1_prt_newco"
CREATE INDEX
-- Add default partition
 alter table pt_heap_tab_rng add default partition dft;
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_dft" for table "pt_heap_tab_rng"
ALTER TABLE
--Split default partition
 alter table pt_heap_tab_rng split default partition start(45) end(60) into (partition dft, partition two);
psql:/path/sql_file:1: NOTICE:  exchanged partition "dft" of relation "pt_heap_tab_rng" with relation "pg_temp_3278764"
psql:/path/sql_file:1: NOTICE:  dropped partition "dft" for relation "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_two" for table "pt_heap_tab_rng"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_heap_tab_rng_1_prt_dft" for table "pt_heap_tab_rng"
ALTER TABLE
