-- Create table in a plpgsql function with the GUC set at database level
Alter database dsp_db1 set gp_default_storage_options='appendonly=true, orientation=column, compresstype=quicklz, compresslevel=1';
ALTER DATABASE
Alter database dsp_db2 set gp_default_storage_options='appendonly=true,orientation=row';
ALTER DATABASE
select datname, datconfig from pg_database where datname in ('dsp_db1', 'dsp_db2');
 datname |                                                 datconfig                                                 
---------+-----------------------------------------------------------------------------------------------------------
 dsp_db1 | {"gp_default_storage_options=appendonly=true, orientation=column, compresstype=quicklz, compresslevel=1"}
 dsp_db2 | {"gp_default_storage_options=appendonly=true,orientation=row"}
(2 rows)

\c dsp_db1
You are now connected to database "dsp_db1" as user "sivand".
show gp_default_storage_options;
                                      gp_default_storage_options                                       
-------------------------------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=quicklz,compresslevel=1,checksum=true,orientation=column
(1 row)

create or replace function create_table() returns void as
$$
Begin
Create table dsp_pg_t1( i int, j int);
end
$$ language plpgsql;
CREATE FUNCTION
create or replace function call_create_table() returns void as $$
Begin
perform create_table();
end
$$ language plpgsql;
CREATE FUNCTION
select call_create_table();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "Create table dsp_pg_t1( i int, j int)"
PL/pgSQL function "create_table" line 2 at SQL statement
SQL statement "SELECT  create_table()"
PL/pgSQL function "call_create_table" line 2 at PERFORM
 call_create_table 
-------------------
 
(1 row)

\d+ dsp_pg_t1
                              Append-Only Columnar Table "public.dsp_pg_t1"
 Column |  Type   | Modifiers | Storage | Compression Type | Compression Level | Block Size | Description 
--------+---------+-----------+---------+------------------+-------------------+------------+-------------
 i      | integer |           | plain   | quicklz          | 1                 | 32768      | 
 j      | integer |           | plain   | quicklz          | 1                 | 32768      | 
Checksum: t
Has OIDs: no
Options: appendonly=true, compresstype=quicklz, orientation=column
Distributed by: (i)

select relkind, relstorage, reloptions from pg_class where relname='dsp_pg_t1';
 relkind | relstorage |                        reloptions                         
---------+------------+-----------------------------------------------------------
 r       | c          | {appendonly=true,compresstype=quicklz,orientation=column}
(1 row)

Drop table if exists dsp_pg_t1;
DROP TABLE
Drop function create_table();
DROP FUNCTION
Drop function call_create_table();
DROP FUNCTION
-- Create table with compresstyp=rle_type when orientation=row to create exception
\c dsp_db2
You are now connected to database "dsp_db2" as user "sivand".
show gp_default_storage_options;
                           gp_default_storage_options                            
---------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=none,checksum=true,orientation=row
(1 row)

create or replace function create_table_with_exception() returns void as
$$
Begin
Create table dsp_pg_t2( i int, j int) with (compresstype=rle_type);
Exception when others then
raise notice 'rle_type is not supported for row oriented tables';
end
$$ language plpgsql;
CREATE FUNCTION
create or replace function call_create_table_with_exception() returns void as $$
Begin
perform create_table_with_exception();
end
$$ language plpgsql;
CREATE FUNCTION
select call_create_table_with_exception();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "Create table dsp_pg_t2( i int, j int) with (compresstype=rle_type)"
PL/pgSQL function "create_table_with_exception" line 2 at SQL statement
SQL statement "SELECT  create_table_with_exception()"
PL/pgSQL function "call_create_table_with_exception" line 2 at PERFORM
psql:/path/sql_file:1: NOTICE:  rle_type is not supported for row oriented tables
CONTEXT:  SQL statement "SELECT  create_table_with_exception()"
PL/pgSQL function "call_create_table_with_exception" line 2 at PERFORM
 call_create_table_with_exception 
----------------------------------
 
(1 row)

Drop function call_create_table_with_exception();
DROP FUNCTION
Drop function create_table_with_exception();
DROP FUNCTION
Alter database dsp_db1 reset gp_default_storage_options; 
ALTER DATABASE
Alter database dsp_db2 reset gp_default_storage_options; 
ALTER DATABASE
select datname, datconfig from pg_database where datname in ('dsp_db1', 'dsp_db2');
 datname | datconfig 
---------+-----------
 dsp_db1 | 
 dsp_db2 | 
(2 rows)

