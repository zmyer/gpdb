-- start_ignore
drop table if exists smallt;
psql:/path/sql_file:1: NOTICE:  table "smallt" does not exist, skipping
DROP TABLE
-- end_ignore

create table smallt (i int, t text, d date);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into smallt select i%10, 'text ' || (i%15), '2011-01-01'::date + ((i%20) || ' days')::interval
from generate_series(0, 99) i;
INSERT 0 100
-- Rescan on Agg (with Material in the inner side of nestloop)
set enable_nestloop=off;
SET
set enable_hashjoin=on;
SET
select t1.*, t2.* from
(select d, count(*) from smallt group by d) as t1, (select d, sum(i) from smallt group by d) as t2
where t1.d = t2.d;
     d      | count |     d      | sum 
------------+-------+------------+-----
 2011-01-10 |     5 | 2011-01-10 |  45
 2011-01-14 |     5 | 2011-01-14 |  15
 2011-01-18 |     5 | 2011-01-18 |  35
 2011-01-12 |     5 | 2011-01-12 |   5
 2011-01-04 |     5 | 2011-01-04 |  15
 2011-01-16 |     5 | 2011-01-16 |  25
 2011-01-08 |     5 | 2011-01-08 |  35
 2011-01-02 |     5 | 2011-01-02 |   5
 2011-01-20 |     5 | 2011-01-20 |  45
 2011-01-06 |     5 | 2011-01-06 |  25
 2011-01-03 |     5 | 2011-01-03 |  10
 2011-01-05 |     5 | 2011-01-05 |  20
 2011-01-13 |     5 | 2011-01-13 |  10
 2011-01-09 |     5 | 2011-01-09 |  40
 2011-01-11 |     5 | 2011-01-11 |   0
 2011-01-19 |     5 | 2011-01-19 |  40
 2011-01-17 |     5 | 2011-01-17 |  30
 2011-01-15 |     5 | 2011-01-15 |  20
 2011-01-07 |     5 | 2011-01-07 |  30
 2011-01-01 |     5 | 2011-01-01 |   0
(20 rows)

explain analyze select t1.*, t2.* from
(select d, count(*) from smallt group by d) as t1, (select d, sum(i) from smallt group by d) as t2
where t1.d = t2.d;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=9.10..9.85 rows=10 width=24)
   Rows out:  20 rows at destination with 26 ms to end, start offset by 0.568 ms.
   ->  Hash Join  (cost=9.10..9.85 rows=10 width=24)
         Hash Cond: t1.d = t2.d
         Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 12 ms to first row, 13 ms to end, start offset by 2.654 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg0).
         Work_mem used:  1K bytes avg, 1K bytes max (seg0). Workfile: (0 spilling, 0 reused)
         (seg0)   Hash chain length 1.0 avg, 1 max, using 10 of 131111 buckets.
         ->  HashAggregate  (cost=4.20..4.45 rows=10 width=12)
               Group By: public.smallt.d
               Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 7.057 ms to first row, 7.373 ms to end, start offset by 7.655 ms.
               Executor memory:  2129K bytes avg, 2129K bytes max (seg0).
               ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=3.50..3.90 rows=10 width=12)
                     Hash Key: public.smallt.d
                     Rows out:  Avg 10.0 rows x 2 workers at destination.  Max 10 rows (seg0) with 6.563 ms to first row, 6.565 ms to end, start offset by 7.977 ms.
                     ->  HashAggregate  (cost=3.50..3.50 rows=10 width=12)
                           Group By: public.smallt.d
                           Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 1.326 ms to first row, 1.673 ms to end, start offset by 8.883 ms.
                           Executor memory:  2129K bytes avg, 2129K bytes max (seg0).
                           ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
                                 Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.060 ms to first row, 0.067 ms to end, start offset by 9.970 ms.
         ->  Hash  (cost=4.65..4.65 rows=10 width=12)
               Rows in:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 4.475 ms to end, start offset by 3.179 ms.
               ->  HashAggregate  (cost=4.20..4.45 rows=10 width=12)
                     Group By: public.smallt.d
                     Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 3.987 ms to first row, 4.466 ms to end, start offset by 3.179 ms.
                     Executor memory:  2129K bytes avg, 2129K bytes max (seg0).
                     ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=3.50..3.90 rows=10 width=12)
                           Hash Key: public.smallt.d
                           Rows out:  Avg 10.0 rows x 2 workers at destination.  Max 10 rows (seg0) with 3.228 ms to first row, 3.229 ms to end, start offset by 3.551 ms.
                           ->  HashAggregate  (cost=3.50..3.50 rows=10 width=12)
                                 Group By: public.smallt.d
                                 Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 0.749 ms to first row, 1.007 ms to end, start offset by 4.998 ms.
                                 Executor memory:  2129K bytes avg, 2129K bytes max (seg0).
                                 ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=8)
                                       Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.049 ms to first row, 0.058 ms to end, start offset by 5.473 ms.
 Slice statistics:
   (slice0)    Executor memory: 303K bytes.
   (slice1)    Executor memory: 2432K bytes avg x 2 workers, 2432K bytes max (seg0).
   (slice2)    Executor memory: 2432K bytes avg x 2 workers, 2432K bytes max (seg0).
   (slice3)    Executor memory: 4520K bytes avg x 2 workers, 4520K bytes max (seg0).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=on; enable_nestloop=off
 Total runtime: 27.035 ms
(45 rows)
