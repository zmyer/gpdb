-- 
-- @description Add/split/exchange partition to a partition table after the gp_defualt_operations changed with GUC value
-- Parent table with (appendonly=true, orientation=row), set guc to orinetation column, Add a partition
\c dsp_db1
You are now connected to database "dsp_db1" as user "sivand".
show gp_default_storage_options;
                            gp_default_storage_options                            
----------------------------------------------------------------------------------
 appendonly=false,blocksize=32768,compresstype=none,checksum=true,orientation=row
(1 row)

Drop table if exists ap_pr_t01;
psql:/path/sql_file:1: NOTICE:  table "ap_pr_t01" does not exist, skipping
DROP TABLE
Create table ap_pr_t01( i int, j int, k int) with(appendonly=true) partition by range(i) (start(1) end(10) every(5));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t01_1_prt_1" for table "ap_pr_t01"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t01_1_prt_2" for table "ap_pr_t01"
CREATE TABLE
Insert into ap_pr_t01 select i, i+1, i+2 from generate_series(1,9) i;
INSERT 0 9
Select count(*) from ap_pr_t01;
 count 
-------
     9
(1 row)

select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t01%' order by relname;
      relname      | relkind | relstorage |    reloptions     
-------------------+---------+------------+-------------------
 ap_pr_t01         | r       | a          | {appendonly=true}
 ap_pr_t01_1_prt_1 | r       | a          | {appendonly=true}
 ap_pr_t01_1_prt_2 | r       | a          | {appendonly=true}
(3 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t01%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
(3 rows)

SET gp_default_storage_options="appendonly=true, orientation=column";
SET
show gp_default_storage_options;
                             gp_default_storage_options                             
------------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=none,checksum=true,orientation=column
(1 row)

Alter table ap_pr_t01 add partition p3 start(11) end(15);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t01_1_prt_p3" for table "ap_pr_t01"
ALTER TABLE
select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t01%' order by relname;
      relname       | relkind | relstorage |              reloptions              
--------------------+---------+------------+--------------------------------------
 ap_pr_t01          | r       | a          | {appendonly=true}
 ap_pr_t01_1_prt_1  | r       | a          | {appendonly=true}
 ap_pr_t01_1_prt_2  | r       | a          | {appendonly=true}
 ap_pr_t01_1_prt_p3 | r       | c          | {appendonly=true,orientation=column}
(4 rows)

RESET gp_default_storage_options;
RESET
-- Parent table with appendonly=false, guc with compresstype quicklz, Add an appendonly partition
Drop table if exists ap_pr_t02;
psql:/path/sql_file:1: NOTICE:  table "ap_pr_t02" does not exist, skipping
DROP TABLE
Create table ap_pr_t02( i int, j int, k int) with(appendonly=false) partition by range(i) (start(1) end(10) every(5));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t02_1_prt_1" for table "ap_pr_t02"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t02_1_prt_2" for table "ap_pr_t02"
CREATE TABLE
Insert into ap_pr_t02 select i, i+1, i+2 from generate_series(1,9) i;
INSERT 0 9
Select count(*) from ap_pr_t02;
 count 
-------
     9
(1 row)

SET gp_default_storage_options="appendonly=true, compresstype=quicklz";
SET
show gp_default_storage_options;
                                     gp_default_storage_options                                     
----------------------------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=quicklz,compresslevel=1,checksum=true,orientation=row
(1 row)

Alter table ap_pr_t02 add partition p3 start(11) end(15);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t02_1_prt_p3" for table "ap_pr_t02"
ALTER TABLE
select relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t02%';
 relkind | relstorage |               reloptions               
---------+------------+----------------------------------------
 r       | h          | {appendonly=false}
 r       | h          | {appendonly=false}
 r       | h          | {appendonly=false}
 r       | a          | {appendonly=true,compresstype=quicklz}
(4 rows)

RESET gp_default_storage_options;
RESET
-- Parent table with orientation=column, guc with orientaion=row, add partiiton
Drop table if exists ap_pr_t03;
psql:/path/sql_file:1: NOTICE:  table "ap_pr_t03" does not exist, skipping
DROP TABLE
Create table ap_pr_t03( i int, j int, k int) with(appendonly=true, orientation=column) partition by range(i) (start(1) end(10) every(5));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t03_1_prt_1" for table "ap_pr_t03"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t03_1_prt_2" for table "ap_pr_t03"
CREATE TABLE
Insert into ap_pr_t03 select i, i+1, i+2 from generate_series(1,9) i;
INSERT 0 9
Select count(*) from ap_pr_t03;
 count 
-------
     9
(1 row)

select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t03%' order by relname;
      relname      | relkind | relstorage |              reloptions              
-------------------+---------+------------+--------------------------------------
 ap_pr_t03         | r       | c          | {appendonly=true,orientation=column}
 ap_pr_t03_1_prt_1 | r       | c          | {appendonly=true,orientation=column}
 ap_pr_t03_1_prt_2 | r       | c          | {appendonly=true,orientation=column}
(3 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t03%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             0 |              |     32768 | t        | t
             0 |              |     32768 | t        | t
             0 |              |     32768 | t        | t
(3 rows)

SET gp_default_storage_options="appendonly=true";
SET
show gp_default_storage_options;
                           gp_default_storage_options                            
---------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=none,checksum=true,orientation=row
(1 row)

Alter table ap_pr_t03 add partition p3 start(11) end(15);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t03_1_prt_p3" for table "ap_pr_t03"
ALTER TABLE
select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t03%' order by relname;
      relname       | relkind | relstorage |              reloptions              
--------------------+---------+------------+--------------------------------------
 ap_pr_t03          | r       | c          | {appendonly=true,orientation=column}
 ap_pr_t03_1_prt_1  | r       | c          | {appendonly=true,orientation=column}
 ap_pr_t03_1_prt_2  | r       | c          | {appendonly=true,orientation=column}
 ap_pr_t03_1_prt_p3 | r       | a          | {appendonly=true}
(4 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t03%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | t
             0 |              |     32768 | t        | t
             0 |              |     32768 | t        | t
(4 rows)

RESET gp_default_storage_options;
RESET
-- Parent with appendonly=true, guc set to default, add partition with no option, add partiton with orientation=column
Drop table if exists ap_pr_t04;
psql:/path/sql_file:1: NOTICE:  table "ap_pr_t04" does not exist, skipping
DROP TABLE
Create table ap_pr_t04( i int, j int, k int) with(appendonly=true) partition by range(i) (start(1) end(10) every(5));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t04_1_prt_1" for table "ap_pr_t04"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t04_1_prt_2" for table "ap_pr_t04"
CREATE TABLE
Insert into ap_pr_t04 select i, i+1, i+2 from generate_series(1,9) i;
INSERT 0 9
Select count(*) from ap_pr_t04;
 count 
-------
     9
(1 row)

select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t04%' order by relname;
      relname      | relkind | relstorage |    reloptions     
-------------------+---------+------------+-------------------
 ap_pr_t04         | r       | a          | {appendonly=true}
 ap_pr_t04_1_prt_1 | r       | a          | {appendonly=true}
 ap_pr_t04_1_prt_2 | r       | a          | {appendonly=true}
(3 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t04%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
(3 rows)

SET gp_default_storage_options to default;
SET
show gp_default_storage_options;
                            gp_default_storage_options                            
----------------------------------------------------------------------------------
 appendonly=false,blocksize=32768,compresstype=none,checksum=true,orientation=row
(1 row)

Alter table ap_pr_t04 add partition p3 start(11) end(15);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t04_1_prt_p3" for table "ap_pr_t04"
ALTER TABLE
Alter table ap_pr_t04 add partition p4 start(16) end(18) with(appendonly=true,orientation=column);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t04_1_prt_p4" for table "ap_pr_t04"
ALTER TABLE
select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t04%' order by relname;
      relname       | relkind | relstorage |              reloptions              
--------------------+---------+------------+--------------------------------------
 ap_pr_t04          | r       | a          | {appendonly=true}
 ap_pr_t04_1_prt_1  | r       | a          | {appendonly=true}
 ap_pr_t04_1_prt_2  | r       | a          | {appendonly=true}
 ap_pr_t04_1_prt_p3 | r       | h          | 
 ap_pr_t04_1_prt_p4 | r       | c          | {appendonly=true,orientation=column}
(5 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t04%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | t
(4 rows)

RESET gp_default_storage_options;
RESET
-- Parent with appendonly=false, guc to appendonly=true, split partition , check the status of new parts
show gp_default_storage_options; 
                            gp_default_storage_options                            
----------------------------------------------------------------------------------
 appendonly=false,blocksize=32768,compresstype=none,checksum=true,orientation=row
(1 row)

Drop table if exists ap_pr_t05;
psql:/path/sql_file:1: NOTICE:  table "ap_pr_t05" does not exist, skipping
DROP TABLE
Create table ap_pr_t05( i int, j int, k int) partition by range(i) (start(1) end(10) every(5));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t05_1_prt_1" for table "ap_pr_t05"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t05_1_prt_2" for table "ap_pr_t05"
CREATE TABLE
Insert into ap_pr_t05 select i, i+1, i+2 from generate_series(1,9) i;
INSERT 0 9
Select count(*) from ap_pr_t05;
 count 
-------
     9
(1 row)

select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t05%' order by relname;
      relname      | relkind | relstorage | reloptions 
-------------------+---------+------------+------------
 ap_pr_t05         | r       | h          | 
 ap_pr_t05_1_prt_1 | r       | h          | 
 ap_pr_t05_1_prt_2 | r       | h          | 
(3 rows)

SET gp_default_storage_options="appendonly=true";
SET
Alter table ap_pr_t05 split partition for (rank(2)) at (7) into (partition split_p1, partition split_p2);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t05_1_prt_split_p1" for table "ap_pr_t05"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t05_1_prt_split_p2" for table "ap_pr_t05"
ALTER TABLE
select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t05%' order by relname;
         relname          | relkind | relstorage |    reloptions     
--------------------------+---------+------------+-------------------
 ap_pr_t05                | r       | h          | 
 ap_pr_t05_1_prt_1        | r       | h          | 
 ap_pr_t05_1_prt_split_p1 | r       | a          | {appendonly=true}
 ap_pr_t05_1_prt_split_p2 | r       | a          | {appendonly=true}
(4 rows)

RESET gp_default_storage_options;
RESET
-- Parent with appendonly=true, Partition p1 with orientation column, GUC set to orientation column, Exchange with a AO table, heap table
show gp_default_storage_options; 
                            gp_default_storage_options                            
----------------------------------------------------------------------------------
 appendonly=false,blocksize=32768,compresstype=none,checksum=true,orientation=row
(1 row)

Drop table if exists ap_pr_t06;
psql:/path/sql_file:1: NOTICE:  table "ap_pr_t06" does not exist, skipping
DROP TABLE
Create table ap_pr_t06( i int, j int, k int) with(appendonly=true) partition by range(i) (partition p1 start(1) end(5) with(appendonly=true,orientation=column), partition p2 start(5) end(10), partition p3 start(10) end(15));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t06_1_prt_p1" for table "ap_pr_t06"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t06_1_prt_p2" for table "ap_pr_t06"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t06_1_prt_p3" for table "ap_pr_t06"
CREATE TABLE
Insert into ap_pr_t06 select i, i+1, i+2 from generate_series(1,13) i;
INSERT 0 13
Select count(*) from ap_pr_t06;
 count 
-------
    13
(1 row)

select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t06%' order by relname;
      relname       | relkind | relstorage |              reloptions              
--------------------+---------+------------+--------------------------------------
 ap_pr_t06          | r       | a          | {appendonly=true}
 ap_pr_t06_1_prt_p1 | r       | c          | {appendonly=true,orientation=column}
 ap_pr_t06_1_prt_p2 | r       | a          | {appendonly=true}
 ap_pr_t06_1_prt_p3 | r       | a          | {appendonly=true}
(4 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t06%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | t
(4 rows)

Drop table if exists exch_t06_1;
psql:/path/sql_file:1: NOTICE:  table "exch_t06_1" does not exist, skipping
DROP TABLE
Create table exch_t06_1 ( i int, j int, k int) with(appendonly=true);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
Insert into exch_t06_1 select i, i+1, i+2 from generate_series(1,4) i;
INSERT 0 4
Drop table if exists exch_t06_2;
psql:/path/sql_file:1: NOTICE:  table "exch_t06_2" does not exist, skipping
DROP TABLE
Create table exch_t06_2 ( i int, j int, k int) with(appendonly=false);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
Insert into exch_t06_2 select i, i+1, i+2 from generate_series(5,9) i;
INSERT 0 5
SET gp_default_storage_options="appendonly=true, orientation=column";
SET
show gp_default_storage_options;
                             gp_default_storage_options                             
------------------------------------------------------------------------------------
 appendonly=true,blocksize=32768,compresstype=none,checksum=true,orientation=column
(1 row)

Alter table ap_pr_t06 exchange partition p1 with table  exch_t06_1;
ALTER TABLE
Alter table ap_pr_t06 exchange partition p2 with table  exch_t06_2;
ALTER TABLE
select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t06%' order by relname;
      relname       | relkind | relstorage |     reloptions     
--------------------+---------+------------+--------------------
 ap_pr_t06          | r       | a          | {appendonly=true}
 ap_pr_t06_1_prt_p1 | r       | a          | {appendonly=true}
 ap_pr_t06_1_prt_p2 | r       | h          | {appendonly=false}
 ap_pr_t06_1_prt_p3 | r       | a          | {appendonly=true}
(4 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t06%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
             0 |              |     32768 | t        | f
(3 rows)

-- Partition with sub-partitions and encoding clause at sub-part level
SET gp_default_storage_options='compresstype=rle_type, orientation=column';
SET
show gp_default_storage_options;
                                       gp_default_storage_options                                        
---------------------------------------------------------------------------------------------------------
 appendonly=false,blocksize=32768,compresstype=rle_type,compresslevel=1,checksum=true,orientation=column
(1 row)

create table ap_pr_t07 (i int, j int)
with (appendonly = true, orientation=column)
partition by range(j)
    subpartition by list (i)
    subpartition template(
        subpartition sp1 values(1, 2, 3, 4, 5),
        column i encoding(compresstype=zlib),
        column j encoding(compresstype=quicklz)
    )
(partition p1 start(1) end(10)
);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t07_1_prt_p1" for table "ap_pr_t07"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ap_pr_t07_1_prt_p1_2_prt_sp1" for table "ap_pr_t07_1_prt_p1"
CREATE TABLE
Insert into ap_pr_t07 values (1,1),(2,2),(3,3),(4,4),(5,5),(1,5),(2,3),(3,4);
INSERT 0 8
Select count(*) from ap_pr_t07;
 count 
-------
     8
(1 row)

select relname, relkind, relstorage, reloptions from pg_class where relname like 'ap_pr_t07%' order by relname;
           relname            | relkind | relstorage |                         reloptions                         
------------------------------+---------+------------+------------------------------------------------------------
 ap_pr_t07                    | r       | c          | {appendonly=true,orientation=column,compresstype=rle_type}
 ap_pr_t07_1_prt_p1           | r       | c          | {appendonly=true,orientation=column,compresstype=rle_type}
 ap_pr_t07_1_prt_p1_2_prt_sp1 | r       | c          | {appendonly=true,orientation=column,compresstype=rle_type}
(3 rows)

select compresslevel, compresstype, blocksize, checksum, columnstore from pg_appendonly where relid in  (select oid from pg_class where relname  like 'ap_pr_t07%') order by columnstore;
 compresslevel | compresstype | blocksize | checksum | columnstore 
---------------+--------------+-----------+----------+-------------
             1 | rle_type     |     32768 | t        | t
             1 | rle_type     |     32768 | t        | t
             1 | rle_type     |     32768 | t        | t
(3 rows)

select parencattnum, parencattoptions from pg_partition_encoding e, pg_partition p, pg_class c
where c.relname = 'ap_pr_t07' and c.oid = p.parrelid and p.oid = e.parencoid order by parencattnum;
 parencattnum |                    parencattoptions                    
--------------+--------------------------------------------------------
            1 | {compresstype=zlib,compresslevel=1,blocksize=32768}
            2 | {compresstype=quicklz,compresslevel=1,blocksize=32768}
(2 rows)

SET gp_default_storage_options='appendonly=false';
SET
show gp_default_storage_options;
                            gp_default_storage_options                            
----------------------------------------------------------------------------------
 appendonly=false,blocksize=32768,compresstype=none,checksum=true,orientation=row
(1 row)

