-- @Description Out of order Update (MPP-21144)
-- 
-- scenario 1
drop table if exists heap_ooo_upd_tab1;
psql:/path/sql_file:1: NOTICE:  table "heap_ooo_upd_tab1" does not exist, skipping
DROP TABLE
create table heap_ooo_upd_tab1 (i int, j int ) ;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
drop table if exists heap_ooo_upd_tab2;
psql:/path/sql_file:1: NOTICE:  table "heap_ooo_upd_tab2" does not exist, skipping
DROP TABLE
create table heap_ooo_upd_tab2 (i int, j int ) ;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into  heap_ooo_upd_tab1 values (1,10);
INSERT 0 1
insert  into heap_ooo_upd_tab2 values (1,11),(1,22);
INSERT 0 2
select * from heap_ooo_upd_tab1 order by 2;
 i | j  
---+----
 1 | 10
(1 row)

select * from heap_ooo_upd_tab2 order by 2;
 i | j  
---+----
 1 | 11
 1 | 22
(2 rows)

update heap_ooo_upd_tab1 set j = heap_ooo_upd_tab2.j from heap_ooo_upd_tab2 where heap_ooo_upd_tab1.i = heap_ooo_upd_tab2.i ;
UPDATE 1
select count(*) from heap_ooo_upd_tab2 ;
 count 
-------
     2
(1 row)

select count(*) from heap_ooo_upd_tab1 ;
 count 
-------
     1
(1 row)

set gp_select_invisible = true;
SET
select count(*) from heap_ooo_upd_tab1 ;
 count 
-------
     2
(1 row)

set gp_select_invisible = false;
SET
-- scenario 2
drop table if exists heap_ooo_upd_tab1;
DROP TABLE
create table heap_ooo_upd_tab1 (i int, j int );
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
drop table if exists heap_ooo_upd_tab2;
DROP TABLE
create table heap_ooo_upd_tab2 (i int, j int ) ;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into  heap_ooo_upd_tab1 values (1,10) ,(1,10) ;
INSERT 0 2
insert  into heap_ooo_upd_tab2 values (1,11),(1,22) ;
INSERT 0 2
select * from heap_ooo_upd_tab1 order by 2;
 i | j  
---+----
 1 | 10
 1 | 10
(2 rows)

select * from heap_ooo_upd_tab2 order by 2;
 i | j  
---+----
 1 | 11
 1 | 22
(2 rows)

update heap_ooo_upd_tab1 set j = heap_ooo_upd_tab2.j from heap_ooo_upd_tab2 where heap_ooo_upd_tab1.i = heap_ooo_upd_tab2.i ;
UPDATE 2
select count(*) from heap_ooo_upd_tab2 ;
 count 
-------
     2
(1 row)

select count(*) from heap_ooo_upd_tab1 ;
 count 
-------
     2
(1 row)

set gp_select_invisible = true;
SET
select count(*) from heap_ooo_upd_tab1 ;
 count 
-------
     4
(1 row)

set gp_select_invisible = false;
SET
vacuum heap_ooo_upd_tab1;
VACUUM
set gp_select_invisible = true;
SET
select count(*) from heap_ooo_upd_tab1 ;
 count 
-------
     2
(1 row)

set gp_select_invisible = false;
SET
