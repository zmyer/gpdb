-- start_ignore
-- end_ignore
--Create an CO table with partitions ( having diff storage parameters)
--start_ignore
 drop table if exists pt_co_tab cascade;
DROP TABLE
--end_ignore
Create table  pt_co_tab(a int, b text, c int , d int, e numeric,success bool) with ( appendonly = true, orientation = column)
 distributed by (a)
 partition by list(b)
 (
          partition abc values ('abc','abc1','abc2') with (appendonly=false), -- HEAP
          partition def values ('def','def1','def3') with (appendonly=true, compresslevel=1), 
          partition ghi values ('ghi','ghi1','ghi2') with (appendonly=true), -- AO
          default partition dft
 );
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_abc" for table "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_def" for table "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_ghi" for table "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_dft" for table "pt_co_tab"
CREATE TABLE
--Create indexes on the table
--start_ignore
drop index if exists co_idx1 cascade;
psql:/path/sql_file:1: NOTICE:  index "co_idx1" does not exist, skipping
DROP INDEX
drop index if exists co_idx2 cascade;
psql:/path/sql_file:1: NOTICE:  index "co_idx2" does not exist, skipping
DROP INDEX
--end_ignore
 -- Partial index
 create index co_idx1 on pt_co_tab(a) where c > 10;
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_abc"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_def"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_ghi"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_dft"
CREATE INDEX
 -- Expression index
 create index co_idx2 on pt_co_tab(upper(b));
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_abc"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_def"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_ghi"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_dft"
CREATE INDEX
--Drop partition
 alter table pt_co_tab drop default partition;
psql:/path/sql_file:1: NOTICE:  dropped partition "dft" for relation "pt_co_tab"
ALTER TABLE
--Add partition
 alter table pt_co_tab add partition xyz values ('xyz','xyz1','xyz2') WITH (appendonly=true,orientation=column,compresslevel=5); --CO
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_xyz" for table "pt_co_tab"
ALTER TABLE
 alter table pt_co_tab add partition jkl values ('jkl','jkl1','jkl2') WITH (appendonly=true,compresslevel=1); -- AO
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_jkl" for table "pt_co_tab"
ALTER TABLE
 alter table pt_co_tab add partition mno values ('mno','mno1','mno2') WITH (appendonly=false); --Heap
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_mno" for table "pt_co_tab"
ALTER TABLE
--Check properties of the added partition tables
 select oid::regclass, relkind, relstorage, reloptions from pg_class where oid in ( select  relfilenode from pg_class where   relname in  ( 'pt_co_tab_1_prt_xyz', 'pt_co_tab_1_prt_jkl','pt_co_tab_1_prt_mno'));
         oid         | relkind | relstorage |                      reloptions                      
---------------------+---------+------------+------------------------------------------------------
 pt_co_tab_1_prt_xyz | r       | c          | {appendonly=true,orientation=column,compresslevel=5}
 pt_co_tab_1_prt_jkl | r       | a          | {appendonly=true,compresslevel=1}
 pt_co_tab_1_prt_mno | r       | h          | {appendonly=false}
(3 rows)

--Insert Data
 insert into pt_co_tab select 1, 'xyz', 1, 1, 1.0 , true from generate_series(1, 100);
INSERT 0 100
 insert into pt_co_tab select 1, 'abc', 1, 1, 1.0 , true from generate_series(1, 100);
INSERT 0 100
 insert into pt_co_tab select 1, 'def', 1, 1, 1.0 , true from generate_series(1, 100);
INSERT 0 100
 insert into pt_co_tab select 1, 'ghi', 1, 1, 1.0 , true from generate_series(1, 100);
INSERT 0 100
 insert into pt_co_tab select 1, 'jkl', 1, 1, 1.0 , true from generate_series(1, 100);
INSERT 0 100
 insert into pt_co_tab select 1, 'mno', 1, 1, 1.0 , true from generate_series(1, 100);
INSERT 0 100
--Split partition [Creates new partitions to be of the same type as the parent partition. All heap partitions created]
 alter table pt_co_tab split partition abc at ('abc1') into ( partition abc1,partition abc2); -- Heap
psql:/path/sql_file:1: NOTICE:  exchanged partition "abc" of relation "pt_co_tab" with relation "pg_temp_3275836"
psql:/path/sql_file:1: NOTICE:  dropped partition "abc" for relation "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_abc1" for table "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_abc2" for table "pt_co_tab"
ALTER TABLE
 alter table pt_co_tab split partition ghi at ('ghi1') into ( partition ghi1,partition ghi2); --AO
psql:/path/sql_file:1: NOTICE:  exchanged partition "ghi" of relation "pt_co_tab" with relation "pg_temp_3275836"
psql:/path/sql_file:1: NOTICE:  dropped partition "ghi" for relation "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_ghi1" for table "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_ghi2" for table "pt_co_tab"
ALTER TABLE
 alter table pt_co_tab split partition xyz at ('xyz1') into ( partition xyz1,partition xyz2); --CO
psql:/path/sql_file:1: NOTICE:  exchanged partition "xyz" of relation "pt_co_tab" with relation "pg_temp_3275836"
psql:/path/sql_file:1: NOTICE:  dropped partition "xyz" for relation "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_xyz1" for table "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_xyz2" for table "pt_co_tab"
ALTER TABLE
--Check the storage type and properties of the split partition
  select oid::regclass, relkind, relstorage, reloptions from pg_class where oid in (select relfilenode from pg_class where relname in ('pt_co_tab_1_prt_xyz1','pt_co_tab_1_prt_xyz2','pt_co_tab_1_prt_ghi1','pt_co_tab_1_prt_ghi2','pt_co_tab_1_prt_abc1','pt_co_tab_1_prt_abc2'));         
         oid          | relkind | relstorage |                      reloptions                      
----------------------+---------+------------+------------------------------------------------------
 pt_co_tab_1_prt_abc1 | r       | h          | {appendonly=false}
 pt_co_tab_1_prt_abc2 | r       | h          | {appendonly=false}
 pt_co_tab_1_prt_ghi1 | r       | a          | {appendonly=true}
 pt_co_tab_1_prt_ghi2 | r       | a          | {appendonly=true}
 pt_co_tab_1_prt_xyz1 | r       | c          | {appendonly=true,orientation=column,compresslevel=5}
 pt_co_tab_1_prt_xyz2 | r       | c          | {appendonly=true,orientation=column,compresslevel=5}
(6 rows)

--Exchange partition
 -- Create candidate table
--start_ignore
drop table if exists heap_can cascade;
DROP TABLE
drop table if exists ao_can cascade;
DROP TABLE
drop table if exists co_can cascade;
DROP TABLE
--end_ignore
 create table heap_can(like pt_co_tab);  
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
 create table ao_can(like pt_co_tab) with (appendonly=true);   
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
 create table co_can(like pt_co_tab)  with (appendonly=true,orientation=column);   
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
 -- Exchange
 alter table pt_co_tab add partition pqr values ('pqr','pqr1','pqr2') WITH (appendonly=true,compresslevel=5);-- AO
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_pqr" for table "pt_co_tab"
ALTER TABLE
 alter table pt_co_tab add partition stu values ('stu','stu1','stu2') WITH (appendonly=false);-- heap
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_stu" for table "pt_co_tab"
ALTER TABLE
 alter table pt_co_tab exchange partition for ('stu') with table ao_can ; -- Heap exchanged with AO
psql:/path/sql_file:1: NOTICE:  exchanged partition "stu" of relation "pt_co_tab" with relation "ao_can"
ALTER TABLE
 alter table pt_co_tab exchange partition for ('pqr') with table co_can; -- AO exchanged with CO
psql:/path/sql_file:1: NOTICE:  exchanged partition "pqr" of relation "pt_co_tab" with relation "co_can"
ALTER TABLE
 alter table pt_co_tab exchange partition for ('xyz1') with table heap_can; -- CO exchanged with Heap
psql:/path/sql_file:1: NOTICE:  exchanged partition "xyz2" of relation "pt_co_tab" with relation "heap_can"
ALTER TABLE
--Check for the storage properties and indexes of the two tables involved in the exchange
 \d+ heap_can
                                Append-Only Columnar Table "public.heap_can"
 Column  |  Type   | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
---------+---------+-----------+----------+------------------+-------------------+------------+-------------
 a       | integer |           | plain    | zlib             | 5                 | 32768      | 
 b       | text    |           | extended | zlib             | 5                 | 32768      | 
 c       | integer |           | plain    | zlib             | 5                 | 32768      | 
 d       | integer |           | plain    | zlib             | 5                 | 32768      | 
 e       | numeric |           | main     | zlib             | 5                 | 32768      | 
 success | boolean |           | plain    | zlib             | 5                 | 32768      | 
Checksum: f
Indexes:
    "pt_co_tab_1_prt_xyz2_a_key" btree (a) WHERE c > 10
    "pt_co_tab_1_prt_xyz2_key" btree (upper(b))
Check constraints:
    "pt_co_tab_1_prt_xyz2_check" CHECK (b = 'xyz1'::text)
Has OIDs: no
Options: appendonly=true, orientation=column, compresslevel=5
Distributed by: (a)

 \d+ co_can
           Append-Only Table "public.co_can"
 Column  |  Type   | Modifiers | Storage  | Description 
---------+---------+-----------+----------+-------------
 a       | integer |           | plain    | 
 b       | text    |           | extended | 
 c       | integer |           | plain    | 
 d       | integer |           | plain    | 
 e       | numeric |           | main     | 
 success | boolean |           | plain    | 
Compression Type: zlib
Compression Level: 5
Block Size: 32768
Checksum: f
Indexes:
    "pt_co_tab_1_prt_pqr_a_key" btree (a) WHERE c > 10
    "pt_co_tab_1_prt_pqr_key" btree (upper(b))
Check constraints:
    "pt_co_tab_1_prt_pqr_check" CHECK (b = 'pqr'::text OR b = 'pqr1'::text OR b = 'pqr2'::text)
Has OIDs: no
Options: appendonly=true, compresslevel=5
Distributed by: (a)

 \d+ ao_can
                 Table "public.ao_can"
 Column  |  Type   | Modifiers | Storage  | Description 
---------+---------+-----------+----------+-------------
 a       | integer |           | plain    | 
 b       | text    |           | extended | 
 c       | integer |           | plain    | 
 d       | integer |           | plain    | 
 e       | numeric |           | main     | 
 success | boolean |           | plain    | 
Indexes:
    "pt_co_tab_1_prt_stu_a_key" btree (a) WHERE c > 10
    "pt_co_tab_1_prt_stu_key" btree (upper(b))
Check constraints:
    "pt_co_tab_1_prt_stu_check" CHECK (b = 'stu'::text OR b = 'stu1'::text OR b = 'stu2'::text)
Has OIDs: no
Options: appendonly=false
Distributed by: (a)

-- Further operations
 alter table pt_co_tab drop partition jkl;
ALTER TABLE
 truncate table pt_co_tab;
TRUNCATE TABLE
--Further create some more indexes
 create index idx3 on pt_co_tab(c,d) where a = 40 OR a = 50; -- multicol indx
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_def"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_mno"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_abc1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_abc2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_ghi1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_ghi2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_xyz1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_stu"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_pqr"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_xyz2"
CREATE INDEX
 CREATE INDEX idx5 ON pt_co_tab ((b || ' ' || e)); --Expression
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_def"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_mno"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_abc1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_abc2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_ghi1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_ghi2"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_xyz1"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_stu"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_pqr"
psql:/path/sql_file:1: NOTICE:  building index for child partition "pt_co_tab_1_prt_xyz2"
CREATE INDEX
--Add default partition
 alter table pt_co_tab add default partition dft;
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_dft" for table "pt_co_tab"
ALTER TABLE
--Split default partition
 alter table pt_co_tab split default partition at ('uvw') into (partition dft, partition uvw);
psql:/path/sql_file:1: NOTICE:  exchanged partition "dft" of relation "pt_co_tab" with relation "pg_temp_3275836"
psql:/path/sql_file:1: NOTICE:  dropped partition "dft" for relation "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_uvw" for table "pt_co_tab"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "pt_co_tab_1_prt_dft" for table "pt_co_tab"
ALTER TABLE
