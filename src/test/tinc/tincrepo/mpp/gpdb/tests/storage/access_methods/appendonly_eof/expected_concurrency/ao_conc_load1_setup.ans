-- start_ignore
-- end_ignore
DROP EXTERNAL TABLE IF EXISTS exttab_conc_1 CASCADE;
DROP EXTERNAL TABLE
DROP TABLE IF EXISTS TEST_AO_LOAD1 CASCADE;
DROP TABLE
-- does not reach reject limit
CREATE EXTERNAL TABLE exttab_conc_1( i int, j text ) 
LOCATION ('gpfdist://localhost:8080/data.tbl') FORMAT 'TEXT' (DELIMITER '|') 
SEGMENT REJECT LIMIT 100;
CREATE EXTERNAL TABLE
CREATE TABLE TEST_AO_LOAD1 (i int, j text) WITH (appendonly=true);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
DROP FUNCTION IF EXISTS duplicate_check_aoseg(tablename text, OUT content int, OUT segno int, OUT repeat_count int);
psql:/path/sql_file:1: NOTICE:  function duplicate_check_aoseg(text) does not exist, skipping
DROP FUNCTION
CREATE FUNCTION duplicate_check_aoseg(tablename text, OUT content int, OUT segno int, OUT repeat_count int) returns SETOF record AS 
$$
declare STATEMENT TEXT;
var_match record;
BEGIN
  STATEMENT := 'select gp_segment_id,segno, count(gp_segment_id) as count from gp_dist_random(''' || tablename || ''') GROUP BY gp_segment_id,segno HAVING ( COUNT(gp_segment_id) > 1 ) order by gp_segment_id';
  FOR var_match IN EXECUTE(STATEMENT) LOOP
	content := var_match.gp_segment_id;
	segno := var_match.segno;
	repeat_count := var_match.count;
       RETURN NEXT;
    END LOOP;
END;
$$ LANGUAGE 'plpgsql';
CREATE FUNCTION
DROP FUNCTION IF EXISTS duplicate_check_visimap(tablename text, OUT content int, OUT segno int, OUT first_row_no int, OUT repeat_count int);
psql:/path/sql_file:1: NOTICE:  function duplicate_check_visimap(text) does not exist, skipping
DROP FUNCTION
CREATE FUNCTION duplicate_check_visimap(tablename text, OUT content int, OUT segno int, OUT first_row_no int, OUT repeat_count int) returns SETOF record AS 
$$
declare STATEMENT TEXT;
var_match record;
BEGIN
  STATEMENT := 'select gp_segment_id,segno, first_row_no, count(gp_segment_id) as count from gp_dist_random(''' || tablename || ''') GROUP BY gp_segment_id,segno,first_row_no HAVING ( COUNT(gp_segment_id) > 1 ) order by gp_segment_id';
  FOR var_match IN EXECUTE(STATEMENT) LOOP
	content := var_match.gp_segment_id;
	segno := var_match.segno;
	repeat_count := var_match.count;
       RETURN NEXT;
    END LOOP;
END;
$$ LANGUAGE 'plpgsql';
CREATE FUNCTION
