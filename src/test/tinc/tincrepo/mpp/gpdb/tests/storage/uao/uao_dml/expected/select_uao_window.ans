-- @Description select with window 
-- 
DROP TABLE IF EXISTS uao_orders;
DROP TABLE
CREATE TABLE uao_orders(order_id serial , customer_id integer, 
      order_datetime timestamp, order_total numeric(10,2)) with (appendonly=true); 
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "uao_orders_order_id_seq" for serial column "uao_orders.order_id"
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'order_id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO uao_orders(customer_id, order_datetime, order_total)
VALUES (1,'2009-05-01 10:00 AM', 500),
    (1,'2009-05-15 11:00 AM', 650),
    (2,'2009-05-11 11:00 PM', 100),
    (2,'2009-05-12 11:00 PM', 5),
       (3,'2009-04-11 11:00 PM', 100),
          (1,'2009-05-20 11:00 AM', 3);
INSERT 0 6
select * from uao_orders order by order_id;
 order_id | customer_id |   order_datetime    | order_total 
----------+-------------+---------------------+-------------
        1 |           1 | 2009-05-01 10:00:00 |      500.00
        2 |           1 | 2009-05-15 11:00:00 |      650.00
        3 |           2 | 2009-05-11 23:00:00 |      100.00
        4 |           2 | 2009-05-12 23:00:00 |        5.00
        5 |           3 | 2009-04-11 23:00:00 |      100.00
        6 |           1 | 2009-05-20 11:00:00 |        3.00
(6 rows)

SELECT row_number()  OVER(window_custtime) As rtime_d, 
n.customer_id, lead(order_id) OVER(window_custtime) As cr_num, n.order_id, n.order_total
FROM uao_orders AS n 
WINDOW window_custtime AS (PARTITION BY n.customer_id 
                               ORDER BY n.customer_id, n.order_id, n.order_total)
ORDER BY  1, 2;
 rtime_d | customer_id | cr_num | order_id | order_total 
---------+-------------+--------+----------+-------------
       1 |           1 |      2 |        1 |      500.00
       1 |           2 |      4 |        3 |      100.00
       1 |           3 |        |        5 |      100.00
       2 |           1 |      6 |        2 |      650.00
       2 |           2 |        |        4 |        5.00
       3 |           1 |        |        6 |        3.00
(6 rows)

