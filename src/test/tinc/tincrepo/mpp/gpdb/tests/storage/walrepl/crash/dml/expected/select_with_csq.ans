-- start_ignore
-- end_ignore
-- start_ignore
drop table if exists csq_t1;
DROP TABLE
drop table if exists csq_t2;
DROP TABLE
drop table if exists csq_t3;
DROP TABLE
drop table if exists csq_t4;
DROP TABLE
drop table if exists csq_t5;
DROP TABLE
drop table if exists A;
DROP TABLE
drop table if exists B;
DROP TABLE
drop table if exists C;
DROP TABLE
-- end_ignore
create table csq_t1(a int, b int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into csq_t1 values (1,2);
INSERT 0 1
insert into csq_t1 values (3,4);
INSERT 0 1
insert into csq_t1 values (5,6);
INSERT 0 1
insert into csq_t1 values (7,8);
INSERT 0 1
create table csq_t2(x int,y int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into csq_t2 values(1,1);
INSERT 0 1
insert into csq_t2 values(3,9);
INSERT 0 1
insert into csq_t2 values(5,25);
INSERT 0 1
insert into csq_t2 values(7,49);
INSERT 0 1
create table csq_t3(c int, d text);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into csq_t3 values(1,'one');
INSERT 0 1
insert into csq_t3 values(3,'three');
INSERT 0 1
insert into csq_t3 values(5,'five');
INSERT 0 1
insert into csq_t3 values(7,'seven');
INSERT 0 1
create table csq_t4(a int, b int) distributed by (b);
CREATE TABLE
insert into csq_t4 values (1,2);
INSERT 0 1
insert into csq_t4 values (3,4);
INSERT 0 1
insert into csq_t4 values (5,6);
INSERT 0 1
insert into csq_t4 values (7,8);
INSERT 0 1
create table csq_t5(x int,y int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into csq_t5 values(1,1);
INSERT 0 1
insert into csq_t5 values(3,9);
INSERT 0 1
insert into csq_t5 values(5,25);
INSERT 0 1
insert into csq_t5 values(7,49);
INSERT 0 1
create table A(i integer, j integer);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into A values(1,1);
INSERT 0 1
insert into A values(19,5);
INSERT 0 1
insert into A values(99,62);
INSERT 0 1
insert into A values(1,1);
INSERT 0 1
insert into A values(78,-1);
INSERT 0 1
create table B(i integer, j integer);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into B values(1,43);
INSERT 0 1
insert into B values(88,1);
INSERT 0 1
insert into B values(-1,62);
INSERT 0 1
insert into B values(1,1);
INSERT 0 1
insert into B values(32,5);
INSERT 0 1
insert into B values(2,7);
INSERT 0 1
create table C(i integer, j integer);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into C values(1,889);
INSERT 0 1
insert into C values(288,1);
INSERT 0 1
insert into C values(-1,625);
INSERT 0 1
insert into C values(32,65);
INSERT 0 1
insert into C values(32,62);
INSERT 0 1
insert into C values(3,-1);
INSERT 0 1
insert into C values(99,7);
INSERT 0 1
insert into C values(78,62);
INSERT 0 1
insert into C values(2,7);
INSERT 0 1
-- -- -- --
-- Basic queries with ANY clause
-- -- -- --
select a, x from csq_t1, csq_t2 where csq_t1.a = any (select x);
 a | x 
---+---
 1 | 1
 3 | 3
 5 | 5
 7 | 7
(4 rows)

select A.i from A where A.i = any (select B.i from B where A.i = B.i) order by A.i;
 i 
---
 1
 1
(2 rows)

select * from A where A.j = any (select C.j from C where C.j = A.j) order by 1,2;
 i  | j  
----+----
  1 |  1
  1 |  1
 78 | -1
 99 | 62
(4 rows)

select * from A,B where A.j = any (select C.j from C where C.j = A.j and B.i = any (select C.i from C)) order by 1,2,3,4;
 i  | j  | i  | j  
----+----+----+----
  1 |  1 | -1 | 62
  1 |  1 | -1 | 62
  1 |  1 |  1 |  1
  1 |  1 |  1 |  1
  1 |  1 |  1 | 43
  1 |  1 |  1 | 43
  1 |  1 |  2 |  7
  1 |  1 |  2 |  7
  1 |  1 | 32 |  5
  1 |  1 | 32 |  5
 78 | -1 | -1 | 62
 78 | -1 |  1 |  1
 78 | -1 |  1 | 43
 78 | -1 |  2 |  7
 78 | -1 | 32 |  5
 99 | 62 | -1 | 62
 99 | 62 |  1 |  1
 99 | 62 |  1 | 43
 99 | 62 |  2 |  7
 99 | 62 | 32 |  5
(20 rows)

select * from A where A.j = any (select C.j from C,B where C.j = A.j and B.i = any (select C.i from C)) order by 1,2;
 i  | j  
----+----
  1 |  1
  1 |  1
 78 | -1
 99 | 62
(4 rows)

select * from A where A.j = any (select C.j from C,B where C.j = A.j and B.i = any (select C.i from C where C.i != 10 and C.i = B.i)) order by 1,2;
 i  | j  
----+----
  1 |  1
  1 |  1
 78 | -1
 99 | 62
(4 rows)

select * from A,B where A.j = any (select C.j from C where C.j = A.j and B.i = any (select C.i from C where C.i != 10 and C.i = A.i)) order by 1,2,3,4; -- Not supported, should fail
psql:/path/sql_file:1: ERROR:  correlated subquery with skip-level correlations is not supported
select A.i, B.i, C.j from A, B, C where A.j = (select C.j from C where C.j = A.j and C.i = any (select B.i from B where C.i = B.i and B.i !=10)) order by A.i, B.i, C.j limit 10;
 i  | i  |  j  
----+----+-----
 99 | -1 |  -1
 99 | -1 |   1
 99 | -1 |   7
 99 | -1 |   7
 99 | -1 |  62
 99 | -1 |  62
 99 | -1 |  65
 99 | -1 | 625
 99 | -1 | 889
 99 |  1 |  -1
(10 rows)

select A.i, B.i, C.j from A, B, C where A.j = (select C.j from C where C.j = A.j and C.i = any (select B.i from B where C.i = B.i and B.i !=10)) order by A.i, B.i, C.j limit 10;
 i  | i  |  j  
----+----+-----
 99 | -1 |  -1
 99 | -1 |   1
 99 | -1 |   7
 99 | -1 |   7
 99 | -1 |  62
 99 | -1 |  62
 99 | -1 |  65
 99 | -1 | 625
 99 | -1 | 889
 99 |  1 |  -1
(10 rows)

select A.i, B.i, C.j from A, B, C where A.j = any ( select C.j from C where not exists(select C.i from C,A where C.i = A.i and C.i =10)) order by A.i, B.i, C.j limit 10;
 i | i  | j  
---+----+----
 1 | -1 | -1
 1 | -1 | -1
 1 | -1 |  1
 1 | -1 |  1
 1 | -1 |  7
 1 | -1 |  7
 1 | -1 |  7
 1 | -1 |  7
 1 | -1 | 62
 1 | -1 | 62
(10 rows)

select A.i, B.i, C.j from A, B, C where A.j = any (select C.j from C where C.j = A.j and not exists (select sum(B.i) from B where C.i = B.i and C.i !=10)) order by A.i, B.i, C.j limit 10;
 i | i | j 
---+---+---
(0 rows)

-- -- -- --
-- Basic CSQ with UPDATE statements
-- -- -- --
select * from csq_t4 order by a;
 a | b 
---+---
 1 | 2
 3 | 4
 5 | 6
 7 | 8
(4 rows)

update csq_t4 set a = (select y from csq_t5 where x=a) where b < 8;
UPDATE 3
select * from csq_t4 order by a;
 a  | b 
----+---
  1 | 2
  7 | 8
  9 | 4
 25 | 6
(4 rows)

update csq_t4 set a = 9999 where csq_t4.a = (select max(x) from csq_t5);
UPDATE 1
select * from csq_t4 order by a;
  a   | b 
------+---
    1 | 2
    9 | 4
   25 | 6
 9999 | 8
(4 rows)

update csq_t4 set a = (select max(y) from csq_t5 where x=a) where csq_t4.a = (select min(x) from csq_t5);
UPDATE 1
select * from csq_t4 order by a;
  a   | b 
------+---
    1 | 2
    9 | 4
   25 | 6
 9999 | 8
(4 rows)

update csq_t4 set a = 8888 where (select (y*2)>b from csq_t5 where a=x);
UPDATE 0
select * from csq_t4 order by a;
  a   | b 
------+---
    1 | 2
    9 | 4
   25 | 6
 9999 | 8
(4 rows)

update csq_t4 set a = 3333 where csq_t4.a in (select x from csq_t5);
UPDATE 1
select * from csq_t4 order by a;
  a   | b 
------+---
    9 | 4
   25 | 6
 3333 | 2
 9999 | 8
(4 rows)

update A set i = 11111 from C where C.i = A.i and exists (select C.j from C,B where C.j = B.j and A.j < 10);
psql:/path/sql_file:1: ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
select * from A order by A.i, A.j;
 i  | j  
----+----
  1 |  1
  1 |  1
 19 |  5
 78 | -1
 99 | 62
(5 rows)

update A set i = 22222 from C where C.i = A.i and not exists (select C.j from C,B where C.j = B.j and A.j < 10);
psql:/path/sql_file:1: ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
select * from A order by A.i, A.j;
 i  | j  
----+----
  1 |  1
  1 |  1
 19 |  5
 78 | -1
 99 | 62
(5 rows)

-- -- -- --
-- Basic CSQ with DELETE statements
-- -- -- --
select * from csq_t4 order by a;
  a   | b 
------+---
    9 | 4
   25 | 6
 3333 | 2
 9999 | 8
(4 rows)

delete from csq_t4 where a <= (select min(y) from csq_t5 where x=a);
DELETE 0
select * from csq_t4 order by a;
  a   | b 
------+---
    9 | 4
   25 | 6
 3333 | 2
 9999 | 8
(4 rows)

delete from csq_t4 where csq_t4.a = (select x from csq_t5);
psql:/path/sql_file:1: ERROR:  more than one row returned by a subquery used as an expression
select * from csq_t4 order by a;
  a   | b 
------+---
    9 | 4
   25 | 6
 3333 | 2
 9999 | 8
(4 rows)

delete from csq_t4 where exists (select (y*2)>b from csq_t5 where a=x);
DELETE 0
select * from csq_t4 order by a;
  a   | b 
------+---
    9 | 4
   25 | 6
 3333 | 2
 9999 | 8
(4 rows)

delete from csq_t4  where csq_t4.a = (select x from csq_t5 where a=x);
DELETE 0
select * from csq_t4 order by a;
  a   | b 
------+---
    9 | 4
   25 | 6
 3333 | 2
 9999 | 8
(4 rows)

delete from  A TableA where exists (select C.j from C, B where C.j = B.j and TableA.j < 10);
DELETE 4
select * from A order by A.i;
 i  | j  
----+----
 99 | 62
(1 row)

delete from A TableA where not exists (select C.j from C,B where C.j = B.j and TableA.j < 10);
DELETE 1
select * from A order by A.i;
 i | j 
---+---
(0 rows)

