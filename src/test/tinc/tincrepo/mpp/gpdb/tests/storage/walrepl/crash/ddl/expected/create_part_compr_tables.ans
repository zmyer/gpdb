-- @description AO and CO partiton compression tables
-- 
-- AO part_compr tables
--start_ignore
Drop table if exists sto_aocomp_p1 ;
DROP TABLE
--end_ignore
create table sto_aocomp_p1( a int, b int, c int,d int  ) with(appendonly= true)
 partition by range(b) (
partition p1 start(1) end(5) with (appendonly = true),
partition p2 start(5) end(10) with (appendonly = true, compresstype=zlib, compresslevel=1),
partition p3 start(10) end(15) with (appendonly = true, compresstype=quicklz));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_aocomp_p1_1_prt_p1" for table "sto_aocomp_p1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_aocomp_p1_1_prt_p2" for table "sto_aocomp_p1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_aocomp_p1_1_prt_p3" for table "sto_aocomp_p1"
CREATE TABLE
insert into sto_aocomp_p1 values(1, generate_series(1,14), 4, 5); 
INSERT 0 14
select * from sto_aocomp_p1 order by b;
 a | b  | c | d 
---+----+---+---
 1 |  1 | 4 | 5
 1 |  2 | 4 | 5
 1 |  3 | 4 | 5
 1 |  4 | 4 | 5
 1 |  5 | 4 | 5
 1 |  6 | 4 | 5
 1 |  7 | 4 | 5
 1 |  8 | 4 | 5
 1 |  9 | 4 | 5
 1 | 10 | 4 | 5
 1 | 11 | 4 | 5
 1 | 12 | 4 | 5
 1 | 13 | 4 | 5
 1 | 14 | 4 | 5
(14 rows)

-- CO part_compr tables
--start_ignore
Drop table if exists sto_cocomp_p1;
DROP TABLE
--end_ignore
create table sto_cocomp_p1
(
distcol int, ptcol int, subptcol int ) 
distributed by (distcol) partition by range (ptcol)
subpartition by list (subptcol) 
subpartition template (
default subpartition subothers, 
subpartition sub1 values(1,2,3) with(appendonly=true, orientation = column , compresstype=zlib), 
subpartition sub2 values(4,5,6) with (appendonly=true, orientation = column, compresstype=quicklz), 
subpartition sub3 values(7,8,9) )
( default partition others, start (1) end (10) inclusive every (5) );
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_others" for table "sto_cocomp_p1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_2" for table "sto_cocomp_p1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_3" for table "sto_cocomp_p1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_others_2_prt_subothers" for table "sto_cocomp_p1_1_prt_others"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_others_2_prt_sub1" for table "sto_cocomp_p1_1_prt_others"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_others_2_prt_sub2" for table "sto_cocomp_p1_1_prt_others"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_others_2_prt_sub3" for table "sto_cocomp_p1_1_prt_others"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_2_2_prt_subothers" for table "sto_cocomp_p1_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_2_2_prt_sub1" for table "sto_cocomp_p1_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_2_2_prt_sub2" for table "sto_cocomp_p1_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_2_2_prt_sub3" for table "sto_cocomp_p1_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_3_2_prt_subothers" for table "sto_cocomp_p1_1_prt_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_3_2_prt_sub1" for table "sto_cocomp_p1_1_prt_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_3_2_prt_sub2" for table "sto_cocomp_p1_1_prt_3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p1_1_prt_3_2_prt_sub3" for table "sto_cocomp_p1_1_prt_3"
CREATE TABLE
insert into sto_cocomp_p1 values(generate_series(1,5), generate_series(1,15), generate_series(1,10));
INSERT 0 30
select count(*) from sto_cocomp_p1;
 count 
-------
    30
(1 row)

--start_ignore
Drop table if exists sto_cocomp_p2;
DROP TABLE
--end_ignore
Create table sto_cocomp_p2 (col_int1 int, col_int2 int, col_text text) 
             WITH (appendonly=true, orientation=column) distributed randomly
             Partition by range(col_int1) (start(1)  end(8) every(2) ,
             COLUMN  col_int1 ENCODING (compresstype=rle_type),
             COLUMN col_int2 ENCODING (compresstype=quicklz),
             DEFAULT COLUMN ENCODING (compresstype=zlib));
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p2_1_prt_1" for table "sto_cocomp_p2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p2_1_prt_2" for table "sto_cocomp_p2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p2_1_prt_3" for table "sto_cocomp_p2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "sto_cocomp_p2_1_prt_4" for table "sto_cocomp_p2"
CREATE TABLE
Insert into sto_cocomp_p2 values(generate_series(1,7), 100, 'value to co comp part table');
INSERT 0 7
select * from sto_cocomp_p2 order by col_int1;
 col_int1 | col_int2 |          col_text           
----------+----------+-----------------------------
        1 |      100 | value to co comp part table
        2 |      100 | value to co comp part table
        3 |      100 | value to co comp part table
        4 |      100 | value to co comp part table
        5 |      100 | value to co comp part table
        6 |      100 | value to co comp part table
        7 |      100 | value to co comp part table
(7 rows)

