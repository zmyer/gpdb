-- Test to check the new syntax for compression encoding wont work on heap tables.
-- Storage_directive
Drop table if exists CO_01_heap_table_storage_directive_ZLIB_8192_8;
psql:/path/sql_file:1: NOTICE:  table "co_01_heap_table_storage_directive_zlib_8192_8" does not exist, skipping
DROP TABLE
CREATE TABLE CO_01_heap_table_storage_directive_ZLIB_8192_8 (
         a1 int ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a2 char(5) ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a3 text ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a4 timestamp ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a5 date ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192)
);
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Column_referenc column    
Drop table if exists CO_02_heap_table_col_ref_QUICKLZ_32768_1;        
psql:/path/sql_file:1: NOTICE:  table "co_02_heap_table_col_ref_quicklz_32768_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_02_heap_table_col_ref_QUICKLZ_32768_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date, COLUMN a1 ENCODING (compresstype=quicklz,compresslevel=1,blocksize=32768)
);         
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Column_reference default    
Drop table if exists CO_03_heap_table_col_ref_QUICKLZ_8192_1;        
psql:/path/sql_file:1: NOTICE:  table "co_03_heap_table_col_ref_quicklz_8192_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_03_heap_table_col_ref_QUICKLZ_8192_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date, DEFAULT COLUMN ENCODING (compresstype=QUICKLZ,compresslevel=1,blocksize=8192)
); 
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Storage_directive and Column_reference
Drop table if exists CO_04_heap_table_col_ref_ZLIB_8192_1;
psql:/path/sql_file:1: NOTICE:  table "co_04_heap_table_col_ref_zlib_8192_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_04_heap_table_col_ref_ZLIB_8192_1 
        (a1 int  ENCODING (compresstype=ZLIB,compresslevel=1,blocksize=8192),a2 char(5),a3 text,a4 timestamp ,a5 date, COLUMN a3 ENCODING (compresstype=zlib,compresslevel=9,blocksize=32768)
);   
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Column_reference at partition level
Drop table if exists CO_05_heap_table_col_ref_ZLIB_8192_1;
psql:/path/sql_file:1: NOTICE:  table "co_05_heap_table_col_ref_zlib_8192_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_05_heap_table_col_ref_ZLIB_8192_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date) Partition by range(a1) (start(1) end(1000) every(500),  COLUMN a1 ENCODING (compresstype=zlib,compresslevel=4,blocksize=32768));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_05_heap_table_col_ref_zlib_8192_1_1_prt_1" for table "co_05_heap_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_05_heap_table_col_ref_zlib_8192_1_1_prt_2" for table "co_05_heap_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented partitioned tables
-- Column reference at sub partition level
Drop table if exists CO_06_heap_table_col_ref_zlib_8192_1;
psql:/path/sql_file:1: NOTICE:  table "co_06_heap_table_col_ref_zlib_8192_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_06_heap_table_col_ref_zlib_8192_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date)  
       Partition by range(a1) Subpartition by list(a2) subpartition template 
        ( subpartition part1 values('M') ,
          subpartition part2 values('F') , COLUMN a2 ENCODING (compresstype=quicklz,compresslevel=1,blocksize=32768)) 
        (start(1) end(1000) every(500));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_heap_table_col_ref_zlib_8192_1_1_prt_1" for table "co_06_heap_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_heap_table_col_ref_zlib_8192_1_1_prt_2" for table "co_06_heap_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_heap_table_col_ref_zlib_8192_1_1_prt_1_2_prt_part1" for table "co_06_heap_table_col_ref_zlib_8192_1_1_prt_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_heap_table_col_ref_zlib_8192_1_1_prt_1_2_prt_part2" for table "co_06_heap_table_col_ref_zlib_8192_1_1_prt_1"
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented partitioned tables
-- Alter a heap table to add a column with encoding
Drop table if exists heap_table_alter_col;        
DROP TABLE
CREATE TABLE heap_table_alter_col 
        (a1 int,a2 char(5) ,a3 date );
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
Alter table heap_table_alter_col add column a4 text default 'new' ENCODING (compresstype=quicklz,compresslevel=1,blocksize=32768);
psql:/path/sql_file:1: ERROR:  ENCODING clause supplied for table that is not column oriented
--Alter type to have encoding, Add a column with this type to an ao table
Alter type text set default encoding (compresstype=quicklz,compresslevel=1,blocksize=32768);
ALTER TYPE
Alter table heap_table_alter_col add column a5 text default 'new' ;
ALTER TABLE
\d+ heap_table_alter_col
                 Table "public.heap_table_alter_col"
 Column |     Type     |      Modifiers      | Storage  | Description 
--------+--------------+---------------------+----------+-------------
 a1     | integer      |                     | plain    | 
 a2     | character(5) |                     | extended | 
 a3     | date         |                     | plain    | 
 a5     | text         | default 'new'::text | extended | 
Has OIDs: no
Distributed by: (a1)

--Alter type back to normal
Alter type text set default encoding (compresstype=none,compresslevel=0,blocksize=32768);
ALTER TYPE
-- Test to check the new syntax for compression encoding wont work on AO tables.
-- Storage_directive
Drop table if exists CO_01_ao_table_storage_directive_ZLIB_8192_8;
psql:/path/sql_file:1: NOTICE:  table "co_01_ao_table_storage_directive_zlib_8192_8" does not exist, skipping
DROP TABLE
CREATE TABLE CO_01_ao_table_storage_directive_ZLIB_8192_8 (
         a1 int ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a2 char(5) ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a3 text ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a4 timestamp ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192),
         a5 date ENCODING (compresstype=ZLIB,compresslevel=8,blocksize=8192)
);
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Column_reference column    
Drop table if exists CO_02_ao_table_col_ref_QUICKLZ_32768_1;         
psql:/path/sql_file:1: NOTICE:  table "co_02_ao_table_col_ref_quicklz_32768_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_02_ao_table_col_ref_QUICKLZ_32768_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date, COLUMN a1 ENCODING (compresstype=quicklz,compresslevel=1,blocksize=32768)
) with (appendonly=true);         
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Column_reference default    
Drop table if exists CO_03_ao_table_col_ref_QUICKLZ_32768_1;        
psql:/path/sql_file:1: NOTICE:  table "co_03_ao_table_col_ref_quicklz_32768_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_03_ao_table_col_ref_QUICKLZ_32768_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date, DEFAULT COLUMN ENCODING (compresstype=QUICKLZ,compresslevel=1,blocksize=32768)
)  with (appendonly=true); 
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Storage_directive and Column_reference
Drop table if exists CO_04_ao_table_str_dir_col_ref_ZLIB_8192_1;
psql:/path/sql_file:1: NOTICE:  table "co_04_ao_table_str_dir_col_ref_zlib_8192_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_04_ao_table_str_dir_col_ref_ZLIB_8192_1 
        (a1 int  ENCODING (compresstype=ZLIB,compresslevel=1,blocksize=8192),a2 char(5),a3 text,a4 timestamp ,a5 date, COLUMN a3 ENCODING (compresstype=zlib,compresslevel=9,blocksize=32768)
)  with (appendonly=true);   
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented tables
-- Column_reference at partition level
Drop table if exists CO_05_ao_table_col_ref_ZLIB_8192_1;
psql:/path/sql_file:1: NOTICE:  table "co_05_ao_table_col_ref_zlib_8192_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_05_ao_table_col_ref_ZLIB_8192_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date)  with (appendonly=true) Partition by range(a1) (start(1) end(1000) every(500),  COLUMN a1 ENCODING (compresstype=zlib,compresslevel=1,blocksize=32768));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_05_ao_table_col_ref_zlib_8192_1_1_prt_1" for table "co_05_ao_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_05_ao_table_col_ref_zlib_8192_1_1_prt_2" for table "co_05_ao_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented partitioned tables
-- Column reference at sub partition level
Drop table if exists CO_06_ao_table_col_ref_zlib_8192_1;
psql:/path/sql_file:1: NOTICE:  table "co_06_ao_table_col_ref_zlib_8192_1" does not exist, skipping
DROP TABLE
CREATE TABLE CO_06_ao_table_col_ref_zlib_8192_1 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date) with (appendonly=true) 
       Partition by range(a1) Subpartition by list(a2) subpartition template 
        ( subpartition part1 values('M') ,
          subpartition part2 values('F') , COLUMN a2 ENCODING (compresstype=quicklz,compresslevel=1,blocksize=32768)) 
        (start(1) end(1000) every(500));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_ao_table_col_ref_zlib_8192_1_1_prt_1" for table "co_06_ao_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_ao_table_col_ref_zlib_8192_1_1_prt_2" for table "co_06_ao_table_col_ref_zlib_8192_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_ao_table_col_ref_zlib_8192_1_1_prt_1_2_prt_part1" for table "co_06_ao_table_col_ref_zlib_8192_1_1_prt_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "co_06_ao_table_col_ref_zlib_8192_1_1_prt_1_2_prt_part2" for table "co_06_ao_table_col_ref_zlib_8192_1_1_prt_1"
psql:/path/sql_file:1: ERROR:  ENCODING clause only supported with column oriented partitioned tables
-- Alter an ao table to add a column with encoding
Drop table if exists aop_table_alter_col;        
psql:/path/sql_file:1: NOTICE:  table "aop_table_alter_col" does not exist, skipping
DROP TABLE
CREATE TABLE heap_table_alter_col 
        (a1 int,a2 char(5),a3 text ) with (appendonly=true) ;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: ERROR:  relation "heap_table_alter_col" already exists
Alter table ao_table_alter_col add column a6 int default 7 ENCODING (compresstype=quicklz,compresslevel=1,blocksize=32768);
psql:/path/sql_file:1: ERROR:  relation "ao_table_alter_col" does not exist
--Alter type to have encoding, Add a column with this type to an ao table
Alter type text set default encoding (compresstype=quicklz,compresslevel=1,blocksize=32768);
ALTER TYPE
Alter table ao_table_alter_col add column a7 text default 'new' ;
psql:/path/sql_file:1: ERROR:  relation "ao_table_alter_col" does not exist
\d+ ao_table_alter_col
Did not find any relation named "ao_table_alter_col".
--Alter type back to normal
Alter type text set default encoding (compresstype=none,compresslevel=0,blocksize=32768);
ALTER TYPE
-- Inheritance: The INHERITS clause is not allowed in a table that contains a storage_directive or a column_reference_storage_directive
--Encoding at storage_directive level
Drop table if exists child_tb1;
psql:/path/sql_file:1: NOTICE:  table "child_tb1" does not exist, skipping
DROP TABLE
Drop table if exists parent_tb1 cascade;
DROP TABLE
Create table parent_tb1 (a1 int ENCODING (compresstype=zlib,compresslevel=9,blocksize=32768),a2 char(5),a3 text,a4 timestamp ,a5 date)  with (appendonly=true,orientation=column) distributed by (a1);
CREATE TABLE
Create table child_tb1 (c1 int, c2 char encoding(compresstype=quicklz)) inherits(parent_tb1) with (appendonly = true, orientation = column);
psql:/path/sql_file:1: ERROR:  INHERITS clause cannot be used with column oriented tables
--Encoding at column_reference level
Drop table if exists child_tb2;
psql:/path/sql_file:1: NOTICE:  table "child_tb2" does not exist, skipping
DROP TABLE
Drop table if exists parent_tb2 cascade;
DROP TABLE
Create table parent_tb2 (a1 int ,a2 char(5),a3 text,a4 timestamp ,a5 date, column a1 ENCODING (compresstype=zlib,compresslevel=9,blocksize=32768))  with (appendonly=true,orientation=column) distributed by (a1);
CREATE TABLE
Create table child_tb2 (c1 int, c2 char, column c2 encoding(compresstype=quicklz)) inherits(parent_tb2) with (appendonly = true, orientation = column);
psql:/path/sql_file:1: ERROR:  INHERITS clause cannot be used with column oriented tables
--parent table with no compression attributes
Drop table if exists child_tb3;
psql:/path/sql_file:1: NOTICE:  table "child_tb3" does not exist, skipping
DROP TABLE
Drop table if exists parent_tb3 cascade;
DROP TABLE
Create table parent_tb3 (a1 int ,a2 char(5),a3 text,a4 timestamp ,a5 date)  with (appendonly=true,orientation=column) distributed by (a1);
CREATE TABLE
Create table child_tb3 (c1 int, c2 char, column c2 encoding(compresstype=quicklz)) inherits(parent_tb2) with (appendonly = true, orientation = column);
psql:/path/sql_file:1: ERROR:  INHERITS clause cannot be used with column oriented tables
--Child table with no compression attributes
Drop table if exists child_tb4;
psql:/path/sql_file:1: NOTICE:  table "child_tb4" does not exist, skipping
DROP TABLE
Drop table if exists parent_tb4 cascade;
DROP TABLE
Create table parent_tb4 (a1 int ,a2 char(5),a3 text,a4 timestamp ,a5 date, column a1 ENCODING (compresstype=zlib,compresslevel=9,blocksize=32768))  with (appendonly=true,orientation=column) distributed by (a1);
CREATE TABLE
Create table child_tb4 (c1 int, c2 char) inherits(parent_tb2) with (appendonly = true, orientation = column);
psql:/path/sql_file:1: ERROR:  INHERITS clause cannot be used with column oriented tables
\d+ child_tb4
Did not find any relation named "child_tb4".
--Like clause :The storage_direcitve and column_reference_storage_directive will be ignored by a table created using the LIKE clause
--Storage_directive
Drop table if exists child_like1;
DROP TABLE
Drop table if exists parent_like1 cascade;
DROP TABLE
Create table parent_like1 (a1 int ENCODING (compresstype=zlib,compresslevel=9,blocksize=32768),a2 char(5),a3  date)  with (appendonly=true,orientation=column) distributed by (a1);
CREATE TABLE
Create table child_like1 (like parent_like1) with (appendonly = true, orientation = column);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
\d+ parent_like1
                                Append-Only Columnar Table "public.parent_like1"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | zlib             | 9                 | 32768      | 
 a2     | character(5) |           | extended | none             | 0                 | 32768      | 
 a3     | date         |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

\d+ child_like1
                                Append-Only Columnar Table "public.child_like1"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | none             | 0                 | 32768      | 
 a2     | character(5) |           | extended | none             | 0                 | 32768      | 
 a3     | date         |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

--column_reference
Drop table if exists child_like2;
DROP TABLE
Drop table if exists parent_like2 cascade;
DROP TABLE
Create table parent_like2 (a1 int ,a2 char(5),a3  date, column a1 ENCODING (compresstype=zlib,compresslevel=9,blocksize=32768))  with (appendonly=true,orientation=column) distributed by (a1);
CREATE TABLE
Create table child_like2  (like parent_like2) with (appendonly = true, orientation = column);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
\d+ parent_like2
                                Append-Only Columnar Table "public.parent_like2"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | zlib             | 9                 | 32768      | 
 a2     | character(5) |           | extended | none             | 0                 | 32768      | 
 a3     | date         |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

\d+ child_like2
                                Append-Only Columnar Table "public.child_like2"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | none             | 0                 | 32768      | 
 a2     | character(5) |           | extended | none             | 0                 | 32768      | 
 a3     | date         |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

--column reference at partition level
Drop table if exists child_like3;
DROP TABLE
Drop table if exists parent_like3 cascade;
DROP TABLE
CREATE TABLE parent_like3 
        (a1 int,a2 char(5),a3 date)  with (appendonly=true,orientation=column) Partition by range(a1) (start(1) end(1000) every(500),  COLUMN a1 ENCODING (compresstype=zlib,compresslevel=1,blocksize=32768));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like3_1_prt_1" for table "parent_like3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like3_1_prt_2" for table "parent_like3"
CREATE TABLE
Create table child_like3  (like parent_like3) with (appendonly = true, orientation = column) Partition by range(a1) (start(1) end(1000) every(500));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like3_1_prt_1" for table "child_like3"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like3_1_prt_2" for table "child_like3"
CREATE TABLE
\d+ parent_like3_1_prt_1
                            Append-Only Columnar Table "public.parent_like3_1_prt_1"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | zlib             | 1                 | 32768      | 
 a2     | character(5) |           | extended | none             | 0                 | 32768      | 
 a3     | date         |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Check constraints:
    "parent_like3_1_prt_1_check" CHECK (a1 >= 1 AND a1 < 501)
Inherits: parent_like3
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

\d+ child_like3_1_prt_1
                            Append-Only Columnar Table "public.child_like3_1_prt_1"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | none             | 0                 | 32768      | 
 a2     | character(5) |           | extended | none             | 0                 | 32768      | 
 a3     | date         |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Check constraints:
    "child_like3_1_prt_1_check" CHECK (a1 >= 1 AND a1 < 501)
Inherits: child_like3
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

--column reference at subpartition level
Drop table if exists child_like4;
DROP TABLE
Drop table if exists parent_like4 cascade;
DROP TABLE
CREATE TABLE parent_like4 
        (a1 int,a2 char(5),a3 text,a4 timestamp ,a5 date) with (appendonly=true,orientation=column) 
       Partition by range(a1) Subpartition by list(a2) subpartition template 
        ( subpartition part1 values('M') ,
          subpartition part2 values('F') , COLUMN a2 ENCODING (compresstype=quicklz,compresslevel=1,blocksize=32768)) 
        (start(1) end(1000) every(500));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like4_1_prt_1" for table "parent_like4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like4_1_prt_2" for table "parent_like4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like4_1_prt_1_2_prt_part1" for table "parent_like4_1_prt_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like4_1_prt_1_2_prt_part2" for table "parent_like4_1_prt_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like4_1_prt_2_2_prt_part1" for table "parent_like4_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "parent_like4_1_prt_2_2_prt_part2" for table "parent_like4_1_prt_2"
CREATE TABLE
Create table child_like4  (like parent_like4) with (appendonly = true, orientation = column)
        Partition by range(a1) Subpartition by list(a2) subpartition template 
        ( subpartition part1 values('M') ,
          subpartition part2 values('F')) 
        (start(1) end(1000) every(500));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like4_1_prt_1" for table "child_like4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like4_1_prt_2" for table "child_like4"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like4_1_prt_1_2_prt_part1" for table "child_like4_1_prt_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like4_1_prt_1_2_prt_part2" for table "child_like4_1_prt_1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like4_1_prt_2_2_prt_part1" for table "child_like4_1_prt_2"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "child_like4_1_prt_2_2_prt_part2" for table "child_like4_1_prt_2"
CREATE TABLE
\d+ parent_like4_1_prt_1_2_prt_part1
                             Append-Only Columnar Table "public.parent_like4_1_prt_1_2_prt_part1"
 Column |            Type             | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+-----------------------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer                     |           | plain    | none             | 0                 | 32768      | 
 a2     | character(5)                |           | extended | quicklz          | 1                 | 32768      | 
 a3     | text                        |           | extended | none             | 0                 | 32768      | 
 a4     | timestamp without time zone |           | plain    | none             | 0                 | 32768      | 
 a5     | date                        |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Check constraints:
    "parent_like4_1_prt_1_2_prt_part1_check" CHECK (a2 = 'M    '::bpchar)
    "parent_like4_1_prt_1_check" CHECK (a1 >= 1 AND a1 < 501)
Inherits: parent_like4_1_prt_1
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

\d+ child_like4_1_prt_1_2_prt_part1
                              Append-Only Columnar Table "public.child_like4_1_prt_1_2_prt_part1"
 Column |            Type             | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+-----------------------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer                     |           | plain    | none             | 0                 | 32768      | 
 a2     | character(5)                |           | extended | none             | 0                 | 32768      | 
 a3     | text                        |           | extended | none             | 0                 | 32768      | 
 a4     | timestamp without time zone |           | plain    | none             | 0                 | 32768      | 
 a5     | date                        |           | plain    | none             | 0                 | 32768      | 
Checksum: f
Check constraints:
    "child_like4_1_prt_1_2_prt_part1_check" CHECK (a2 = 'M    '::bpchar)
    "child_like4_1_prt_1_check" CHECK (a1 >= 1 AND a1 < 501)
Inherits: child_like4_1_prt_1
Has OIDs: no
Options: appendonly=true, orientation=column
Distributed by: (a1)

--With caluse - should inherit  (this is not a negative -added for completion)
Drop table if exists child_like5;
DROP TABLE
Drop table if exists parent_like5 cascade;
DROP TABLE
Create table parent_like5 (a1 int ,a2 char(5),a3  date)  with (appendonly=true,orientation=column,compresstype=zlib,compresslevel=9,blocksize=32768) distributed by (a1);
CREATE TABLE
Insert into parent_like5 values(generate_series(1,100),'asd','2011-02-11');
INSERT 0 100
Create table child_like5  (like parent_like5) with (appendonly = true, orientation = column,compresstype=quicklz,compresslevel=1);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
\d+ parent_like5
                                Append-Only Columnar Table "public.parent_like5"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | zlib             | 9                 | 32768      | 
 a2     | character(5) |           | extended | zlib             | 9                 | 32768      | 
 a3     | date         |           | plain    | zlib             | 9                 | 32768      | 
Checksum: f
Has OIDs: no
Options: appendonly=true, orientation=column, compresstype=zlib, compresslevel=9, blocksize=32768
Distributed by: (a1)

\d+ child_like5
                                Append-Only Columnar Table "public.child_like5"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | quicklz          | 1                 | 32768      | 
 a2     | character(5) |           | extended | quicklz          | 1                 | 32768      | 
 a3     | date         |           | plain    | quicklz          | 1                 | 32768      | 
Checksum: f
Has OIDs: no
Options: appendonly=true, orientation=column, compresstype=quicklz, compresslevel=1
Distributed by: (a1)

-- CTAS table with compression
Drop table if exists ctas_neg;
DROP TABLE
create table ctas_neg with (appendonly=true,orientation=column,compresstype=quicklz,compresslevel=1) as select * from parent_like5;
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT 100
\d+ ctas_neg
                                  Append-Only Columnar Table "public.ctas_neg"
 Column |     Type     | Modifiers | Storage  | Compression Type | Compression Level | Block Size | Description 
--------+--------------+-----------+----------+------------------+-------------------+------------+-------------
 a1     | integer      |           | plain    | quicklz          | 1                 | 32768      | 
 a2     | character(5) |           | extended | quicklz          | 1                 | 32768      | 
 a3     | date         |           | plain    | quicklz          | 1                 | 32768      | 
Checksum: f
Has OIDs: no
Options: appendonly=true, orientation=column, compresstype=quicklz, compresslevel=1
Distributed randomly

