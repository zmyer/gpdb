set optimizer_disable_missing_stats_collection = on;
-- MPP-23647 Create a paritioned appendonly table, let its age
-- increase during the test.  We will vacuum it at the end of the
-- test.
create table ao_age_test (i int, b bool, c char, d date)
with (appendonly=true)
distributed by (i)
partition by list (b)
(partition b1 values ('f'),
 partition b2 values ('t')
);
NOTICE:  CREATE TABLE will create partition "ao_age_test_1_prt_b1" for table "ao_age_test"
NOTICE:  CREATE TABLE will create partition "ao_age_test_1_prt_b2" for table "ao_age_test"
insert into ao_age_test select i, (i%123 > 50), (i/11) || '',
'2008/10/12'::date + (i || ' days')::interval
from generate_series(0, 99) i;
create index ao_age_test_i on ao_age_test(i);
NOTICE:  building index for child partition "ao_age_test_1_prt_b1"
NOTICE:  building index for child partition "ao_age_test_1_prt_b2"
-- MPP-23647 Create a empty table with no segments, let its age
-- increase during the test.  We will vacuum it at the end of the
-- test.
create table ao_empty (a int, b int, c varchar)
with (appendonly=true) distributed by (a);
-- MPP-23647 Empty table with non-zero segments but each segment has
-- tupcount = 0.  Also cover column oriented table.
create table aocs_empty (a int, b int, c varchar)
with (appendonly=true, orientation=column) distributed by (a);
insert into aocs_empty select i, i, i::text from generate_series(1,20)i;
-- This update should create a new appendonly segment.
update aocs_empty set c = 'updated' where a > 9;
delete from aocs_empty;
-- Make both the appendonly segments for this table empty.  Let the
-- age of this table grow during the test.  We will vacuum it again at
-- the end.
vacuum aocs_empty;
-- MPP-23647 Ensure pg_class.relhasindex for an empty appendonly table
-- is correctly interpreted by vacuum.
create index ao_empty_a on ao_empty(a);
create index aocs_empty_a on aocs_empty(a);
\d ao_empty
  Append-Only Table "public.ao_empty"
 Column |       Type        | Modifiers 
--------+-------------------+-----------
 a      | integer           | 
 b      | integer           | 
 c      | character varying | 
Compression Type: None
Compression Level: 0
Block Size: 32768
Checksum: t
Indexes:
    "ao_empty_a" btree (a)
Distributed by: (a)

\d aocs_empty
Append-Only Columnar Table "public.aocs_empty"
 Column |       Type        | Modifiers 
--------+-------------------+-----------
 a      | integer           | 
 b      | integer           | 
 c      | character varying | 
Checksum: t
Indexes:
    "aocs_empty_a" btree (a)
Distributed by: (a)

-- vacuum/analyze a table with indexes
create table vactst (i int, b bool, c char, d date);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into vactst select i, (i%123 > 50), (i/11) || '', '2008/10/12'::date + (i || ' days')::interval
from generate_series(0, 99) i;
create index vactst_c on vactst (c);
vacuum vactst;
analyze vactst;
create index vactst_b on vactst using bitmap(b);
vacuum vactst;
analyze vactst;
vacuum analyze vactst;
drop table vactst;
create table vactst (i int, b bool, c char, d date);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into vactst select i, (i%123 > 50), (i/11) || '', '2008/10/12'::date + (i || ' days')::interval
from generate_series(0, 99) i;
create index vactst_c on vactst (c);
create index vactst_b on vactst using bitmap(b);
vacuum analyze vactst;
drop table vactst;
-- vacuum analyze a table that has dropped a column
create table vactst (i int, b bool, c char, d date);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into vactst select i, (i%123 > 50), (i/11) || '', '2008/10/12'::date + (i || ' days')::interval
from generate_series(0, 99) i;
alter table vactst drop column b;
vacuum analyze vactst;
alter table vactst drop column i;
NOTICE:  Dropping a column that is part of the distribution policy forces a NULL distribution policy
vacuum analyze vactst;
drop table vactst;
-- vacuum analyze a table whose index has pg_statistic stats
create table vactst (i int, b bool, c char, d date);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into vactst select i, (i%123 > 50), (i/11) || '', '2008/10/12'::date + (i || ' days')::interval
from generate_series(0, 99) i;
create index vactst_c on vactst (upper(c));
vacuum analyze vactst;
drop table vactst;
-- vacuum analyze an AO table
create table vactst (i int, b bool, c char, d date) with (appendonly=true);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into vactst select i, (i%123 > 50), (i/11) || '', '2008/10/12'::date + (i || ' days')::interval
from generate_series(0, 99) i;
vacuum analyze vactst;
drop table vactst;
-- vacuum analyze a partition table
create table vactst (i int, b bool, c char, d date)
distributed by (i)
partition by list (b)
(partition b1 values ('f'),
 partition b2 values ('t')
);
NOTICE:  CREATE TABLE will create partition "vactst_1_prt_b1" for table "vactst"
NOTICE:  CREATE TABLE will create partition "vactst_1_prt_b2" for table "vactst"
insert into vactst select i, (i%123 > 50), (i/11) || '', '2008/10/12'::date + (i || ' days')::interval
from generate_series(0, 99) i;
vacuum analyze vactst;
drop table vactst;
-- MPP-23647 Vacuum appendonly paritioned table ao_age_test, check
-- that its age is correctly updated along with its partitions.
set vacuum_freeze_min_age=20;
show vacuum_freeze_min_age;
 vacuum_freeze_min_age 
-----------------------
 20
(1 row)

select relname from pg_class where relname like 'ao_age_test%'
order by relname;
        relname         
------------------------
 ao_age_test
 ao_age_test_1_prt_b1
 ao_age_test_1_prt_b2
 ao_age_test_i
 ao_age_test_i_1_prt_b1
 ao_age_test_i_1_prt_b2
(6 rows)

vacuum ao_age_test;
-- Note: in checking age() below, be mindful of not checking absolute
-- age value in expected output so as to make the test reliable.
-- Assuming no other activity, vacuum needs one transaction ID for
-- each of the three tables.
select relname, 0 < age(relfrozenxid) as age_positive,
       age(relfrozenxid) < 100 as age_within_limit
from pg_class
where relname like 'ao_age_test%' and relkind = 'r' order by 1;
       relname        | age_positive | age_within_limit 
----------------------+--------------+------------------
 ao_age_test          | t            | t
 ao_age_test_1_prt_b1 | t            | t
 ao_age_test_1_prt_b2 | t            | t
(3 rows)

-- Vacuum the other two empty tables and verify their age is updated
-- correctly.
vacuum ao_empty;
vacuum aocs_empty;
select relname, 0 < age(relfrozenxid) as age_positive,
       age(relfrozenxid) < 100 as age_within_limit
from pg_class
where relname in ('ao_empty', 'aocs_empty') order by 1;
  relname   | age_positive | age_within_limit 
------------+--------------+------------------
 ao_empty   | t            | t
 aocs_empty | t            | t
(2 rows)

select * from ao_empty;
 a | b | c 
---+---+---
(0 rows)

select * from aocs_empty;
 a | b | c 
---+---+---
(0 rows)

-- Verify that age of appendonly auxiliary tables is update by vacuum.
select 0 < age(relfrozenxid) as age_positive,
       age(relfrozenxid) < 100 as age_within_limit
from pg_class c, pg_appendonly a
where c.oid = a.segrelid and
	   (a.relid = 'ao_empty'::regclass or
	    a.relid = 'aocs_empty'::regclass);
 age_positive | age_within_limit 
--------------+------------------
 t            | t
 t            | t
(2 rows)

-- Verify that age of toast table is updated by vacuum.
select 0 < age(relfrozenxid) as age_positive,
       age(relfrozenxid) < 100 as age_within_limit
from pg_class where oid in (select reltoastrelid from pg_class
       where relname = 'ao_empty' or relname = 'aocs_empty');
 age_positive | age_within_limit 
--------------+------------------
 t            | t
 t            | t
(2 rows)

-- Verify that index is displayed by \d after vacuum.
\d ao_empty;
  Append-Only Table "public.ao_empty"
 Column |       Type        | Modifiers 
--------+-------------------+-----------
 a      | integer           | 
 b      | integer           | 
 c      | character varying | 
Compression Type: None
Compression Level: 0
Block Size: 32768
Checksum: t
Indexes:
    "ao_empty_a" btree (a)
Distributed by: (a)

\d aocs_empty;
Append-Only Columnar Table "public.aocs_empty"
 Column |       Type        | Modifiers 
--------+-------------------+-----------
 a      | integer           | 
 b      | integer           | 
 c      | character varying | 
Checksum: t
Indexes:
    "aocs_empty_a" btree (a)
Distributed by: (a)

-- Ensure that reindex after vacuum works fine.
alter table ao_age_test set with (reorganize='true')
distributed by (c);
-- Force an index scan and verify index lookup work fine after vacuum
-- and reorganize.
set enable_seqscan = false;
select * from ao_age_test where i in (1, 2, 11, 13, 15)
order by i;
 i  | b | c |     d      
----+---+---+------------
  1 | f | 0 | 10-13-2008
  2 | f | 0 | 10-14-2008
 11 | f | 1 | 10-23-2008
 13 | f | 1 | 10-25-2008
 15 | f | 1 | 10-27-2008
(5 rows)

drop table ao_age_test;
drop table ao_empty;
drop table aocs_empty;
-- Create some dead tuples, and test VACUUM FULL on the AO/CO auxiliary
-- relations. (There used to be a bug where it didn't do anything, and you got a
-- NOTICE saying a transaction is in progress instead.)
create table co_t1(a int, b int) with (appendonly=true, orientation=column) distributed by(a);
insert into co_t1 select i, i from generate_series(1, 10000) i;
update co_t1 set b = b + 1;
vacuum full co_t1;
drop table co_t1;
create table ao_t1(a int, b int) with (appendonly=true) distributed by(a);
insert into ao_t1 select i, i from generate_series(1, 10000) i;
update ao_t1 set b = b + 1;
vacuum full ao_t1;
drop table ao_t1;
vacuum full gp_persistent_relation_node;
WARNING:  skipping "gp_persistent_relation_node" --- cannot vacuum indexes, views, external tables, or special system tables
