--
-- leastsquares.sql - test for ordinary least squares regression aggregates:
--   * regr_count
--   * regr_avgx
--   * regr_avgy
--   * regr_sxx
--   * regr_sxy
--   * regr_syy
--   * regr_intercept
--   * regr_slope
--   * regr_r2
--   * mregr_coef
--   * mregr_r2
--   * mregr_tstats
--   * mregr_pvalues
-- start_matchsubs
-- m|Failed on request of size \d+ bytes|
-- s|Failed on request of size \d+ bytes|Failed on request of size BIGALLOC bytes|
--
-- m/(ERROR|WARNING|CONTEXT|NOTICE):.*\(float\.c\:\d+\)/
-- s/\(float\.c:\d+\)//
--
-- end_matchsubs
CREATE TABLE weibull
(
	id INTEGER NOT NULL,
	x1 DOUBLE PRECISION,
	x2 DOUBLE PRECISION,
	y DOUBLE PRECISION
) DISTRIBUTED BY (id);
COPY weibull (id, x1, x2, y) FROM stdin;
-- Testing of basic single linear regression code
-- start_equiv
select 
    regr_count(y, x1)::real as count,
    regr_avgx(y, x1)::real as avgx,
    regr_avgy(y, x1)::real as avgy,
    regr_sxx(y, x1)::real as sxx,
    regr_sxy(y, x1)::real as sxy,
    regr_syy(y, x1)::real as syy,
    regr_intercept(y, x1)::real as intercept,
    regr_slope(y, x1)::real as slope,
    regr_r2(y, x1)::real as r2
from weibull;
 count |  avgx   | avgy  |   sxx   |   sxy   |   syy   | intercept |  slope  |    r2    
-------+---------+-------+---------+---------+---------+-----------+---------+----------
    17 | 55.3529 | 288.4 | 2182.86 | 5230.02 | 13239.7 |   155.777 | 2.39595 | 0.946458
(1 row)

select
    count(y)::real as count,
    avg(x1)::real as avgx,
    avg(y)::real as avgy,
    ((count(y) * sum(x1*x1) - sum(x1)^2)/count(y))::real as sxx,
    ((count(y) * sum(x1*y) - sum(x1)*sum(y))/count(y))::real as sxy,
    ((count(y) * sum(y*y) - sum(y)^2)/count(y))::real as sxy,
    ((sum(y)*sum(x1*x1) - sum(x1)*sum(x1*y))/(count(y) * sum(x1*x1) - sum(x1)^2))::real as intercept,
    ((count(y) * sum(x1*y) - sum(x1)*sum(y))/(count(y) * sum(x1*x1) - sum(x1)^2))::real as slope,
    ((count(y) * sum(x1*y) - sum(x1)*sum(y))^2/
        ((count(y) * sum(x1*x1) - sum(x1)^2) * (count(y) * sum(y*y) - sum(y)^2)))::real as r2
from weibull;
 count |  avgx   | avgy  |   sxx   |   sxy   |   sxy   | intercept |  slope  |    r2    
-------+---------+-------+---------+---------+---------+-----------+---------+----------
    17 | 55.3529 | 288.4 | 2182.86 | 5230.02 | 13239.7 |   155.777 | 2.39595 | 0.946458
(1 row)

-- end_equiv
-- Single linear and multivariate should match for a single independent variable
-- start_equiv
select 
    array[regr_intercept(y, x1), regr_slope(y, x1)]::real[] as coef,
    regr_r2(y,x1)::real as r2
from weibull;
       coef        |    r2    
-------------------+----------
 {155.777,2.39595} | 0.946458
(1 row)

select 
    mregr_coef(y, array[1,x1])::real[] as coef,
    mregr_r2(y, array[1,x1])::real as r2
from weibull;
       coef        |    r2    
-------------------+----------
 {155.777,2.39595} | 0.946458
(1 row)

-- end_equiv
-- start_equiv
select 
    array[regr_intercept(y, x2), regr_slope(y, x2)]::real[] as coef,
    regr_r2(y,x2)::real as r2
from weibull;
        coef        |    r2    
--------------------+----------
 {-449.025,23.8649} | 0.945513
(1 row)

select 
    mregr_coef(y, array[1, x2])::real[] as coef,
    mregr_r2(y, array[1, x2])::real as r2
from weibull;
        coef        |    r2    
--------------------+----------
 {-449.025,23.8649} | 0.945513
(1 row)

-- end_equiv
-- When there is a single element regr returns null, mregr still tries to give numbers.
-- start_equiv
select
    id,
    regr_intercept(y, x2)::real as intercept,
    regr_slope(y, x2)::real as slope,
    regr_r2(y,x1)::real as r2
from weibull
group by id
order by id;
 id | intercept | slope | r2 
----+-----------+-------+----
  1 |           |       |   
  2 |           |       |   
  3 |           |       |   
  4 |           |       |   
  5 |           |       |   
  6 |           |       |   
  7 |           |       |   
  8 |           |       |   
  9 |           |       |   
 10 |           |       |   
 11 |           |       |   
 12 |           |       |   
 13 |           |       |   
 14 |           |       |   
 15 |           |       |   
 16 |           |       |   
 17 |           |       |   
(17 rows)

select 
    id,
    regr_intercept(y, x2)::real as intercept,
    regr_slope(y, x2)::real as slope,
    regr_r2(y,x1)::real as r2
from gp_dist_random('weibull')
group by id
order by id;
 id | intercept | slope | r2 
----+-----------+-------+----
  1 |           |       |   
  2 |           |       |   
  3 |           |       |   
  4 |           |       |   
  5 |           |       |   
  6 |           |       |   
  7 |           |       |   
  8 |           |       |   
  9 |           |       |   
 10 |           |       |   
 11 |           |       |   
 12 |           |       |   
 13 |           |       |   
 14 |           |       |   
 15 |           |       |   
 16 |           |       |   
 17 |           |       |   
(17 rows)

select 
    id,
    (regr_intercept(y, x2) over (partition by id))::real as intercept,
    (regr_slope(y, x2) over (partition by id))::real as slope,
    (regr_r2(y,x1) over (partition by id))::real as r2
from weibull
order by id;
 id | intercept | slope | r2 
----+-----------+-------+----
  1 |           |       |   
  2 |           |       |   
  3 |           |       |   
  4 |           |       |   
  5 |           |       |   
  6 |           |       |   
  7 |           |       |   
  8 |           |       |   
  9 |           |       |   
 10 |           |       |   
 11 |           |       |   
 12 |           |       |   
 13 |           |       |   
 14 |           |       |   
 15 |           |       |   
 16 |           |       |   
 17 |           |       |   
(17 rows)

-- end_equiv
-- start_equiv
select 
    id,
    mregr_coef(y, array[1, x2])::real[] as coef,
    mregr_r2(y, array[1, x2])::real as r2
from weibull
group by id
order by id;
 id |        coef        | r2 
----+--------------------+----
  1 | {0.296411,8.62555} |  1
  2 | {0.292383,8.56681} |  1
  3 | {0.284993,8.40729} |  1
  4 | {0.302914,8.99654} |  1
  5 | {0.305025,9.12023} |  1
  6 | {0.300841,9.11548} |  1
  7 | {0.290255,8.85278} |  1
  8 | {0.291365,8.94491} |  1
  9 | {0.300114,9.2435}  |  1
 10 | {0.303408,9.37529} |  1
 11 | {0.299018,9.41908} |  1
 12 | {0.300729,9.5331}  |  1
 13 | {0.298937,9.53608} |  1
 14 | {0.301756,9.65619} |  1
 15 | {0.311903,10.0121} |  1
 16 | {0.312793,10.1658} |  1
 17 | {0.322131,10.5981} |  1
(17 rows)

select 
    id,
    mregr_coef(y, array[1, x2])::real[] as coef,
    mregr_r2(y, array[1, x2])::real as r2
from gp_dist_random('weibull')
group by id
order by id;
 id |        coef        | r2 
----+--------------------+----
  1 | {0.296411,8.62555} |  1
  2 | {0.292383,8.56681} |  1
  3 | {0.284993,8.40729} |  1
  4 | {0.302914,8.99654} |  1
  5 | {0.305025,9.12023} |  1
  6 | {0.300841,9.11548} |  1
  7 | {0.290255,8.85278} |  1
  8 | {0.291365,8.94491} |  1
  9 | {0.300114,9.2435}  |  1
 10 | {0.303408,9.37529} |  1
 11 | {0.299018,9.41908} |  1
 12 | {0.300729,9.5331}  |  1
 13 | {0.298937,9.53608} |  1
 14 | {0.301756,9.65619} |  1
 15 | {0.311903,10.0121} |  1
 16 | {0.312793,10.1658} |  1
 17 | {0.322131,10.5981} |  1
(17 rows)

select 
    id,
    (mregr_coef(y, array[1, x2]) over (partition by id))::real[] as coef,
    (mregr_r2(y, array[1, x2]) over (partition by id))::real as r2
from weibull
order by id;
 id |        coef        | r2 
----+--------------------+----
  1 | {0.296411,8.62555} |  1
  2 | {0.292383,8.56681} |  1
  3 | {0.284993,8.40729} |  1
  4 | {0.302914,8.99654} |  1
  5 | {0.305025,9.12023} |  1
  6 | {0.300841,9.11548} |  1
  7 | {0.290255,8.85278} |  1
  8 | {0.291365,8.94491} |  1
  9 | {0.300114,9.2435}  |  1
 10 | {0.303408,9.37529} |  1
 11 | {0.299018,9.41908} |  1
 12 | {0.300729,9.5331}  |  1
 13 | {0.298937,9.53608} |  1
 14 | {0.301756,9.65619} |  1
 15 | {0.311903,10.0121} |  1
 16 | {0.312793,10.1658} |  1
 17 | {0.322131,10.5981} |  1
(17 rows)

-- end_equiv
-- Test multivariate regression
select 
    mregr_coef(y, array[1, x1, x2])::real[] as coef,
    mregr_r2(y, array[1, x1, x2])::real as r2,
    mregr_tstats(y, array[1, x1, x2])::real[] as tstats,
    mregr_pvalues(y, array[1, x1, x2])::real[] as pvalues
from weibull;
            coef            |    r2    |          tstats           |             pvalues             
----------------------------+----------+---------------------------+---------------------------------
 {-153.512,1.23872,12.0824} | 0.968022 | {-1.52173,3.13926,3.0726} | {0.15034,0.00724458,0.00827039}
(1 row)

-- MPP-11680: numeric stability on low cardinality
/*
select 
    id,
    mregr_coef(y, array[1, x1, x2])::real[] as coef,
    mregr_r2(y, array[1, x1, x2])::real as r2,
    mregr_tstats(y, array[1, x1, x2])::real[] as tstats,
    mregr_pvalues(y, array[1, x1, x2])::real[] as pvalues
from weibull
group by id
order by id;
*/
-- MPP-14102: Crash in mregr_coef() when number of independent variables is too
-- large.
/* This test should be moved to CDBfast

-- The following does not immediately violate any hard constraints, but will
-- only fail during execution with an out-of-memory error
SELECT mregr_coef(y, x)
FROM (
    SELECT 1::FLOAT8 AS y,
    ARRAY( SELECT no::FLOAT8 FROM generate_series(1,8191) AS no ) AS x
) AS one_row_subquery;

*/
-- The following tries to allocate a transition-state array with
-- size > MaxAllocSize, so it immediately fails.
SELECT mregr_coef(y, x)
FROM (
    SELECT 1::FLOAT8 AS y,
    ARRAY( SELECT no::FLOAT8 FROM generate_series(1,65535) AS no ) AS x
) AS one_row_subquery;
ERROR:  number of independent variables is too large
-- MPP-13580: infinity in design matrix causes infinite loop
SELECT mregr_coef(y,array[x]) FROM (
    SELECT 10 AS y, 1 AS x
    UNION
    SELECT 20 AS y, 'infinity'::FLOAT8 AS x
) AS q;
ERROR:  design matrix is not finite
-- MPP-13582: dealing with less observations than variables
SELECT mregr_r2(y,x) FROM (
    SELECT array[1,0,0] AS x, 10 AS y
    UNION
    SELECT array[1,0,0], 20
) AS q;
 mregr_r2 
----------
        0
(1 row)

-- Accumulation/combination order shouldn't matter to the result.
-- start_equiv
select float8_regr_accum(float8_regr_accum(array[0,0,0,0,0,0], 1, 2),  2, 1);
 float8_regr_accum 
-------------------
 {2,3,5,3,5,4}
(1 row)

select float8_regr_accum(float8_regr_accum(array[0,0,0,0,0,0], 2, 1),  1, 2);
 float8_regr_accum 
-------------------
 {2,3,5,3,5,4}
(1 row)

select float8_regr_amalg(float8_regr_accum(array[0,0,0,0,0,0], 1, 2),
                         float8_regr_accum(array[0,0,0,0,0,0], 2, 1));
 float8_regr_amalg 
-------------------
 {2,3,5,3,5,4}
(1 row)

-- end_equiv
select float8_mregr_combine(array[2,1,2,3,4,5,6,7,8,9],array[2,1,2,3,4,5,6,7,8,9]);
    float8_mregr_combine    
----------------------------
 {2,2,4,6,8,10,12,14,16,18}
(1 row)

-- Component testing of the individual aggregate callback functions
--  * null handling
--  * malformed state
--  * check for invalid in-place updates of first parameter
select float8_regr_accum(null, 1, 2);
 float8_regr_accum 
-------------------
 
(1 row)

select float8_regr_accum(array[0,0,0,0,0,0], 1, null);
 float8_regr_accum 
-------------------
 
(1 row)

select float8_regr_accum(array[0,0,0,0,0,0], null, 2);
 float8_regr_accum 
-------------------
 
(1 row)

select float8_regr_amalg(array[0,0,0,0,0,0], null);
 float8_regr_amalg 
-------------------
 
(1 row)

select float8_regr_amalg(null, array[0,0,0,0,0,0]);
 float8_regr_amalg 
-------------------
 
(1 row)

select float8_regr_sxx(null);
 float8_regr_sxx 
-----------------
                
(1 row)

select float8_regr_sxx(array[0,0,0,0,0,0]);
 float8_regr_sxx 
-----------------
                
(1 row)

select float8_regr_sxx(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_sxx 
-----------------
               0
(1 row)

select float8_regr_syy(null);
 float8_regr_syy 
-----------------
                
(1 row)

select float8_regr_syy(array[0,0,0,0,0,0]);
 float8_regr_syy 
-----------------
                
(1 row)

select float8_regr_syy(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_syy 
-----------------
               0
(1 row)

select float8_regr_sxy(null);
 float8_regr_sxy 
-----------------
                
(1 row)

select float8_regr_sxy(array[0,0,0,0,0,0]);
 float8_regr_sxy 
-----------------
                
(1 row)

select float8_regr_sxy(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_sxy 
-----------------
               0
(1 row)

select float8_regr_avgx(null);
 float8_regr_avgx 
------------------
                 
(1 row)

select float8_regr_avgx(array[0,0,0,0,0,0]);
 float8_regr_avgx 
------------------
                 
(1 row)

select float8_regr_avgx(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_avgx 
------------------
                2
(1 row)

select float8_regr_avgy(null);
 float8_regr_avgy 
------------------
                 
(1 row)

select float8_regr_avgy(array[0,0,0,0,0,0]);
 float8_regr_avgy 
------------------
                 
(1 row)

select float8_regr_avgy(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_avgy 
------------------
                1
(1 row)

select float8_regr_r2(null);
 float8_regr_r2 
----------------
               
(1 row)

select float8_regr_r2(array[0,0,0,0,0,0]);
 float8_regr_r2 
----------------
               
(1 row)

select float8_regr_r2(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_r2 
----------------
               
(1 row)

select float8_regr_slope(null);
 float8_regr_slope 
-------------------
                  
(1 row)

select float8_regr_slope(array[0,0,0,0,0,0]);
 float8_regr_slope 
-------------------
                  
(1 row)

select float8_regr_slope(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_slope 
-------------------
                  
(1 row)

select float8_regr_intercept(null);
 float8_regr_intercept 
-----------------------
                      
(1 row)

select float8_regr_intercept(array[0,0,0,0,0,0]);
 float8_regr_intercept 
-----------------------
                      
(1 row)

select float8_regr_intercept(float8_regr_accum(array[0,0,0,0,0,0], 1, 2));
 float8_regr_intercept 
-----------------------
                      
(1 row)

select float8_mregr_accum(null, 1, array[1,2]);
 float8_mregr_accum 
--------------------
 
(1 row)

select float8_mregr_accum('{}'::float8[], null, array[1,2]);
 float8_mregr_accum 
--------------------
 
(1 row)

select float8_mregr_accum('{}'::float8[], 1, null);
 float8_mregr_accum 
--------------------
 
(1 row)

select float8_mregr_combine(null, '{}');
 float8_mregr_combine 
----------------------
 
(1 row)

select float8_mregr_combine('{}', null);
 float8_mregr_combine 
----------------------
 
(1 row)

select float8_mregr_combine('{0}'::float8[], '{0}'::float8[]);
 float8_mregr_combine 
----------------------
 {0}
(1 row)

select float8_regr_accum('{}'::float8[], 1, 2);
ERROR:  float8_regr_accum: expected 6-element float8 array
select float8_regr_amalg('{}'::float8[], array[0,0,0,0,0,0]);
ERROR:  float8_regr_amalg: expected 6-element float8 array
select float8_regr_amalg(array[0,0,0,0,0,0], '{}'::float8[]);
ERROR:  float8_regr_amalg: expected 6-element float8 array
select float8_regr_amalg(array[null,0,0,0,0,0], '{}'::float8[]);
ERROR:  float8_regr_amalg: expected 6-element float8 array
select float8_regr_sxx('{}'::float8[]);
ERROR:  float8_regr_sxx: expected 6-element float8 array
select float8_regr_syy('{}'::float8[]);
ERROR:  float8_regr_syy: expected 6-element float8 array
select float8_regr_sxy('{}'::float8[]);
ERROR:  float8_regr_sxy: expected 6-element float8 array
select float8_regr_avgx('{}'::float8[]);
ERROR:  float8_regr_avgx: expected 6-element float8 array
select float8_regr_avgy('{}'::float8[]);
ERROR:  float8_regr_avgy: expected 6-element float8 array
select float8_regr_slope('{}'::float8[]);
ERROR:  float8_regr_slope: expected 6-element float8 array
select float8_regr_r2('{}'::float8[]);
ERROR:  float8_regr_r2: expected 6-element float8 array
select float8_regr_intercept('{}'::float8[]);
ERROR:  float8_regr_intercept: expected 6-element float8 array
select float8_mregr_accum('{}'::float8[], 1, array[1,null]);
ERROR:  transition function "float8_mregr_accum(double precision[],double precision,double precision[])" called with invalid parameters
select float8_mregr_accum('{}'::float8[], 1, array[1,2]);
ERROR:  transition function "float8_mregr_accum(double precision[],double precision,double precision[])" called with invalid parameters
select float8_mregr_accum('{0}'::float8[], 1, array[1,2]);
ERROR:  transition function "float8_mregr_accum(double precision[],double precision,double precision[])" not called from aggregate
select float8_mregr_combine('{}'::float8[], '{}'::float8[]);
ERROR:  preliminary segment-level calculation function "float8_mregr_combine(double precision[],double precision[])" called with invalid parameters
select float8_mregr_combine(array[1,null,0,0,0,0,0], array[[1,0,0,0,0,0,0]]);
ERROR:  preliminary segment-level calculation function "float8_mregr_combine(double precision[],double precision[])" called with invalid parameters
select float8_mregr_combine(array[1,0,0,0,0,0,0], array[[1,0,0,0,0,0,0]]);
ERROR:  preliminary segment-level calculation function "float8_mregr_combine(double precision[],double precision[])" called with invalid parameters
select float8_mregr_combine(array[1,0,0,0,0,0,0], array[1,0,0,0,0,0,0]);
ERROR:  preliminary segment-level calculation function "float8_mregr_combine(double precision[],double precision[])" called with invalid parameters
select float8_mregr_combine(array[0,0,0,0,0,0], array[1,2,3,4,5,6]);
ERROR:  preliminary segment-level calculation function "float8_mregr_combine(double precision[],double precision[])" called with invalid parameters
DETAIL:  The independent-variable array is not of constant width.
CREATE TABLE regr_test as 
   select array[0,0,0,0,0,0]::float8[] as x, array[2,0,0,0,0,0,0,0,0,0] as y
DISTRIBUTED RANDOMLY;
select float8_regr_accum(x, 0, 3), 
       float8_regr_accum(x, 0, 2), 
       x 
from regr_test;
 float8_regr_accum | float8_regr_accum |       x       
-------------------+-------------------+---------------
 {1,3,9,0,0,0}     | {1,2,4,0,0,0}     | {0,0,0,0,0,0}
(1 row)

select float8_regr_amalg(x, array[1,3,9,0,0,0]), 
       float8_regr_amalg(x, array[1,2,4,0,0,0]), 
       x 
from regr_test;
 float8_regr_amalg | float8_regr_amalg |       x       
-------------------+-------------------+---------------
 {1,3,9,0,0,0}     | {1,2,4,0,0,0}     | {0,0,0,0,0,0}
(1 row)

select float8_mregr_accum(x, 0, array[1,3]), 
       float8_mregr_accum(x, 0, array[1,2]), 
       x 
from regr_test;
ERROR:  transition function "float8_mregr_accum(double precision[],double precision,double precision[])" not called from aggregate  (seg1 slice1 @hostname@:40001 pid=75252)
select float8_mregr_combine(y, array[2,1,2,3,4,5,6,7,8,9]), 
       float8_mregr_combine(y, array[2,9,8,7,6,5,4,3,2,1]), 
       y
from regr_test;
 float8_mregr_combine  | float8_mregr_combine  |           y           
-----------------------+-----------------------+-----------------------
 {2,1,2,3,4,5,6,7,8,9} | {2,9,8,7,6,5,4,3,2,1} | {2,0,0,0,0,0,0,0,0,0}
(1 row)

DROP TABLE regr_test;
DROP TABLE weibull;
