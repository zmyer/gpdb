-- create functions to query uao auxiliary tables through gp_dist_random instead of going through utility mode
CREATE OR REPLACE FUNCTION gp_aovisimap_dist_random(
  IN relation_name text) RETURNS setof record AS $$
DECLARE
  relid oid;
  result record;
BEGIN
  select into relid oid from pg_class where relname=quote_ident(relation_name);
  for result in
      EXECUTE 'select * from gp_dist_random(''pg_aoseg.pg_aovisimap_' || relid ||''');'
  loop
      return next result;
  end loop;
  return;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION gp_aovisimap_count(
  IN relation_name text) RETURNS int AS $$
DECLARE
  aovisimap_record record;
  result int := 0;
BEGIN
  for aovisimap_record in
      EXECUTE 'select gp_toolkit.__gp_aovisimap(''' || relation_name || '''::regclass) from gp_dist_random(''gp_id'');'
  loop
      result := result + 1;
  end loop;
  return result;
END;
$$ LANGUAGE plpgsql;
-- Join aoseg table and PT to verify eof values are equal.
CREATE TYPE aoseg_pt_rec as (segno integer, tupcount bigint,
 eofuncompressed bigint, mirror_appendonly_new_eof bigint);
CREATE OR REPLACE FUNCTION gp_aotable_eof_dist_random(
  IN relation_name text) RETURNS setof aoseg_pt_rec AS $$
DECLARE
  aorelfilenode oid;
  result record;
BEGIN
  select into aorelfilenode relfilenode from pg_class where relname=quote_ident(relation_name);
  for result in
    EXECUTE 'select aoseg.segno, aoseg.tupcount, aoseg.eofuncompressed,
             pt.mirror_append_only_new_eof from pg_aoseg.pg_aoseg_' ||
             aorelfilenode || ' aoseg inner join
             gp_persistent_relation_node pt on aoseg.segno =
             pt.segment_file_num and pt.relfilenode_oid = ' ||
             aorelfilenode || ' and pt.mirror_append_only_new_eof =
             aoseg.eofuncompressed and aoseg.eofuncompressed != 0;'
  loop
    return next result;
  end loop;
  return;
END;
$$ LANGUAGE plpgsql;
-- Verify empty visimap for uao table
create table uao_table_check_empty_visimap (i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_check_empty_visimap values(1,'test',2);
SELECT 1 FROM pg_appendonly WHERE visimapidxid is not NULL AND visimapidxid is not NULL AND relid='uao_table_check_empty_visimap'::regclass;
 ?column? 
----------
        1
(1 row)

-- Verify GUC select_invisible=true for uao tables
create table uao_table_check_select_invisible (i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_check_select_invisible values(1,'test',4);
select * from uao_table_check_select_invisible;
 i |  j   | k 
---+------+---
 1 | test | 4
(1 row)

update uao_table_check_select_invisible set j = 'test_update' where i = 1;
select * from uao_table_check_select_invisible;
 i |      j      | k 
---+-------------+---
 1 | test_update | 4
(1 row)

set gp_select_invisible = true;
select * from uao_table_check_select_invisible;
 i |      j      | k 
---+-------------+---
 1 | test        | 4
 1 | test_update | 4
(2 rows)

set gp_select_invisible = false;
-- Verify that the visimap changes when delete from uao table
create table uao_table_check_visimap_changes_after_delete (i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
select * from uao_table_check_visimap_changes_after_delete;
 i | j | k 
---+---+---
(0 rows)

select count(*) from gp_aovisimap_dist_random('uao_table_check_visimap_changes_after_delete') as (segno integer, first_row_no bigint, visimap bytea);
 count 
-------
     0
(1 row)

insert into uao_table_check_visimap_changes_after_delete select i,'aa'||i,i+10 from generate_series(1,5) as i;
delete from uao_table_check_visimap_changes_after_delete where i=3;
select * from uao_table_check_visimap_changes_after_delete;
 i |  j  | k  
---+-----+----
 1 | aa1 | 11
 2 | aa2 | 12
 4 | aa4 | 14
 5 | aa5 | 15
(4 rows)

select count(*) from gp_aovisimap_dist_random('uao_table_check_visimap_changes_after_delete') as (segno integer, first_row_no bigint, visimap bytea);
 count 
-------
     1
(1 row)

-- Verify that the visimap changes when delete and truncate from uao table
create table uao_table_visimap_changes_after_trunc (i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
select * from uao_table_visimap_changes_after_trunc;
 i | j | k 
---+---+---
(0 rows)

select count(*) from gp_aovisimap_dist_random('uao_table_visimap_changes_after_trunc') as (segno integer, first_row_no bigint, visimap bytea);
 count 
-------
     0
(1 row)

insert into uao_table_visimap_changes_after_trunc select i,'aa'||i,i+10 from generate_series(1,5) as i;
delete from uao_table_visimap_changes_after_trunc where i=3;
select * from uao_table_visimap_changes_after_trunc;
 i |  j  | k  
---+-----+----
 4 | aa4 | 14
 5 | aa5 | 15
 1 | aa1 | 11
 2 | aa2 | 12
(4 rows)

select count(*) from gp_aovisimap_dist_random('uao_table_visimap_changes_after_trunc') as (segno integer, first_row_no bigint, visimap bytea);
 count 
-------
     1
(1 row)

truncate table uao_table_visimap_changes_after_trunc;
select * from uao_table_visimap_changes_after_trunc;
 i | j | k 
---+---+---
(0 rows)

select count(*) from gp_aovisimap_dist_random('uao_table_visimap_changes_after_trunc') as (segno integer, first_row_no bigint, visimap bytea);
 count 
-------
     0
(1 row)

-- Verify the usage of UDF gp_aovisimap for deleted tuple
create table uao_table_gp_aovisimap_after_delete(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_gp_aovisimap_after_delete select i,'aa'||i,i+10 from generate_series(1,10) as i;
select count(*) from gp_dist_random('uao_table_gp_aovisimap_after_delete');
 count 
-------
    10
(1 row)

select * from gp_aovisimap_count('uao_table_gp_aovisimap_after_delete');
 gp_aovisimap_count 
--------------------
                  0
(1 row)

delete from uao_table_gp_aovisimap_after_delete;
select count(*) from gp_dist_random('uao_table_gp_aovisimap_after_delete');
 count 
-------
     0
(1 row)

select * from gp_aovisimap_count('uao_table_gp_aovisimap_after_delete');
 gp_aovisimap_count 
--------------------
                 10
(1 row)

-- Verify the usage of UDF gp_aovisimap for update tuple
create table uao_table_gp_aovisimap_after_update(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_gp_aovisimap_after_update select i,'aa'||i,i+10 from generate_series(1,10) as i;
select count(*) from gp_dist_random('uao_table_gp_aovisimap_after_update');
 count 
-------
    10
(1 row)

select * from gp_aovisimap_count('uao_table_gp_aovisimap_after_update');
 gp_aovisimap_count 
--------------------
                  0
(1 row)

update uao_table_gp_aovisimap_after_update set j = j || '_9';
select count(*) from gp_dist_random('uao_table_gp_aovisimap_after_update');
 count 
-------
    10
(1 row)

select * from gp_aovisimap_count('uao_table_gp_aovisimap_after_update');
 gp_aovisimap_count 
--------------------
                 10
(1 row)

-- Verify the tupcount changes in pg_aoseg when deleting from uao table
create table uao_table_tupcount_changes_after_delete(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_tupcount_changes_after_delete select i,'aa'||i,i+10 from generate_series(1,10) as i;
select sum(tupcount) from gp_toolkit.__gp_aoseg_name('uao_table_tupcount_changes_after_delete');
 sum 
-----
  10
(1 row)

select count(*) from uao_table_tupcount_changes_after_delete;
 count 
-------
    10
(1 row)

delete from uao_table_tupcount_changes_after_delete where i = 1;
select sum(tupcount) from gp_toolkit.__gp_aoseg_name('uao_table_tupcount_changes_after_delete');
 sum 
-----
  10
(1 row)

select count(*) from uao_table_tupcount_changes_after_delete;
 count 
-------
     9
(1 row)

vacuum full uao_table_tupcount_changes_after_delete;
select sum(tupcount) from gp_toolkit.__gp_aoseg_name('uao_table_tupcount_changes_after_delete');
 sum 
-----
   9
(1 row)

select count(*) from uao_table_tupcount_changes_after_delete;
 count 
-------
     9
(1 row)

-- Verify the tupcount changes in pg_aoseg when updating uao table
create table uao_table_tupcount_changes_after_update(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_tupcount_changes_after_update select i,'aa'||i,i+10 from generate_series(1,10) as i;
select tupcount from gp_toolkit.__gp_aoseg_name('uao_table_tupcount_changes_after_update');
 tupcount 
----------
       10
(1 row)

select count(*) from uao_table_tupcount_changes_after_update;
 count 
-------
    10
(1 row)

update uao_table_tupcount_changes_after_update set j=j||'test11' where i = 1;
select tupcount from gp_toolkit.__gp_aoseg_name('uao_table_tupcount_changes_after_update');
 tupcount 
----------
       11
(1 row)

select count(*) from uao_table_tupcount_changes_after_update;
 count 
-------
    10
(1 row)

vacuum full uao_table_tupcount_changes_after_update;
select sum(tupcount) from gp_toolkit.__gp_aoseg_name('uao_table_tupcount_changes_after_update');
 sum 
-----
  10
(1 row)

select count(*) from uao_table_tupcount_changes_after_update;
 count 
-------
    10
(1 row)

-- Verify the hidden tup_count using UDF gp_aovisimap_hidden_info(oid) for uao relation after delete and vacuum
create table uao_table_check_hidden_tup_count_after_delete(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_check_hidden_tup_count_after_delete select i,'aa'||i,i+10 from generate_series(1,10) as i;
select gp_toolkit.__gp_aovisimap_hidden_info('uao_table_check_hidden_tup_count_after_delete'::regclass) from gp_dist_random('gp_id');
 __gp_aovisimap_hidden_info 
----------------------------
 (1,0,5)
 (1,0,3)
 (1,0,2)
(3 rows)

delete from uao_table_check_hidden_tup_count_after_delete;
select gp_toolkit.__gp_aovisimap_hidden_info('uao_table_check_hidden_tup_count_after_delete'::regclass) from gp_dist_random('gp_id');
 __gp_aovisimap_hidden_info 
----------------------------
 (1,5,5)
 (1,3,3)
 (1,2,2)
(3 rows)

vacuum full uao_table_check_hidden_tup_count_after_delete;
select gp_toolkit.__gp_aovisimap_hidden_info('uao_table_check_hidden_tup_count_after_delete'::regclass) from gp_dist_random('gp_id');
 __gp_aovisimap_hidden_info 
----------------------------
 (1,0,0)
 (2,0,0)
 (1,0,0)
 (2,0,0)
 (1,0,0)
 (2,0,0)
(6 rows)

-- Verify the hidden tup_count using UDF gp_aovisimap_hidden_info(oid) for uao relation after update and vacuum
create table uao_table_check_hidden_tup_count_after_update(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_check_hidden_tup_count_after_update select i,'aa'||i,i+10 from generate_series(1,10) as i;
select gp_toolkit.__gp_aovisimap_hidden_info('uao_table_check_hidden_tup_count_after_update'::regclass) from gp_dist_random('gp_id');
 __gp_aovisimap_hidden_info 
----------------------------
 (1,0,3)
 (1,0,2)
 (1,0,5)
(3 rows)

update uao_table_check_hidden_tup_count_after_update set j = 'test21';
select gp_toolkit.__gp_aovisimap_hidden_info('uao_table_check_hidden_tup_count_after_update'::regclass) from gp_dist_random('gp_id');
 __gp_aovisimap_hidden_info 
----------------------------
 (1,5,10)
 (1,3,6)
 (1,2,4)
(3 rows)

vacuum full uao_table_check_hidden_tup_count_after_update;
select gp_toolkit.__gp_aovisimap_hidden_info('uao_table_check_hidden_tup_count_after_update'::regclass) from gp_dist_random('gp_id');
 __gp_aovisimap_hidden_info 
----------------------------
 (1,0,0)
 (2,0,3)
 (1,0,0)
 (2,0,5)
 (1,0,0)
 (2,0,2)
(6 rows)

-- Verify the eof in pg_aoseg and gp_persistent_relation_node are the same for uao relation after delete
create table uao_table_check_eof_after_delete(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_check_eof_after_delete select i,'aa'||i,i+10 from generate_series(1,20) as i;
select gp_aotable_eof_dist_random('uao_table_check_eof_after_delete') from gp_dist_random('gp_id')
 as (segno integer, tupcount bigint, eofuncompressed bigint, mirror_appendonly_new_eof bigint);
 gp_aotable_eof_dist_random 
----------------------------
 (1,5,168,168)
 (1,7,216,216)
 (1,8,240,240)
(3 rows)

delete from uao_table_check_eof_after_delete where i in (1,5,13);
select gp_aotable_eof_dist_random('uao_table_check_eof_after_delete') from gp_dist_random('gp_id')
 as (segno integer, tupcount bigint, eofuncompressed bigint, mirror_appendonly_new_eof bigint);
 gp_aotable_eof_dist_random 
----------------------------
 (1,8,240,240)
 (1,5,168,168)
 (1,7,216,216)
(3 rows)

vacuum full uao_table_check_eof_after_delete;
select gp_aotable_eof_dist_random('uao_table_check_eof_after_delete') from gp_dist_random('gp_id')
 as (segno integer, tupcount bigint, eofuncompressed bigint, mirror_appendonly_new_eof bigint);
 gp_aotable_eof_dist_random 
----------------------------
 (1,5,168,168)
 (2,5,168,168)
 (2,7,216,216)
(3 rows)

-- Verify the eof in pg_aoseg and gp_persistent_relation_node are the same for uao relation after update
create table uao_table_check_eof_after_update(i int, j varchar(20), k int ) with (appendonly=true) DISTRIBUTED BY (i);
insert into uao_table_check_eof_after_update select i,'aa'||i,i+10 from generate_series(1,20) as i;
select gp_aotable_eof_dist_random('uao_table_check_eof_after_update') from gp_dist_random('gp_id')
 as (segno integer, tupcount bigint, eofuncompressed bigint, mirror_appendonly_new_eof bigint);
 gp_aotable_eof_dist_random 
----------------------------
 (1,8,240,240)
 (1,5,168,168)
 (1,7,216,216)
(3 rows)

update uao_table_check_eof_after_update set k = k + 100 where i in (1,5,13);
select gp_aotable_eof_dist_random('uao_table_check_eof_after_update') from gp_dist_random('gp_id')
 as (segno integer, tupcount bigint, eofuncompressed bigint, mirror_appendonly_new_eof bigint);
 gp_aotable_eof_dist_random 
----------------------------
 (1,9,304,304)
 (1,9,288,288)
 (1,5,168,168)
(3 rows)

vacuum full uao_table_check_eof_after_update;
select gp_aotable_eof_dist_random('uao_table_check_eof_after_update') from gp_dist_random('gp_id')
 as (segno integer, tupcount bigint, eofuncompressed bigint, mirror_appendonly_new_eof bigint);
 gp_aotable_eof_dist_random 
----------------------------
 (1,5,168,168)
 (2,7,216,216)
 (2,8,240,240)
(3 rows)

