CREATE TEMP TABLE x (
	a serial,
	b int,
	c text not null default 'stuff',
	d text,
	e text
) WITH OIDS;
NOTICE:  CREATE TABLE will create implicit sequence "x_a_seq" for serial column "x.a"
NOTICE:  OIDS=TRUE is not recommended for user-created tables. Use OIDS=FALSE to prevent wrap-around of the OID counter
CREATE FUNCTION fn_x_before () RETURNS TRIGGER AS '
  BEGIN
		NEW.e := ''before trigger fired''::text;
		return NEW;
	END;
' LANGUAGE plpgsql;
CREATE FUNCTION fn_x_after () RETURNS TRIGGER AS '
  BEGIN
		UPDATE x set e=''after trigger fired'' where c=''stuff'';
		return NULL;
	END;
' LANGUAGE plpgsql;
CREATE TRIGGER trg_x_after AFTER INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_after();
CREATE TRIGGER trg_x_before BEFORE INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_before();
COPY x (a, b, c, d, e) from stdin;
ERROR:  function cannot execute on segment because it issues a non-SELECT statement
CONTEXT:  SQL statement "UPDATE x set e='after trigger fired' where c='stuff'"
PL/pgSQL function "fn_x_after" line 2 at SQL statement
COPY x (b, d) from stdin;
ERROR:  function cannot execute on segment because it issues a non-SELECT statement
CONTEXT:  SQL statement "UPDATE x set e='after trigger fired' where c='stuff'"
PL/pgSQL function "fn_x_after" line 2 at SQL statement
COPY x (b, d) from stdin;
ERROR:  function cannot execute on segment because it issues a non-SELECT statement
CONTEXT:  SQL statement "UPDATE x set e='after trigger fired' where c='stuff'"
PL/pgSQL function "fn_x_after" line 2 at SQL statement
COPY x (a, b, c, d, e) from stdin;
ERROR:  function cannot execute on segment because it issues a non-SELECT statement
CONTEXT:  SQL statement "UPDATE x set e='after trigger fired' where c='stuff'"
PL/pgSQL function "fn_x_after" line 2 at SQL statement
-- non-existent column in column list: should fail
COPY x (xyz) from stdin;
ERROR:  column "xyz" of relation "x" does not exist
-- too many columns in column list: should fail
COPY x (a, b, c, d, e, d, c) from stdin;
ERROR:  column "d" specified more than once
-- missing data: should fail
COPY x from stdin;
ERROR:  missing data for column "b"
CONTEXT:  COPY x, line 1, column a: ""
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2000	230	23	23"
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2001	231	\N	\N"
-- extra data: should fail
COPY x from stdin;
ERROR:  extra data after last expected column
CONTEXT:  COPY x, line 1: "2002	232	40	50	60	70	80"
-- various COPY options: delimiters, oids, NULL string
COPY x (b, c, d, e) from stdin with oids delimiter ',' null 'x';
ERROR:  function cannot execute on segment because it issues a non-SELECT statement
CONTEXT:  SQL statement "UPDATE x set e='after trigger fired' where c='stuff'"
PL/pgSQL function "fn_x_after" line 2 at SQL statement
COPY x from stdin WITH DELIMITER AS ';' NULL AS '';
ERROR:  function cannot execute on segment because it issues a non-SELECT statement
CONTEXT:  SQL statement "UPDATE x set e='after trigger fired' where c='stuff'"
PL/pgSQL function "fn_x_after" line 2 at SQL statement
COPY x from stdin WITH DELIMITER AS ':' NULL AS E'\\X';
ERROR:  function cannot execute on segment because it issues a non-SELECT statement
CONTEXT:  SQL statement "UPDATE x set e='after trigger fired' where c='stuff'"
PL/pgSQL function "fn_x_after" line 2 at SQL statement
-- check results of copy in
SELECT * FROM x;
 a | b | c | d | e 
---+---+---+---+---
(0 rows)

-- COPY w/ oids on a table w/o oids should fail
CREATE TABLE no_oids (
	a	int,
	b	int
) WITHOUT OIDS;
INSERT INTO no_oids (a, b) VALUES (5, 10);
INSERT INTO no_oids (a, b) VALUES (20, 30);
-- should fail
COPY no_oids FROM stdin WITH OIDS;
ERROR:  table "no_oids" does not have OIDs
COPY no_oids TO stdout WITH OIDS;
ERROR:  table "no_oids" does not have OIDs
-- check copy out
COPY x TO stdout;
COPY x (c, e) TO stdout;
COPY x (b, e) TO stdout WITH NULL 'I''m null';
CREATE TEMP TABLE y (
	col1 text,
	col2 text
);
INSERT INTO y VALUES ('Jackson, Sam', E'\\h');
INSERT INTO y VALUES ('It is "perfect".',E'\t');
INSERT INTO y VALUES ('', NULL);
COPY y TO stdout WITH CSV;
"Jackson, Sam",\h
"It is ""perfect"".",	
"",
COPY y TO stdout WITH CSV QUOTE '''' DELIMITER '|';
Jackson, Sam|\h
It is "perfect".|	
''|
COPY y TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\';
"Jackson, Sam","\\h"
"It is \"perfect\".","	"
"",
--test that we read consecutive LFs properly
CREATE TEMP TABLE testnl (a int, b text, c int);
COPY testnl FROM stdin CSV;
-- test end of copy marker
CREATE TEMP TABLE testeoc (a text);
COPY testeoc FROM stdin CSV;
COPY testeoc TO stdout CSV;
a\.
\.b
c\.d
"\."
DROP TABLE x, y;
DROP FUNCTION fn_x_before();
DROP FUNCTION fn_x_after();
