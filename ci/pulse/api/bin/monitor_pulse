#!/usr/bin/env ruby

require_relative '../lib/pulse_proxy'
require_relative '../lib/pulse_options'
require_relative '../lib/pulse_build_result'

options = PulseOptions.forMonitorJob
options.read_from_environment
options.print_environment_settings
options.validate_options

puts ""
puts "Build project URL: #{options.build_url}"
puts ""
puts "Polling Pulse build status every #{PulseOptions::DEFAULT_POLLING_TIME_IN_SECONDS}-#{PulseOptions::DEFAULT_POLLING_TIME_IN_SECONDS + 10} seconds with a timeout of #{options.timeout} hours"

pulse_proxy = PulseProxy.new(options.url, options.username, options.password)
token = options.new_token_time

print "Waiting"
while Time.now < options.end_time do
  if Time.now < token
    pulse_proxy.refresh
    token = options.new_token_time(true)
  end

  # pulse always returns a single-element array
  build_result = pulse_proxy.request_getBuild(options.project_name, options.build_id).first

  break if build_result['completed']
  print "."
  sleep(options.polling_time)
end
puts ""

build_messages = pulse_proxy.request_getMessagesInBuild(options.project_name, options.build_id)
build_artifacts = pulse_proxy.request_getArtifactsInBuild(options.project_name, options.build_id)
pulse_build_result = PulseBuildResult.new(options, build_result, build_messages, build_artifacts)
pulse_build_result.print_build_stats
pulse_build_result.print_build_artifacts

exit pulse_build_result.build_successful? ? 0 : 1
