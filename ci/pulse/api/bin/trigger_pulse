#!/usr/bin/env ruby

require_relative '../lib/pulse_proxy'
require_relative '../lib/pulse_options'

options = PulseOptions.forTriggerJob
options.read_from_environment
options.read_from_concourse_urls("installer_gpdb_rc/url", "gpdb_src_archive/url", "qautils_tarball/url", "gpdb_src_behave_tarball/url")
options.print_environment_settings
options.validate_options

pulse_proxy = PulseProxy.new(options.url, options.username, options.password)

request_ids = pulse_proxy.request_triggerBuild(options.project_name, options.trigger_options)
request_id = request_ids.first
puts "request_id is #{request_id}"

# Give the build time to be activated
build_request_status = pulse_proxy.waitForBuildRequestToBeActivated(request_id, options.build_request_time)
status = build_request_status['status']

if status == 'QUEUED'
  puts "Waited #{options.build_request_time} seconds for the build to be activated, but it was still in QUEUED state"
  puts "We consider this a failure because often it means that the pulse agents are misconfigured"
  exit 1
elsif status != 'ACTIVATED'
  puts "Build trigger failed with status #{status}"
  exit 1
end

build_id = build_request_status['buildId']
puts "build_id is #{build_id}"

puts "Writing build_id to #{options.output_dir}/build_id"
open("#{options.output_dir}/build_id", 'w+') { |f| f.puts build_id }
