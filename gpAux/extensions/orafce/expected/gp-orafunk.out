-- --------------------------------------
-- bring in da noise, bring in da orafunk
-- --------------------------------------
-- *********************************************************************
-- *********************************************************************
-- This script will produce diffs if you add or change definitions in
-- the contrib/orafce module. If you want to change the results, you
-- must make the changes in regress/output/orafunk.source, not
-- regress/expected, and use gpsourcify.pl to generate a ".source" file.
--
-- From the regress directory invoke the command:
--
--    gpsourcify.pl results/orafunk.out > output/orafunk.source
--
-- *********************************************************************
-- *********************************************************************
-- *********************************************************************
-- *********************************************************************
-- start_ignore
\i orafunc.sql
-- Adjust this setting to control where the objects get created.
\set ORA_SCHEMA oracompat
CREATE SCHEMA :ORA_SCHEMA;
SET search_path = :ORA_SCHEMA;
BEGIN;
-- NVL
CREATE OR REPLACE FUNCTION nvl(anyelement, anyelement)
RETURNS anyelement
AS '$libdir/orafunc','ora_nvl'
LANGUAGE C IMMUTABLE;
-- ADD_MONTHS
CREATE OR REPLACE FUNCTION add_months(day date, value int)
RETURNS date
AS '$libdir/orafunc'
LANGUAGE 'C' IMMUTABLE STRICT;
-- LAST_DAY
CREATE OR REPLACE FUNCTION last_day(value date)
RETURNS date
AS '$libdir/orafunc'
LANGUAGE 'C' IMMUTABLE STRICT;
-- NEXT_DAY
CREATE OR REPLACE FUNCTION next_day(value date, weekday text)
RETURNS date
AS '$libdir/orafunc'
LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION next_day(value date, weekday integer)
RETURNS date
AS '$libdir/orafunc', 'next_day_by_index'
LANGUAGE 'C' IMMUTABLE STRICT;
-- MONTHS_BETWEEN
CREATE OR REPLACE FUNCTION months_between(date1 date, date2 date)
RETURNS numeric
AS '$libdir/orafunc'
LANGUAGE 'C' IMMUTABLE STRICT;
-- TRUNC
CREATE OR REPLACE FUNCTION trunc(value timestamp with time zone, fmt text)
RETURNS timestamp with time zone
AS '$libdir/orafunc', 'ora_timestamptz_trunc'
LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION trunc(value timestamp with time zone)
RETURNS timestamp with time zone
AS $$ SELECT trunc($1, 'DDD'); $$
LANGUAGE 'SQL' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION trunc(value date, fmt text)
RETURNS date
AS '$libdir/orafunc', 'ora_date_trunc'
LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION trunc(value date)
RETURNS date
AS $$ SELECT $1; $$
LANGUAGE 'SQL' IMMUTABLE STRICT;
-- ROUND
CREATE OR REPLACE FUNCTION round(value timestamp with time zone, fmt text)
RETURNS timestamp with time zone
AS '$libdir/orafunc', 'ora_timestamptz_round'
LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION round(value timestamp with time zone)
RETURNS timestamp with time zone
AS $$ SELECT round($1, 'DDD'); $$
LANGUAGE 'SQL' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION round(value date, fmt text)
RETURNS date
AS '$libdir/orafunc','ora_date_round'
LANGUAGE 'C' IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION round(value date)
RETURNS date
AS $$ SELECT $1; $$
LANGUAGE 'SQL' IMMUTABLE STRICT;
-- INSTR
CREATE OR REPLACE FUNCTION instr(str text, patt text, start int, nth int)
RETURNS int
AS '$libdir/orafunc','plvstr_instr4'
LANGUAGE C IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION instr(str text, patt text, start int)
RETURNS int
AS '$libdir/orafunc','plvstr_instr3'
LANGUAGE C IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION instr(str text, patt text)
RETURNS int
AS '$libdir/orafunc','plvstr_instr2'
LANGUAGE C IMMUTABLE STRICT;
-- REVERSE
CREATE OR REPLACE FUNCTION reverse(str text, start int, _end int)
RETURNS text
AS '$libdir/orafunc','plvstr_rvrs'
LANGUAGE C IMMUTABLE;
CREATE OR REPLACE FUNCTION reverse(str text, start int)
RETURNS text
AS $$ SELECT reverse($1,$2,NULL);$$
LANGUAGE SQL IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION reverse(str text)
RETURNS text
AS $$ SELECT reverse($1,1,NULL);$$
LANGUAGE SQL IMMUTABLE STRICT;
-- CONCAT
CREATE OR REPLACE FUNCTION concat(text, text)
RETURNS text
AS '$libdir/orafunc','ora_concat'
LANGUAGE C IMMUTABLE;
CREATE OR REPLACE FUNCTION concat(text, anyarray)
RETURNS text
AS 'SELECT concat($1, $2::text)'
LANGUAGE sql IMMUTABLE;
CREATE OR REPLACE FUNCTION concat(anyarray, text)
RETURNS text
AS 'SELECT concat($1::text, $2)'
LANGUAGE sql IMMUTABLE;
CREATE OR REPLACE FUNCTION concat(anyarray, anyarray)
RETURNS text
AS 'SELECT concat($1::text, $2::text)'
LANGUAGE sql IMMUTABLE;
-- NANVL
CREATE OR REPLACE FUNCTION nanvl(float4, float4)
RETURNS float4 AS
$$ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; $$
LANGUAGE sql IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION nanvl(float8, float8)
RETURNS float8 AS
$$ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; $$
LANGUAGE sql IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION nanvl(numeric, numeric)
RETURNS numeric AS
$$ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; $$
LANGUAGE sql IMMUTABLE STRICT;
-- BITAND
CREATE OR REPLACE FUNCTION bitand(bigint, bigint)
RETURNS bigint
AS $$ SELECT $1 & $2; $$
LANGUAGE sql IMMUTABLE STRICT;
-- LISTAGG
CREATE OR REPLACE FUNCTION listagg1_transfn(text, text)
RETURNS text
AS '$libdir/orafunc','orafce_listagg1_transfn'
LANGUAGE C IMMUTABLE;
CREATE OR REPLACE FUNCTION listagg2_transfn(text, text, text)
RETURNS text
AS '$libdir/orafunc','orafce_listagg2_transfn'
LANGUAGE C IMMUTABLE;
DROP AGGREGATE IF EXISTS :ORA_SCHEMA.listagg(text);
psql:@abs_builddir@/../../../contrib/orafce/orafunc.sql:172: NOTICE:  aggregate oracompat.listagg(text) does not exist, skipping
CREATE  AGGREGATE :ORA_SCHEMA.listagg(text) (
  SFUNC=:ORA_SCHEMA.listagg1_transfn,
  STYPE=text
);
DROP AGGREGATE IF EXISTS :ORA_SCHEMA.listagg(text, text);
psql:@abs_builddir@/../../../contrib/orafce/orafunc.sql:178: NOTICE:  aggregate oracompat.listagg(text,text) does not exist, skipping
CREATE AGGREGATE :ORA_SCHEMA.listagg(text, text) (
  SFUNC=:ORA_SCHEMA.listagg2_transfn,
  STYPE=text
);
-- NVL2
CREATE OR REPLACE FUNCTION nvl2(anyelement, anyelement, anyelement)
RETURNS anyelement
AS '$libdir/orafunc','ora_nvl2'
LANGUAGE C IMMUTABLE;
-- LNNVL
CREATE OR REPLACE FUNCTION lnnvl(bool)
RETURNS bool
AS '$libdir/orafunc','ora_lnnvl'
LANGUAGE C IMMUTABLE;
-- DUMP
CREATE OR REPLACE FUNCTION dump("any") 
RETURNS varchar
AS '$libdir/orafunc', 'orafce_dump'
LANGUAGE C;
CREATE OR REPLACE FUNCTION dump("any", integer)
RETURNS varchar
AS '$libdir/orafunc', 'orafce_dump'
LANGUAGE C;
-- NLSSORT
CREATE OR REPLACE FUNCTION nlssort(text, text)
RETURNS bytea
AS '$libdir/orafunc', 'ora_nlssort'
LANGUAGE 'C' IMMUTABLE;
-- SUBSTR
CREATE OR REPLACE FUNCTION substr(str text, start int)
RETURNS text
AS '$libdir/orafunc','oracle_substr2'
LANGUAGE C IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION substr(str text, start int, len int)
RETURNS text
AS '$libdir/orafunc','oracle_substr3'
LANGUAGE C IMMUTABLE STRICT;
COMMIT;
-- end_ignore
set search_path = oracompat;
show search_path;
 search_path 
-------------
 oracompat
(1 row)

SET DATESTYLE TO ISO;
select nvl('A'::text, 'B');
 nvl 
-----
 A
(1 row)

select nvl(NULL::text, 'B');
 nvl 
-----
 B
(1 row)

select nvl(NULL::text, NULL);
 nvl 
-----
 
(1 row)

select nvl(1, 2);
 nvl 
-----
   1
(1 row)

select nvl(NULL, 2);
 nvl 
-----
   2
(1 row)

SELECT add_months ('2003-08-01', 3);
 add_months 
------------
 2003-11-01
(1 row)

SELECT add_months ('2003-08-01', -3);
 add_months 
------------
 2003-05-01
(1 row)

SELECT add_months ('2003-08-21', -3);
 add_months 
------------
 2003-05-21
(1 row)

SELECT add_months ('2003-01-31', 1);
 add_months 
------------
 2003-02-28
(1 row)

SELECT add_months ('2008-02-28', 1);
 add_months 
------------
 2008-03-28
(1 row)

SELECT add_months ('2008-02-29', 1);
 add_months 
------------
 2008-03-31
(1 row)

SELECT add_months ('2008-01-31', 12);
 add_months 
------------
 2009-01-31
(1 row)

SELECT add_months ('2008-01-31', -12);
 add_months 
------------
 2007-01-31
(1 row)

SELECT add_months ('2008-01-31', 95903);
 add_months 
------------
 9999-12-31
(1 row)

SELECT add_months ('2008-01-31', -80640);
  add_months   
---------------
 4712-01-31 BC
(1 row)

SELECT last_day(to_date('2003/03/15', 'yyyy/mm/dd'));
  last_day  
------------
 2003-03-31
(1 row)

SELECT last_day(to_date('2003/02/03', 'yyyy/mm/dd'));
  last_day  
------------
 2003-02-28
(1 row)

SELECT last_day(to_date('2004/02/03', 'yyyy/mm/dd'));
  last_day  
------------
 2004-02-29
(1 row)

SELECT last_day('1900-02-01');
  last_day  
------------
 1900-02-28
(1 row)

SELECT last_day('2000-02-01');
  last_day  
------------
 2000-02-29
(1 row)

SELECT last_day('2007-02-01');
  last_day  
------------
 2007-02-28
(1 row)

SELECT last_day('2008-02-01');
  last_day  
------------
 2008-02-29
(1 row)

SELECT next_day ('2003-08-01', 'TUESDAY');
  next_day  
------------
 2003-08-05
(1 row)

SELECT next_day ('2003-08-06', 'WEDNESDAY');
  next_day  
------------
 2003-08-13
(1 row)

SELECT next_day ('2003-08-06', 'SUNDAY');
  next_day  
------------
 2003-08-10
(1 row)

SELECT next_day ('2008-01-01', 'sun');
  next_day  
------------
 2008-01-06
(1 row)

SELECT next_day ('2008-01-01', 'sunAAA');
ERROR:  invalid day name "sunAAA"
SELECT next_day ('2008-01-01', 1);
  next_day  
------------
 2008-01-06
(1 row)

SELECT next_day ('2008-01-01', 7);
  next_day  
------------
 2008-01-05
(1 row)

SELECT months_between (to_date ('2003/01/01', 'yyyy/mm/dd'),
					   to_date ('2003/03/14 ', 'yyyy/mm/dd'));
  months_between   
-------------------
 -2.41935483870968
(1 row)

SELECT months_between (to_date ('2003/07/01', 'yyyy/mm/dd'),
					   to_date ('2003/03/14', 'yyyy/mm/dd'));
  months_between  
------------------
 3.58064516129032
(1 row)

SELECT months_between (to_date ('2003/07/02', 'yyyy/mm/dd'),
					   to_date ('2003/07/02', 'yyyy/mm/dd'));
 months_between 
----------------
              0
(1 row)

SELECT months_between (to_date ('2003/08/02', 'yyyy/mm/dd'),
					   to_date ('2003/06/02', 'yyyy/mm/dd'));
 months_between 
----------------
              2
(1 row)

SELECT months_between ('2007-02-28', '2007-04-30');
 months_between 
----------------
             -2
(1 row)

SELECT months_between ('2008-01-31', '2008-02-29');
 months_between 
----------------
             -1
(1 row)

SELECT months_between ('2008-02-29', '2008-03-31');
 months_between 
----------------
             -1
(1 row)

SELECT months_between ('2008-02-29', '2008-04-30');
 months_between 
----------------
             -2
(1 row)

SELECT trunc(months_between('21-feb-2008', '2008-02-29'));
 trunc 
-------
     0
(1 row)

select round(to_date ('22-AUG-03', 'DD-MON-YY'),'YEAR')  =  to_date ('01-JAN-04', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select round(to_date ('22-AUG-03', 'DD-MON-YY'),'Q')  =  to_date ('01-OCT-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select round(to_date ('22-AUG-03', 'DD-MON-YY'),'MONTH') =  to_date ('01-SEP-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select round(to_date ('22-AUG-03', 'DD-MON-YY'),'DDD')  =  to_date ('22-AUG-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select round(to_date ('22-AUG-03', 'DD-MON-YY'),'DAY')  =  to_date ('24-AUG-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select round(timestamp with time zone '2012-03-14 17:36:33.366057-07', 'HH') = (timestamp with time zone '2012-03-14 18:00:00-07');
 ?column? 
----------
 t
(1 row)

select round(timestamp with time zone '2012-03-14 17:36:33.366057-07', 'Mi') = (timestamp with time zone '2012-03-14 17:37:00-07');
 ?column? 
----------
 t
(1 row)

select round(timestamp with time zone '2012-03-14 17:36:33.366057-07', 'Q') = (timestamp with time zone '2012-04-01 00:00:00-07');
 ?column? 
----------
 t
(1 row)

select round(timestamp with time zone '2012-03-14 17:36:33.366057-07')::date = (date '2012-03-15');
 ?column? 
----------
 t
(1 row)

select round(timestamp with time zone '2012-03-14 17:36:33.366057-07'::date) = (date '2012-03-14');
 ?column? 
----------
 t
(1 row)

select round(timestamp with time zone '2012-03-14 17:36:33.366057-07'::date, 'Q') = (date '2012-04-01');
 ?column? 
----------
 t
(1 row)

select trunc(to_date ('22-AUG-03', 'DD-MON-YY'), 'YEAR')  =  to_date ('01-JAN-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select trunc(to_date ('22-AUG-03', 'DD-MON-YY'), 'Q')  =  to_date ('01-JUL-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select trunc(to_date ('22-AUG-03', 'DD-MON-YY'), 'MONTH') =  to_date ('01-AUG-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select trunc(to_date ('22-AUG-03', 'DD-MON-YY'), 'DDD')  =  to_date ('22-AUG-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select trunc(to_date ('22-AUG-03', 'DD-MON-YY'), 'DAY')  =  to_date ('17-AUG-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select trunc(timestamp with time zone '2012-03-14 17:36:33.366057-07', 'HH') = (timestamp with time zone '2012-03-14 17:00:00-07');
 ?column? 
----------
 t
(1 row)

select trunc(timestamp with time zone '2012-03-14 17:36:33.366057-07', 'Mi') = (timestamp with time zone '2012-03-14 17:36:00-07');
 ?column? 
----------
 t
(1 row)

select trunc(timestamp with time zone '2012-03-14 17:36:33.366057-07', 'Q') = (timestamp with time zone '2012-01-01 00:00:00-08');
 ?column? 
----------
 t
(1 row)

select trunc(timestamp with time zone '2012-03-14 17:36:33.366057-07') = (timestamp with time zone '2012-03-14 00:00:00-07');
 ?column? 
----------
 t
(1 row)

select trunc(timestamp with time zone '2012-03-14 17:36:33.366057-07'::date, 'Q') = (date '2012-01-01');
 ?column? 
----------
 t
(1 row)

select trunc(timestamp with time zone '2012-03-14 17:36:33.366057-07'::date) = (date '2012-03-14');
 ?column? 
----------
 t
(1 row)

select next_day(to_date('01-Aug-03', 'DD-MON-YY'), 'TUESDAY')  =  to_date ('05-Aug-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select next_day(to_date('06-Aug-03', 'DD-MON-YY'), 'WEDNESDAY') =  to_date ('13-Aug-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select next_day(to_date('06-Aug-03', 'DD-MON-YY'), 'SUNDAY')  =  to_date ('10-Aug-03', 'DD-MON-YY');
 ?column? 
----------
 t
(1 row)

select instr('Tech on the net', 'e') =2;
 ?column? 
----------
 t
(1 row)

select instr('Tech on the net', 'e', 1, 1) = 2;
 ?column? 
----------
 t
(1 row)

select instr('Tech on the net', 'e', 1, 2) = 11;
 ?column? 
----------
 t
(1 row)

select instr('Tech on the net', 'e', 1, 3) = 14;
 ?column? 
----------
 t
(1 row)

select instr('Tech on the net', 'e', -3, 2) = 2;
 ?column? 
----------
 t
(1 row)

select instr('abc', NULL) IS NULL;
 ?column? 
----------
 t
(1 row)

select 1 = instr('abc', '');
 ?column? 
----------
 t
(1 row)

select 1 = instr('abc', 'a');
 ?column? 
----------
 t
(1 row)

select 3 = instr('abc', 'c');
 ?column? 
----------
 t
(1 row)

select 0 = instr('abc', 'z');
 ?column? 
----------
 t
(1 row)

select 1 = instr('abcabcabc', 'abca', 1);
 ?column? 
----------
 t
(1 row)

select 4 = instr('abcabcabc', 'abca', 2);
 ?column? 
----------
 t
(1 row)

select 0 = instr('abcabcabc', 'abca', 7);
 ?column? 
----------
 t
(1 row)

select 0 = instr('abcabcabc', 'abca', 9);
 ?column? 
----------
 t
(1 row)

select 4 = instr('abcabcabc', 'abca', -1);
 ?column? 
----------
 t
(1 row)

select 1 = instr('abcabcabc', 'abca', -8);
 ?column? 
----------
 t
(1 row)

select 1 = instr('abcabcabc', 'abca', -9);
 ?column? 
----------
 t
(1 row)

select 0 = instr('abcabcabc', 'abca', -10);
 ?column? 
----------
 t
(1 row)

select 1 = instr('abcabcabc', 'abca', 1, 1);
 ?column? 
----------
 t
(1 row)

select 4 = instr('abcabcabc', 'abca', 1, 2);
 ?column? 
----------
 t
(1 row)

select 0 = instr('abcabcabc', 'abca', 1, 3);
 ?column? 
----------
 t
(1 row)

select reverse('abcdef') = 'fedcba';
 ?column? 
----------
 t
(1 row)

select reverse('中国') = '国中';
 ?column? 
----------
 t
(1 row)

select concat('Tech on', ' the Net') =  'Tech on the Net';
 ?column? 
----------
 t
(1 row)

select concat('a', 'b') =  'ab';
 ?column? 
----------
 t
(1 row)

select concat('a', NULL) = 'a';
 ?column? 
----------
 t
(1 row)

select concat(NULL, 'b') = 'b';
 ?column? 
----------
 t
(1 row)

select concat('a', 2::text) = 'a2';
 ?column? 
----------
 t
(1 row)

select concat(1::text, 'b') = '1b';
 ?column? 
----------
 t
(1 row)

select concat(1::text, 2::text) = '12';
 ?column? 
----------
 t
(1 row)

select concat(1::text, NULL) = '1';
 ?column? 
----------
 t
(1 row)

select concat(NULL, 2::text) = '2';
 ?column? 
----------
 t
(1 row)

SELECT nanvl(12345, 1), nanvl('NaN', 1);
 nanvl | nanvl 
-------+-------
 12345 |     1
(1 row)

SELECT nanvl(12345::float4, 1), nanvl('NaN'::float4, 1);
 nanvl | nanvl 
-------+-------
 12345 |     1
(1 row)

SELECT nanvl(12345::float8, 1), nanvl('NaN'::float8, 1);
 nanvl | nanvl 
-------+-------
 12345 |     1
(1 row)

SELECT nanvl(12345::numeric, 1), nanvl('NaN'::numeric, 1);
 nanvl | nanvl 
-------+-------
 12345 |     1
(1 row)

SELECT bitand(5,1), bitand(5,2), bitand(5,4);
 bitand | bitand | bitand 
--------+--------+--------
      1 |      0 |      4
(1 row)

select listagg(i::text) from generate_series(1,3) g(i);
 listagg 
---------
 123
(1 row)

select listagg(i::text, ',') from generate_series(1,3) g(i);
 listagg 
---------
 1,2,3
(1 row)

select coalesce(listagg(i::text), '<NULL>') from (SELECT ''::text) g(i);
 coalesce 
----------
 
(1 row)

select coalesce(listagg(i::text), '<NULL>') from generate_series(1,0) g(i);
 coalesce 
----------
 <NULL>
(1 row)

select nvl2('A'::text, 'B', 'C');
 nvl2 
------
 B
(1 row)

select nvl2(NULL::text, 'B', 'C');
 nvl2 
------
 C
(1 row)

select nvl2('A'::text, NULL, 'C');
 nvl2 
------
 
(1 row)

select nvl2(NULL::text, 'B', NULL);
 nvl2 
------
 
(1 row)

select nvl2(1, 2, 3);
 nvl2 
------
    2
(1 row)

select nvl2(NULL, 2, 3);
 nvl2 
------
    3
(1 row)

SELECT dump('Yellow dog'::text) ~ E'^Typ=25 Len=(\\d+): \\d+(,\\d+)*$' AS t;
 t 
---
 t
(1 row)

SELECT dump('Yellow dog'::text, 10) ~ E'^Typ=25 Len=(\\d+): \\d+(,\\d+)*$' AS t;
 t 
---
 t
(1 row)

SELECT dump('Yellow dog'::text, 17) ~ E'^Typ=25 Len=(\\d+): .(,.)*$' AS t;
 t 
---
 t
(1 row)

SELECT dump(10::int2) ~ E'^Typ=21 Len=2: \\d+(,\\d+){1}$' AS t;
 t 
---
 t
(1 row)

SELECT dump(10::int4) ~ E'^Typ=23 Len=4: \\d+(,\\d+){3}$' AS t;
 t 
---
 t
(1 row)

SELECT dump(10::int8) ~ E'^Typ=20 Len=8: \\d+(,\\d+){7}$' AS t;
 t 
---
 t
(1 row)

SELECT dump(10.23::float4) ~ E'^Typ=700 Len=4: \\d+(,\\d+){3}$' AS t;
 t 
---
 t
(1 row)

SELECT dump(10.23::float8) ~ E'^Typ=701 Len=8: \\d+(,\\d+){7}$' AS t;
 t 
---
 t
(1 row)

SELECT dump(10.23::numeric) ~ E'^Typ=1700 Len=(\\d+): \\d+(,\\d+)*$' AS t;
 t 
---
 t
(1 row)

SELECT dump('2008-10-10'::date) ~ E'^Typ=1082 Len=4: \\d+(,\\d+){3}$' AS t;
 t 
---
 t
(1 row)

SELECT dump('2008-10-10'::timestamp) ~ E'^Typ=1114 Len=8: \\d+(,\\d+){7}$' AS t;
 t 
---
 t
(1 row)

RESET DATESTYLE;
-- start_ignore
\i @abs_builddir@/../../../contrib/orafce/uninstall_orafunc.sql
-- Adjust the following if this is not the schema you installed into
\set ORA_SCHEMA oracompat
set search_path = :ORA_SCHEMA, pg_catalog;
BEGIN;
DROP FUNCTION IF EXISTS nvl(anyelement, anyelement);
DROP FUNCTION IF EXISTS add_months(day date, value int);
DROP FUNCTION IF EXISTS last_day(value date);
DROP FUNCTION IF EXISTS next_day(value date, weekday text);
DROP FUNCTION IF EXISTS next_day(value date, weekday integer);
DROP FUNCTION IF EXISTS months_between(date1 date, date2 date);
DROP FUNCTION IF EXISTS trunc(value date, fmt text);
DROP FUNCTION IF EXISTS trunc(value timestamp with time zone, fmt text);
DROP FUNCTION IF EXISTS trunc(value timestamp with time zone);
DROP FUNCTION IF EXISTS trunc(value date);
DROP FUNCTION IF EXISTS round(value timestamp with time zone, fmt text);
DROP FUNCTION IF EXISTS round(value timestamp with time zone);
DROP FUNCTION IF EXISTS round(value date);
DROP FUNCTION IF EXISTS round(value date, fmt text);
DROP FUNCTION IF EXISTS instr(str text, patt text, start int, nth int);
DROP FUNCTION IF EXISTS instr(str text, patt text, start int);
DROP FUNCTION IF EXISTS instr(str text, patt text);
DROP FUNCTION IF EXISTS reverse(text, int, int);
DROP FUNCTION IF EXISTS reverse(text, int);
DROP FUNCTION IF EXISTS reverse(text);
DROP FUNCTION IF EXISTS concat(text, text);
DROP FUNCTION IF EXISTS concat(anyarray, text);
DROP FUNCTION IF EXISTS concat(text, anyarray);
DROP FUNCTION IF EXISTS concat(anyarray, anyarray);
DROP FUNCTION IF EXISTS nanvl(float4, float4);
DROP FUNCTION IF EXISTS nanvl(float8, float8);
DROP FUNCTION IF EXISTS nanvl(numeric, numeric);
DROP FUNCTION IF EXISTS bitand(bigint, bigint);
DROP AGGREGATE IF EXISTS listagg(text);
DROP AGGREGATE IF EXISTS listagg(text, text);
DROP FUNCTION IF EXISTS listagg1_transfn(text, text);
DROP FUNCTION IF EXISTS listagg2_transfn(text, text, text);
DROP FUNCTION IF EXISTS nvl2(anyelement, anyelement, anyelement);
DROP FUNCTION IF EXISTS lnnvl(bool);
DROP FUNCTION IF EXISTS dump("any");
DROP FUNCTION IF EXISTS dump("any", integer);
DROP FUNCTION IF EXISTS nlssort(text, text);
DROP FUNCTION IF EXISTS substr(text, int, int);
DROP FUNCTION IF EXISTS substr(text, int);
COMMIT;
-- end_ignore
